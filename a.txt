Project Path: Vynix-v0

Source Tree:

```
Vynix-v0
├── app
│   ├── globals.css
│   ├── loading.tsx
│   ├── marketplace
│   │   ├── page.tsx
│   │   ├── marketplace.css
│   │   ├── layout.tsx
│   │   ├── card
│   │   │   └── [id]
│   │   │       └── page.tsx
│   │   └── create
│   │       └── page.tsx
│   ├── profile
│   │   └── page.tsx
│   ├── page.tsx
│   ├── layout.tsx
│   └── new
│       └── page.tsx
├── components
│   ├── theme-provider.tsx
│   ├── ui
│   │   ├── accordion.tsx
│   │   ├── alert-dialog.tsx
│   │   ├── alert.tsx
│   │   ├── aspect-ratio.tsx
│   │   ├── avatar.tsx
│   │   ├── badge.tsx
│   │   ├── breadcrumb.tsx
│   │   ├── button.tsx
│   │   ├── calendar.tsx
│   │   ├── card.tsx
│   │   ├── carousel.tsx
│   │   ├── chart.tsx
│   │   ├── checkbox.tsx
│   │   ├── collapsible.tsx
│   │   ├── command.tsx
│   │   ├── context-menu.tsx
│   │   ├── dialog.tsx
│   │   ├── drawer.tsx
│   │   ├── dropdown-menu.tsx
│   │   ├── form.tsx
│   │   ├── hover-card.tsx
│   │   ├── input-otp.tsx
│   │   ├── input.tsx
│   │   ├── label.tsx
│   │   ├── menubar.tsx
│   │   ├── navigation-menu.tsx
│   │   ├── pagination.tsx
│   │   ├── popover.tsx
│   │   ├── progress.tsx
│   │   ├── radio-group.tsx
│   │   ├── resizable.tsx
│   │   ├── scroll-area.tsx
│   │   ├── select.tsx
│   │   ├── separator.tsx
│   │   ├── sheet.tsx
│   │   ├── sidebar.tsx
│   │   ├── skeleton.tsx
│   │   ├── slider.tsx
│   │   ├── sonner.tsx
│   │   ├── switch.tsx
│   │   ├── table.tsx
│   │   ├── tabs.tsx
│   │   ├── textarea.tsx
│   │   ├── toast.tsx
│   │   ├── toaster.tsx
│   │   ├── toggle-group.tsx
│   │   ├── toggle.tsx
│   │   ├── tooltip.tsx
│   │   ├── use-mobile.tsx
│   │   ├── use-toast.ts
│   │   ├── logo.tsx
│   │   └── resizable-navbar.tsx
│   ├── theme-toggle.tsx
│   ├── marketplace
│   │   ├── marketplace-header.tsx
│   │   ├── marketplace-filters.tsx
│   │   ├── marketplace-featured.tsx
│   │   ├── marketplace-grid.tsx
│   │   ├── marketplace-loading.tsx
│   │   ├── card-detail-3d.tsx
│   │   ├── price-history-chart.tsx
│   │   ├── card-carousel.tsx
│   │   └── card-listing-page.tsx
│   ├── profile
│   │   ├── profile-collection.tsx
│   │   ├── profile-favorites.tsx
│   │   ├── profile-about.tsx
│   │   ├── profile-settings.tsx
│   │   ├── profile-activity.tsx
│   │   └── profile-page.tsx
│   ├── main-nav.tsx
│   └── store
│       ├── contract.ts
│       ├── config.ts
│       └── constant.ts
├── components.json
├── hooks
│   ├── use-mobile.tsx
│   └── use-toast.ts
├── lib
│   ├── utils.ts
│   └── provider.tsx
├── next.config.mjs
├── package.json
├── postcss.config.mjs
├── public
│   ├── placeholder-logo.png
│   ├── placeholder-logo.svg
│   ├── placeholder-user.jpg
│   ├── placeholder.jpg
│   ├── placeholder.svg
│   ├── fiery-dragon-card.png
│   ├── electric-mouse-art.png
│   ├── swirling-sea-guardian.png
│   ├── pokemon-card-back.png
│   ├── holographic-fire-dragon.png
│   ├── fiery-dragon-closeup.png
│   ├── mystical-forest-spirit.png
│   ├── blastoise-pokemon-card.png
│   ├── venusaur-pokemon-card.png
│   ├── electric-mouse-card.png
│   ├── alakazam-psychic-power.png
│   ├── psychic-pokemon-card.png
│   ├── fiery-dragon.png
│   ├── blastoise-hydro-pump.png
│   ├── venusaur-jungle-power.png
│   ├── pikachu-rookie-card.png
│   ├── charizard-holo-card.png
│   ├── mewtwo-limited-card.png
│   ├── mew-ancient-card.png
│   └── venusaur-rare-card.png
├── styles
│   └── globals.css
├── tailwind.config.ts
├── tsconfig.json
├── foundry
│   ├── Makefile
│   ├── contracts
│   │   ├── SE2NFT.sol
│   │   └── TradingCardMarketplace.sol
│   ├── deployments
│   ├── foundry.toml
│   ├── lib
│   │   ├── forge-std
│   │   ├── openzeppelin-contracts
│   │   └── solidity-bytes-utils
│   ├── package.json
│   ├── remappings.txt
│   ├── script
│   │   ├── Deploy.s.sol
│   │   ├── DeployHelpers.s.sol
│   │   ├── DeploySE2Nft.s.sol
│   │   └── VerifyAll.s.sol
│   ├── scripts-js
│   │   ├── checkAccountBalance.js
│   │   ├── generateKeystore.js
│   │   ├── generateTsAbis.js
│   │   ├── importAccount.js
│   │   ├── listKeystores.js
│   │   ├── parseArgs.js
│   │   └── selectOrCreateKeystore.js
│   ├── test
│   └── node_modules
│       └── dotenv
│           ├── LICENSE
│           ├── config.js
│           ├── package.json
│           ├── CHANGELOG.md
│           ├── README-es.md
│           ├── README.md
│           ├── config.d.ts
│           └── lib
│               ├── cli-options.js
│               ├── env-options.js
│               ├── main.js
│               └── main.d.ts
└── bun.lockb

```

`/home/sam/hack-pro/Vynix-v0/app/globals.css`:

```css
@tailwind base;
@tailwind components;
@tailwind utilities;

@keyframes float {
  0% {
    transform: translateY(0px);
  }
  50% {
    transform: translateY(-20px);
  }
  100% {
    transform: translateY(0px);
  }
}

@keyframes float-delayed {
  0% {
    transform: translateY(-10px);
  }
  50% {
    transform: translateY(10px);
  }
  100% {
    transform: translateY(-10px);
  }
}

.animate-float {
  animation: float 6s ease-in-out infinite;
}

.animate-float-delayed {
  animation: float-delayed 7s ease-in-out infinite;
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 252 95% 70%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 252 95% 70%;
    --radius: 1rem;
  }

  .dark {
    --background: 0 0% 7%;
    --foreground: 0 0% 95%;
    --card: 0 0% 9%;
    --card-foreground: 0 0% 95%;
    --popover: 0 0% 9%;
    --popover-foreground: 0 0% 95%;
    --primary: 252 95% 70%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 12%;
    --secondary-foreground: 0 0% 95%;
    --muted: 0 0% 15%;
    --muted-foreground: 0 0% 70%;
    --accent: 0 0% 12%;
    --accent-foreground: 0 0% 95%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 95%;
    --border: 0 0% 15%;
    --input: 0 0% 15%;
    --ring: 252 95% 70%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

```

`/home/sam/hack-pro/Vynix-v0/app/loading.tsx`:

```tsx
export default function Loading() {
  return null
}

```

`/home/sam/hack-pro/Vynix-v0/app/marketplace/page.tsx`:

```tsx
import { Suspense } from "react"
import { MarketplaceHeader } from "@/components/marketplace/marketplace-header"
import { MarketplaceFilters } from "@/components/marketplace/marketplace-filters"
import { MarketplaceGrid } from "@/components/marketplace/marketplace-grid"
import { MarketplaceFeatured } from "@/components/marketplace/marketplace-featured"
import { MarketplaceLoading } from "@/components/marketplace/marketplace-loading"

export default function MarketplacePage() {
  return (
    <main className="min-h-screen pt-32 pb-20">
      <MarketplaceHeader />
      <div className="max-w-7xl mx-auto px-4">
        <Suspense fallback={<MarketplaceLoading />}>
          <MarketplaceFeatured />
          <MarketplaceFilters />
          <MarketplaceGrid />
        </Suspense>
      </div>
    </main>
  )
}

```

`/home/sam/hack-pro/Vynix-v0/app/marketplace/marketplace.css`:

```css
/* Card effects */
.holographic-effect {
  position: relative;
  overflow: hidden;
}

.holographic-effect::before {
  content: "";
  position: absolute;
  inset: 0;
  background: linear-gradient(
    125deg,
    rgba(255, 0, 0, 0.05) 0%,
    rgba(255, 255, 0, 0.05) 14%,
    rgba(0, 255, 0, 0.05) 28%,
    rgba(0, 255, 255, 0.05) 42%,
    rgba(0, 0, 255, 0.05) 56%,
    rgba(255, 0, 255, 0.05) 70%,
    rgba(255, 0, 0, 0.05) 84%,
    rgba(255, 255, 0, 0.05) 100%
  );
  opacity: 0;
  transition: opacity 0.3s ease;
  pointer-events: none;
  z-index: 1;
}

.holographic-effect:hover::before {
  opacity: 1;
  animation: holographic 3s linear infinite;
}

@keyframes holographic {
  0% {
    background-position: 0% 0%;
  }
  100% {
    background-position: 100% 100%;
  }
}

.full-art-effect {
  position: relative;
  overflow: hidden;
}

.full-art-effect::before {
  content: "";
  position: absolute;
  inset: 0;
  background: linear-gradient(
    45deg,
    rgba(255, 255, 255, 0) 0%,
    rgba(255, 255, 255, 0.1) 50%,
    rgba(255, 255, 255, 0) 100%
  );
  opacity: 0;
  transition: opacity 0.3s ease;
  pointer-events: none;
  z-index: 1;
}

.full-art-effect:hover::before {
  opacity: 1;
  animation: fullArt 2s ease infinite;
}

@keyframes fullArt {
  0% {
    transform: translateX(-100%) translateY(-100%);
  }
  50% {
    transform: translateX(100%) translateY(100%);
  }
  100% {
    transform: translateX(-100%) translateY(-100%);
  }
}

.gold-effect {
  position: relative;
  overflow: hidden;
}

.gold-effect::before {
  content: "";
  position: absolute;
  inset: 0;
  background: linear-gradient(45deg, rgba(255, 215, 0, 0) 0%, rgba(255, 215, 0, 0.1) 50%, rgba(255, 215, 0, 0) 100%);
  opacity: 0;
  transition: opacity 0.3s ease;
  pointer-events: none;
  z-index: 1;
}

.gold-effect:hover::before {
  opacity: 1;
  animation: goldShine 2s ease infinite;
}

@keyframes goldShine {
  0% {
    transform: translateX(-100%) translateY(-100%) rotate(45deg);
  }
  50% {
    transform: translateX(100%) translateY(100%) rotate(45deg);
  }
  100% {
    transform: translateX(-100%) translateY(-100%) rotate(45deg);
  }
}

.reverse-holo-effect {
  position: relative;
  overflow: hidden;
}

.reverse-holo-effect::before {
  content: "";
  position: absolute;
  inset: 0;
  background: repeating-linear-gradient(
    45deg,
    rgba(255, 255, 255, 0) 0%,
    rgba(255, 255, 255, 0.1) 10%,
    rgba(255, 255, 255, 0) 20%
  );
  opacity: 0;
  transition: opacity 0.3s ease;
  pointer-events: none;
  z-index: 1;
}

.reverse-holo-effect:hover::before {
  opacity: 1;
  animation: reverseHolo 3s linear infinite;
}

@keyframes reverseHolo {
  0% {
    background-position: 0% 0%;
  }
  100% {
    background-position: 100% 100%;
  }
}

/* 3D Card Effect */
.perspective-card {
  perspective: 1000px;
  transform-style: preserve-3d;
  transition: transform 0.3s ease;
}

.transform-card:hover {
  transform: translateY(-8px);
}

/* Hide scrollbar but allow scrolling */
.hide-scrollbar {
  -ms-overflow-style: none; /* IE and Edge */
  scrollbar-width: none; /* Firefox */
}

.hide-scrollbar::-webkit-scrollbar {
  display: none; /* Chrome, Safari, Opera */
}

```

`/home/sam/hack-pro/Vynix-v0/app/marketplace/layout.tsx`:

```tsx
import type React from "react"
import "../globals.css"
import "./marketplace.css"

export default function MarketplaceLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return <>{children}</>
}

```

`/home/sam/hack-pro/Vynix-v0/app/marketplace/card/[id]/page.tsx`:

```tsx
"use client"

import { useState, useEffect } from "react"
import { useParams, useRouter } from "next/navigation"
import Image from "next/image"
import { motion } from "framer-motion"
import { ArrowLeft, Heart, Share2, ShoppingCart, Eye, Shield, Clock, Users, Star, MessageCircle } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Card } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { CardDetail3D } from "@/components/marketplace/card-detail-3d"
import { PriceHistoryChart } from "@/components/marketplace/price-history-chart"
import { CardCarousel } from "@/components/marketplace/card-carousel"

export default function CardDetailPage() {
  const router = useRouter()
  const params = useParams<{ id: string }>()
  const [card, setCard] = useState<any>(null)
  const [isLiked, setIsLiked] = useState(false)
  const [loading, setLoading] = useState(true)
  const [showFullDescription, setShowFullDescription] = useState(false)
  const [activeImage, setActiveImage] = useState(0)
  const [isZoomed, setIsZoomed] = useState(false)

  // Mock data - in a real app you'd fetch this based on params.id
  useEffect(() => {
    // Simulating API fetch
    setTimeout(() => {
      setCard({
        id: params.id,
        name: "Charizard",
        subtitle: "Holo 1st Edition",
        set: "Base Set",
        number: "4/102",
        type: "Fire",
        rarity: "Holo Rare",
        condition: "PSA 9",
        images: [
          "/fiery-dragon-card.png",
          "/pokemon-card-back.png",
          "/holographic-fire-dragon.png",
          "/fiery-dragon-closeup.png",
        ],
        cardType: "holographic",
        price: 12500,
        auction: true,
        timeLeft: "2d 5h",
        bids: 24,
        views: 542,
        watchlist: 128,
        authenticator: "PSA",
        seller: {
          name: "PremiumCards",
          rating: 4.9,
          sales: 1024,
          image: "/mystical-forest-spirit.png",
          verified: true,
        },
        description:
          "The iconic Charizard from the original Pokémon Base Set, featuring stunning holographic artwork. This first edition card is in near-mint condition with minimal edge wear and has been professionally graded by PSA as a 9. Charizard is one of the most sought-after Pokémon cards due to its popularity and historical significance in the trading card game community. The holographic foil is in excellent condition with no scratches or clouding.",
        stats: [
          { name: "HP", value: "120" },
          { name: "Stage", value: "2" },
          { name: "Attack 1", value: "Fire Spin" },
          { name: "Damage", value: "100" },
          { name: "Weakness", value: "Water" },
          { name: "Resistance", value: "Fighting" },
          { name: "Retreat Cost", value: "3" },
        ],
        priceHistory: [
          { date: "2022-05", price: 9800 },
          { date: "2022-06", price: 10200 },
          { date: "2022-07", price: 10500 },
          { date: "2022-08", price: 11000 },
          { date: "2022-09", price: 10800 },
          { date: "2022-10", price: 11200 },
          { date: "2022-11", price: 11500 },
          { date: "2022-12", price: 12000 },
          { date: "2023-01", price: 11800 },
          { date: "2023-02", price: 12200 },
          { date: "2023-03", price: 12500 },
        ],
        relatedCards: [
          {
            id: "2",
            name: "Blastoise",
            set: "Base Set",
            image: "/blastoise-pokemon-card.png",
            rarity: "Holo Rare",
            condition: "PSA 8",
            price: 4500,
            cardType: "holographic",
          },
          {
            id: "3",
            name: "Venusaur",
            set: "Base Set",
            image: "/venusaur-pokemon-card.png",
            rarity: "Holo Rare",
            condition: "PSA 9",
            price: 3800,
            cardType: "holographic",
          },
          {
            id: "4",
            name: "Pikachu",
            set: "Base Set",
            image: "/electric-mouse-card.png",
            rarity: "Rare",
            condition: "PSA 10",
            price: 1200,
            cardType: "normal",
          },
          {
            id: "5",
            name: "Alakazam",
            set: "Base Set",
            image: "/alakazam-psychic-power.png",
            rarity: "Holo Rare",
            condition: "PSA 8",
            price: 1800,
            cardType: "holographic",
          },
          {
            id: "6",
            name: "Mewtwo",
            set: "Base Set",
            image: "/psychic-pokemon-card.png",
            rarity: "Holo Rare",
            condition: "PSA 9",
            price: 2500,
            cardType: "holographic",
          },
        ],
      })
      setLoading(false)
    }, 1000)
  }, [params.id])

  if (loading) {
    return (
      <main className="min-h-screen pt-32 pb-20 bg-[#0A0A0A]">
        <div className="max-w-7xl mx-auto px-4">
          <div className="animate-pulse grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            <div className="lg:col-span-1">
              <div className="bg-[#131525]/60 backdrop-blur-md rounded-3xl h-[500px] mb-4 border border-[#352F7E]/20"></div>
            </div>
            <div className="lg:col-span-2">
              <div className="h-10 bg-[#131525]/60 rounded mb-4 w-3/4"></div>
              <div className="h-6 bg-[#131525]/60 rounded mb-6 w-1/2"></div>
              <div className="h-24 bg-[#131525]/60 rounded mb-6"></div>
              <div className="h-12 bg-[#131525]/60 rounded mb-6 w-1/3"></div>
              <div className="h-10 bg-[#131525]/60 rounded mb-4"></div>
              <div className="h-10 bg-[#131525]/60 rounded mb-4"></div>
            </div>
          </div>
        </div>
      </main>
    )
  }

  if (!card) {
    return (
      <main className="min-h-screen pt-32 pb-20 bg-[#0A0A0A]">
        <div className="max-w-7xl mx-auto px-4 text-center">
          <h1 className="text-2xl font-bold mb-4 text-white">Card not found</h1>
          <Button onClick={() => router.push("/marketplace")} className="rounded-full">
            Return to Marketplace
          </Button>
        </div>
      </main>
    )
  }

  const toggleLike = () => {
    setIsLiked(!isLiked)
  }

  return (
    <main className="min-h-screen pt-32 pb-20 bg-[#0A0A0A] relative overflow-hidden">
      {/* Animated background elements */}
      <div className="absolute top-0 left-0 w-full h-full -z-10">
        <div className="absolute top-1/4 left-1/4 w-[500px] h-[500px] rounded-full bg-[#6C63FF]/5 blur-[100px] animate-float"></div>
        <div className="absolute bottom-1/4 right-1/4 w-[600px] h-[600px] rounded-full bg-[#FF6B6B]/5 blur-[120px] animate-float-delayed"></div>
      </div>

      {/* Page Content */}
      <div className="max-w-7xl mx-auto px-4">
        {/* Breadcrumb & Back Button */}
        <div className="mb-6">
          <Button
            variant="ghost"
            className="rounded-full hover:bg-white/10 text-white"
            onClick={() => router.push("/marketplace")}
          >
            <ArrowLeft className="h-5 w-5 mr-2" />
            Back to Marketplace
          </Button>
        </div>

        {/* Main Content */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {/* Card Image & Gallery */}
          <div className="lg:col-span-1">
            <motion.div
              className="bg-[#131525]/60 backdrop-blur-md rounded-3xl p-6 shadow-lg shadow-[#352F7E]/10 mb-4 border border-[#352F7E]/20"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
            >
              {/* 3D Card Display */}
              <CardDetail3D
                image={card.images[activeImage]}
                type={card.cardType}
                isZoomed={isZoomed}
                setIsZoomed={setIsZoomed}
              />

              {/* Thumbnail gallery */}
              <div className="flex justify-center mt-6 gap-3">
                {card.images.map((img: string, idx: number) => (
                  <button
                    key={idx}
                    className={`relative w-16 h-20 rounded-lg overflow-hidden border-2 transition-all ${
                      activeImage === idx
                        ? "border-[#6C63FF] shadow-[0_0_10px_rgba(108,99,255,0.3)]"
                        : "border-[#352F7E]/30 hover:border-[#6C63FF]/50"
                    }`}
                    onClick={() => setActiveImage(idx)}
                  >
                    <Image
                      src={img || "/placeholder.svg"}
                      alt={`${card.name} view ${idx + 1}`}
                      fill
                      className="object-cover"
                    />
                  </button>
                ))}
              </div>

              {/* View controls */}
              <div className="flex justify-center mt-4">
                <Button
                  variant="outline"
                  size="sm"
                  className="rounded-full text-xs mr-2 border-[#352F7E]/50 text-white hover:bg-[#352F7E]/20"
                  onClick={() => setIsZoomed(!isZoomed)}
                >
                  <Eye className="h-3 w-3 mr-1" />
                  {isZoomed ? "Standard View" : "Zoom View"}
                </Button>
              </div>
            </motion.div>

            {/* Authentication Info */}
            <motion.div
              className="bg-[#131525]/60 backdrop-blur-md rounded-3xl p-6 shadow-lg shadow-[#352F7E]/10 border border-[#352F7E]/20"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: 0.1 }}
            >
              <div className="flex items-center mb-4">
                <Shield className="h-5 w-5 text-[#5DDFB8] mr-2" />
                <h3 className="font-bold text-lg text-white">Authentication</h3>
              </div>
              <div className="flex items-center justify-between mb-3">
                <div className="text-sm text-[#B6B8CF]">Graded By</div>
                <div className="font-medium text-white">{card.authenticator}</div>
              </div>
              <div className="flex items-center justify-between mb-3">
                <div className="text-sm text-[#B6B8CF]">Condition</div>
                <div className="font-medium text-white">{card.condition}</div>
              </div>
              <div className="flex items-center justify-between mb-3">
                <div className="text-sm text-[#B6B8CF]">Certificate</div>
                <a href="#" className="font-medium text-[#8075FF] hover:underline">
                  View Certificate
                </a>
              </div>

              <div className="bg-[#0C0E1B]/80 backdrop-blur-md rounded-2xl p-4 mt-4 border border-[#352F7E]/20">
                <div className="flex items-center">
                  <div className="relative h-10 w-10 rounded-full overflow-hidden mr-3">
                    <Image
                      src={card.seller.image || "/placeholder.svg"}
                      alt={card.seller.name}
                      fill
                      className="object-cover"
                    />
                    {card.seller.verified && (
                      <div className="absolute bottom-0 right-0 bg-[#5DDFB8] rounded-full p-1">
                        <svg width="6" height="6" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path
                            d="M9 12L11 14L15 10M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z"
                            stroke="white"
                            strokeWidth="2"
                            strokeLinecap="round"
                            strokeLinejoin="round"
                          />
                        </svg>
                      </div>
                    )}
                  </div>
                  <div>
                    <div className="font-medium text-white">{card.seller.name}</div>
                    <div className="flex items-center text-sm">
                      <Star className="h-3 w-3 text-[#FFE066] mr-1" />
                      <span className="text-[#B6B8CF]">
                        {card.seller.rating} · {card.seller.sales} sales
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </motion.div>
          </div>

          {/* Card Details & Purchase Options */}
          <div className="lg:col-span-2">
            <motion.div
              className="bg-[#131525]/60 backdrop-blur-md rounded-3xl p-6 shadow-lg shadow-[#352F7E]/10 mb-6 border border-[#352F7E]/20"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: 0.2 }}
            >
              {/* Card name and basic info */}
              <div className="flex justify-between items-start mb-1">
                <div>
                  <h1 className="text-3xl font-bold text-white">{card.name}</h1>
                  <h2 className="text-lg text-[#B6B8CF]">{card.subtitle}</h2>
                </div>
                <div className="flex space-x-2">
                  <Button
                    variant="ghost"
                    size="icon"
                    className="rounded-full text-white hover:bg-white/10"
                    onClick={toggleLike}
                  >
                    <Heart
                      className={`h-5 w-5 transition-all ${
                        isLiked ? "fill-[#FF6B6B] text-[#FF6B6B]" : "text-[#B6B8CF]/70"
                      }`}
                    />
                  </Button>
                  <Button variant="ghost" size="icon" className="rounded-full text-white hover:bg-white/10">
                    <Share2 className="h-5 w-5 text-[#B6B8CF]/70" />
                  </Button>
                </div>
              </div>

              {/* Card meta information */}
              <div className="flex flex-wrap gap-3 mb-6">
                <Badge
                  variant="secondary"
                  className="rounded-full bg-[#322F5D] text-[#8075FF] border border-[#8075FF]/30"
                >
                  {card.set}
                </Badge>
                <Badge
                  variant="secondary"
                  className="rounded-full bg-[#FFE066]/10 text-[#FFE066] border border-[#FFE066]/30"
                >
                  {card.rarity}
                </Badge>
                <Badge
                  variant="secondary"
                  className="rounded-full bg-[#FF7E7E]/10 text-[#FF7E7E] border border-[#FF7E7E]/30"
                >
                  {card.type}
                </Badge>
                <Badge
                  variant="secondary"
                  className="rounded-full bg-[#5DDFB8]/10 text-[#5DDFB8] border border-[#5DDFB8]/30"
                >
                  {card.condition}
                </Badge>
              </div>

              {/* Card description */}
              <div className="mb-6">
                <h3 className="font-bold text-lg mb-2 text-white">Description</h3>
                <p className="text-[#B6B8CF]">
                  {showFullDescription ? card.description : `${card.description.substring(0, 150)}...`}
                </p>
                <button
                  className="text-[#8075FF] text-sm mt-1 hover:underline"
                  onClick={() => setShowFullDescription(!showFullDescription)}
                >
                  {showFullDescription ? "Read less" : "Read more"}
                </button>
              </div>

              {/* Stats and details */}
              <div className="grid grid-cols-2 md:grid-cols-3 gap-4 mb-6">
                {card.stats.map((stat: any, index: number) => (
                  <div
                    key={index}
                    className="bg-[#0C0E1B]/80 backdrop-blur-md rounded-lg p-2 border border-[#352F7E]/20"
                  >
                    <div className="text-xs text-[#B6B8CF]/70">{stat.name}</div>
                    <div className="font-medium text-white">{stat.value}</div>
                  </div>
                ))}
              </div>

              {/* Interest metrics */}
              <div className="flex flex-wrap gap-4 mb-6 text-sm text-[#B6B8CF]">
                <div className="flex items-center">
                  <Eye className="h-4 w-4 mr-1 text-[#8075FF]" />
                  {card.views} views
                </div>
                <div className="flex items-center">
                  <Heart className="h-4 w-4 mr-1 text-[#8075FF]" />
                  {card.watchlist} watching
                </div>
                {card.auction && (
                  <div className="flex items-center">
                    <Users className="h-4 w-4 mr-1 text-[#8075FF]" />
                    {card.bids} bids
                  </div>
                )}
              </div>

              {/* Price and purchase section */}
              <div className="bg-[#0C0E1B]/80 backdrop-blur-md rounded-2xl p-6 mb-6 border border-[#352F7E]/20 shadow-[0_0_20px_rgba(108,99,255,0.1)]">
                {card.auction ? (
                  <>
                    <div className="flex justify-between items-center mb-4">
                      <div>
                        <div className="text-sm text-[#B6B8CF]">Current Bid</div>
                        <div className="text-3xl font-bold text-white">${card.price.toLocaleString()}</div>
                      </div>
                      <div className="bg-[#322F5D]/70 backdrop-blur-md rounded-full px-4 py-2 flex items-center border border-[#8075FF]/20">
                        <Clock className="h-5 w-5 text-[#8075FF] mr-2" />
                        <span className="font-medium text-[#8075FF]">{card.timeLeft} left</span>
                      </div>
                    </div>

                    <div className="flex gap-3 mb-4">
                      <Button className="flex-1 rounded-full text-white bg-gradient-to-r from-[#8075FF] to-[#6C63FF] hover:from-[#6C63FF] hover:to-[#5D51FF] py-6 text-lg font-medium shadow-[0_0_15px_rgba(108,99,255,0.3)]">
                        Place Bid
                      </Button>
                      <Button
                        variant="outline"
                        className="rounded-full border-[#8075FF] text-[#8075FF] hover:bg-[#322F5D]"
                      >
                        <Heart className="h-5 w-5" />
                      </Button>
                    </div>

                    <div className="flex justify-between text-sm">
                      <div className="text-[#B6B8CF]">
                        Minimum bid increment: <span className="font-medium text-white">$500</span>
                      </div>
                      <div className="text-[#B6B8CF]">
                        Next minimum bid:{" "}
                        <span className="font-medium text-white">${(card.price + 500).toLocaleString()}</span>
                      </div>
                    </div>
                  </>
                ) : (
                  <>
                    <div className="flex justify-between items-center mb-4">
                      <div>
                        <div className="text-sm text-[#B6B8CF]">Buy Now Price</div>
                        <div className="text-3xl font-bold text-white">${card.price.toLocaleString()}</div>
                      </div>
                    </div>

                    <div className="flex gap-3 mb-4">
                      <Button className="flex-1 rounded-full text-white bg-gradient-to-r from-[#8075FF] to-[#6C63FF] hover:from-[#6C63FF] hover:to-[#5D51FF] py-6 text-lg font-medium shadow-[0_0_15px_rgba(108,99,255,0.3)]">
                        <ShoppingCart className="h-5 w-5 mr-2" />
                        Buy Now
                      </Button>
                      <Button
                        variant="outline"
                        className="rounded-full border-[#8075FF] text-[#8075FF] hover:bg-[#322F5D]"
                      >
                        <Heart className="h-5 w-5" />
                      </Button>
                    </div>

                    <div className="flex justify-between text-sm">
                      <div className="text-[#B6B8CF]">Secure payment via Stripe</div>
                      <div className="text-[#B6B8CF]">Free shipping with insurance</div>
                    </div>
                  </>
                )}
              </div>

              {/* Tabs for additional info */}
              <Tabs defaultValue="price-history" className="w-full">
                <TabsList className="grid grid-cols-3 mb-4 bg-[#0C0E1B]/80 backdrop-blur-md rounded-full p-1 border border-[#352F7E]/20">
                  <TabsTrigger
                    value="price-history"
                    className="rounded-full data-[state=active]:bg-[#1A1C36] data-[state=active]:text-white text-[#B6B8CF]"
                  >
                    Price History
                  </TabsTrigger>
                  <TabsTrigger
                    value="offers"
                    className="rounded-full data-[state=active]:bg-[#1A1C36] data-[state=active]:text-white text-[#B6B8CF]"
                  >
                    Offers
                  </TabsTrigger>
                  <TabsTrigger
                    value="provenance"
                    className="rounded-full data-[state=active]:bg-[#1A1C36] data-[state=active]:text-white text-[#B6B8CF]"
                  >
                    Provenance
                  </TabsTrigger>
                </TabsList>

                <TabsContent value="price-history" className="border-0 p-0">
                  <Card className="border-0 bg-[#131525]/60 backdrop-blur-md shadow-lg shadow-[#352F7E]/10 border border-[#352F7E]/20">
                    <div className="p-4">
                      <div className="flex items-center justify-between mb-4">
                        <h3 className="font-medium text-white">Average Sale Price</h3>
                        <div className="bg-[#322F5D]/70 backdrop-blur-md rounded-full px-3 py-1 text-sm border border-[#8075FF]/20">
                          <span className="text-[#8075FF]">Last 12 months</span>
                        </div>
                      </div>
                      <PriceHistoryChart data={card.priceHistory} />
                    </div>
                  </Card>
                </TabsContent>

                <TabsContent value="offers" className="border-0 p-0">
                  <Card className="border-0 bg-[#131525]/60 backdrop-blur-md shadow-lg shadow-[#352F7E]/10 border border-[#352F7E]/20">
                    <div className="p-4 text-center">
                      <div className="py-8">
                        <MessageCircle className="h-12 w-12 text-[#8075FF]/20 mx-auto mb-4" />
                        <h3 className="font-medium text-white mb-2">No offers yet</h3>
                        <p className="text-[#B6B8CF] text-sm">Be the first to make an offer on this card</p>
                        <Button className="rounded-full mt-4 bg-gradient-to-r from-[#8075FF] to-[#6C63FF] hover:from-[#6C63FF] hover:to-[#5D51FF]">
                          Make an Offer
                        </Button>
                      </div>
                    </div>
                  </Card>
                </TabsContent>

                <TabsContent value="provenance" className="border-0 p-0">
                  <Card className="border-0 bg-[#131525]/60 backdrop-blur-md shadow-lg shadow-[#352F7E]/10 border border-[#352F7E]/20">
                    <div className="p-4">
                      <div className="flex items-center mb-4">
                        <Shield className="h-5 w-5 text-[#5DDFB8] mr-2" />
                        <h3 className="font-medium text-white">Card Provenance</h3>
                      </div>

                      <div className="relative pl-8 before:absolute before:left-4 before:top-2 before:bottom-8 before:w-0.5 before:bg-[#322F5D]">
                        <div className="mb-6 relative">
                          <div className="absolute left-[-29px] top-0 w-4 h-4 rounded-full bg-[#8075FF] shadow-[0_0_10px_rgba(108,99,255,0.5)]"></div>
                          <div className="text-sm">
                            <div className="font-medium text-white">Card graded by PSA</div>
                            <div className="text-[#B6B8CF]">March 15, 2023</div>
                          </div>
                        </div>

                        <div className="mb-6 relative">
                          <div className="absolute left-[-29px] top-0 w-4 h-4 rounded-full bg-[#8075FF] shadow-[0_0_10px_rgba(108,99,255,0.5)]"></div>
                          <div className="text-sm">
                            <div className="font-medium text-white">Acquired by PremiumCards</div>
                            <div className="text-[#B6B8CF]">February 02, 2023</div>
                          </div>
                        </div>

                        <div className="relative">
                          <div className="absolute left-[-29px] top-0 w-4 h-4 rounded-full bg-[#8075FF] shadow-[0_0_10px_rgba(108,99,255,0.5)]"></div>
                          <div className="text-sm">
                            <div className="font-medium text-white">Authenticated by CardVault</div>
                            <div className="text-[#B6B8CF]">January 10, 2023</div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </Card>
                </TabsContent>
              </Tabs>
            </motion.div>

            {/* Related Cards */}
            <motion.div
              className="bg-[#131525]/60 backdrop-blur-md rounded-3xl p-6 shadow-lg shadow-[#352F7E]/10 border border-[#352F7E]/20"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: 0.3 }}
            >
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-xl font-bold text-white">Similar Cards</h3>
                <Button
                  variant="outline"
                  size="sm"
                  className="rounded-full border-[#8075FF] text-[#8075FF] hover:bg-[#322F5D]"
                >
                  See All
                </Button>
              </div>

              <CardCarousel cards={card.relatedCards} />
            </motion.div>
          </div>
        </div>
      </div>
    </main>
  )
}

```

`/home/sam/hack-pro/Vynix-v0/app/marketplace/create/page.tsx`:

```tsx
import { CardListingPage } from "@/components/marketplace/card-listing-page"
import { MainNav } from "@/components/main-nav"

export default function CreatePage() {
  return (
    <>
      <MainNav />
      <CardListingPage />
    </>
  )
}

```

`/home/sam/hack-pro/Vynix-v0/app/profile/page.tsx`:

```tsx
import { ProfilePage } from "@/components/profile/profile-page"
import { MainNav } from "@/components/main-nav"

export default function Profile() {
  return (
    <>
      <MainNav />
      <ProfilePage />
    </>
  )
}

```

`/home/sam/hack-pro/Vynix-v0/app/page.tsx`:

```tsx
import Image from "next/image"
import Link from "next/link"
import {
  ArrowRight,
  Clock,
  Star,
  TrendingUp,
  Users,
  BarChart3,
  ArrowUpRight,
  Heart,
  Shield,
  CheckCircle,
  Wallet,
} from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Checkbox } from "@/components/ui/checkbox"
import { MainNav } from "@/components/main-nav"

export default function Home() {
  return (
    <main className="min-h-screen">
      {/* Resizable Navigation */}
      <MainNav />

      {/* Hero Section */}
      <section className="pt-32 pb-20 px-4 relative overflow-hidden">
        <div className="absolute inset-0 bg-gradient-to-br from-[#6C63FF]/10 to-[#5D51FF]/20 dark:from-[#1A1A1A] dark:to-[#121212] -z-10"></div>

        {/* Animated background shapes */}
        <div className="absolute top-1/4 left-1/4 w-64 h-64 rounded-full bg-[#E4E1FF] dark:bg-[#2A2A2A] blur-3xl opacity-30 animate-float -z-10"></div>
        <div className="absolute bottom-1/4 right-1/3 w-80 h-80 rounded-full bg-[#6C63FF] dark:bg-[#1A1A1A] blur-3xl opacity-20 animate-float-delayed -z-10"></div>

        <div className="max-w-7xl mx-auto">
          <div className="text-center mb-12">
            <h1 className="text-5xl md:text-6xl font-bold mb-6 bg-gradient-to-r from-[#6C63FF] to-[#5D51FF] dark:from-[#8075FF] dark:to-[#6C63FF] text-transparent bg-clip-text leading-tight">
              Collect the Extraordinary
            </h1>
            <p className="text-xl text-[#121F3D]/80 dark:text-[#B6B8CF] max-w-2xl mx-auto mb-8">
              Physical cards with digital ownership. Authenticated, vaulted, and tokenized on the blockchain.
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Button className="rounded-full text-white bg-gradient-to-r from-[#6C63FF] to-[#5D51FF] dark:from-[#8075FF] dark:to-[#6C63FF] hover:from-[#5D51FF] hover:to-[#6C63FF] dark:hover:from-[#6C63FF] dark:hover:to-[#8075FF] px-8 py-6 text-lg font-medium group">
                Explore Marketplace
                <ArrowRight className="ml-2 h-5 w-5 group-hover:translate-x-1 transition-transform" />
              </Button>
              <Button
                variant="outline"
                className="rounded-full border-[#6C63FF] dark:border-[#8075FF] text-[#6C63FF] dark:text-[#8075FF] hover:bg-[#E4E1FF] dark:hover:bg-[#322F5D] px-8 py-6 text-lg font-medium"
              >
                View Drops
              </Button>
            </div>
          </div>

          <div className="relative h-[400px] md:h-[500px] mt-16">
            {/* Floating cards with proper trading card aspect ratio - evenly spaced */}
            <div className="absolute left-[5%] top-[10%] w-[180px] md:w-[220px] h-[250px] md:h-[307px] transform rotate-[-8deg] hover:rotate-[-5deg] hover:translate-y-[-10px] transition-all duration-500 z-20">
              <div className="w-full h-full rounded-xl overflow-hidden shadow-lg dark:shadow-[#8075FF]/20 hover:shadow-xl dark:hover:shadow-[#8075FF]/30 bg-white dark:bg-[#201C4A] p-1">
                <div className="relative w-full h-full rounded-lg overflow-hidden">
                  <Image src="/pikachu-rookie-card.png" alt="Pikachu rookie card" fill className="object-cover" />
                </div>
              </div>
              <div className="absolute -bottom-4 left-1/2 transform -translate-x-1/2 bg-[#4ECCA3] dark:bg-[#5DDFB8] text-white px-3 py-1 rounded-full text-xs font-medium">
                Rookie Card
              </div>
            </div>

            {/* Rare Card - Venusaur */}
            <div className="absolute left-[25%] top-[5%] w-[180px] md:w-[220px] h-[250px] md:h-[307px] transform rotate-[-3deg] hover:rotate-[0deg] hover:translate-y-[-10px] transition-all duration-500 z-25">
              <div className="w-full h-full rounded-xl overflow-hidden shadow-lg dark:shadow-[#9B59B6]/20 hover:shadow-xl dark:hover:shadow-[#9B59B6]/30 bg-white dark:bg-[#201C4A] p-1">
                <div className="relative w-full h-full rounded-lg overflow-hidden">
                  <Image src="/venusaur-rare-card.png" alt="Rare Venusaur card" fill className="object-cover" />
                </div>
              </div>
              <div className="absolute -bottom-4 left-1/2 transform -translate-x-1/2 bg-[#9B59B6] dark:bg-[#9B59B6] text-white px-3 py-1 rounded-full text-xs font-medium">
                Rare
              </div>
            </div>

            {/* Holographic Card - Charizard */}
            <div className="absolute left-[45%] top-[10%] w-[180px] md:w-[220px] h-[250px] md:h-[307px] transform rotate-[5deg] hover:rotate-[8deg] hover:translate-y-[-10px] transition-all duration-500 z-30">
              <div className="w-full h-full rounded-xl overflow-hidden shadow-lg dark:shadow-[#FF7E7E]/20 hover:shadow-xl dark:hover:shadow-[#FF7E7E]/30 bg-white dark:bg-[#201C4A] p-1">
                <div className="relative w-full h-full rounded-lg overflow-hidden">
                  <Image
                    src="/charizard-holo-card.png"
                    alt="Holographic Charizard card"
                    fill
                    className="object-cover"
                  />
                </div>
              </div>
              <div className="absolute -bottom-4 left-1/2 transform -translate-x-1/2 bg-[#FFD166] dark:bg-[#FFE066] text-[#121F3D] px-3 py-1 rounded-full text-xs font-medium">
                Holographic
              </div>
            </div>

            {/* Limited Edition Card - Mewtwo */}
            <div className="absolute left-[65%] top-[5%] w-[180px] md:w-[220px] h-[250px] md:h-[307px] transform rotate-[-6deg] hover:rotate-[-3deg] hover:translate-y-[-10px] transition-all duration-500 z-10">
              <div className="w-full h-full rounded-xl overflow-hidden shadow-lg dark:shadow-[#8075FF]/20 hover:shadow-xl dark:hover:shadow-[#8075FF]/30 bg-white dark:bg-[#201C4A] p-1">
                <div className="relative w-full h-full rounded-lg overflow-hidden">
                  <Image
                    src="/mewtwo-limited-card.png"
                    alt="Limited edition Mewtwo card"
                    fill
                    className="object-cover"
                  />
                </div>
              </div>
              <div className="absolute -bottom-4 left-1/2 transform -translate-x-1/2 bg-[#FF6B6B] dark:bg-[#FF7E7E] text-white px-3 py-1 rounded-full text-xs font-medium">
                Limited Edition
              </div>
            </div>

            {/* Ancient Card - Mew */}
            <div className="absolute left-[85%] top-[10%] w-[180px] md:w-[220px] h-[250px] md:h-[307px] transform rotate-[8deg] hover:rotate-[5deg] hover:translate-y-[-10px] transition-all duration-500 z-5">
              <div className="w-full h-full rounded-xl overflow-hidden shadow-lg dark:shadow-[#8075FF]/20 hover:shadow-xl dark:hover:shadow-[#8075FF]/30 bg-white dark:bg-[#201C4A] p-1">
                <div className="relative w-full h-full rounded-lg overflow-hidden">
                  <Image src="/mew-ancient-card.png" alt="Ancient Mew card" fill className="object-cover" />
                </div>
              </div>
              <div className="absolute -bottom-4 left-1/2 transform -translate-x-1/2 bg-[#6C63FF] dark:bg-[#8075FF] text-white px-3 py-1 rounded-full text-xs font-medium">
                Ancient
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Featured Collections */}
      <section className="py-20 px-4 bg-white dark:bg-[#121212]">
        <div className="max-w-7xl mx-auto">
          <div className="flex justify-between items-center mb-12">
            <h2 className="text-3xl md:text-4xl font-bold text-[#121F3D] dark:text-[#E8E6FF] tracking-tight">
              Featured Collections
            </h2>
            <Button
              variant="outline"
              className="rounded-full border-[#6C63FF] dark:border-[#8075FF] text-[#6C63FF] dark:text-[#8075FF] hover:bg-[#E4E1FF] dark:hover:bg-[#322F5D]"
            >
              View All <ArrowRight className="ml-2 h-4 w-4" />
            </Button>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {collections.map((collection, index) => (
              <div
                key={index}
                className="rounded-3xl bg-white dark:bg-[#1A1C36] p-1 shadow-lg dark:shadow-[#352F7E]/20 hover:shadow-xl dark:hover:shadow-[#352F7E]/30 transition-all duration-300 hover:translate-y-[-8px] border border-transparent dark:border-[#352F7E]/20"
              >
                <div className="p-5">
                  <h3 className="font-bold text-xl mb-2 text-[#121F3D] dark:text-[#E8E6FF]">{collection.name}</h3>
                  <p className="text-[#121F3D]/70 dark:text-[#B6B8CF] text-sm mb-4">{collection.description}</p>

                  {/* Card display area with proper aspect ratio */}
                  <div className="relative h-[140px] mb-6 overflow-hidden">
                    <div className="absolute left-[5%] top-[10%] w-[120px] h-[84px] transform rotate-[-8deg] hover:rotate-[-5deg] transition-all duration-300 z-10">
                      <div className="w-full h-full rounded-lg overflow-hidden shadow-md bg-white dark:bg-[#201C4A]">
                        <div className="relative w-full h-full">
                          <Image
                            src={collection.cardImages[0] || "/placeholder.svg?height=84&width=120"}
                            alt="Card"
                            fill
                            className="object-cover"
                          />
                        </div>
                      </div>
                    </div>

                    <div className="absolute left-[30%] top-[5%] w-[120px] h-[84px] transform rotate-[3deg] hover:rotate-[6deg] transition-all duration-300 z-20">
                      <div className="w-full h-full rounded-lg overflow-hidden shadow-md bg-white dark:bg-[#201C4A]">
                        <div className="relative w-full h-full">
                          <Image
                            src={collection.cardImages[1] || "/placeholder.svg?height=84&width=120"}
                            alt="Card"
                            fill
                            className="object-cover"
                          />
                        </div>
                      </div>
                    </div>

                    <div className="absolute right-[5%] top-[15%] w-[120px] h-[84px] transform rotate-[10deg] hover:rotate-[7deg] transition-all duration-300 z-10">
                      <div className="w-full h-full rounded-lg overflow-hidden shadow-md bg-white dark:bg-[#201C4A]">
                        <div className="relative w-full h-full">
                          <Image
                            src={collection.cardImages[2] || "/placeholder.svg?height=84&width=120"}
                            alt="Card"
                            fill
                            className="object-cover"
                          />
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className="flex justify-between items-center">
                    <div className="flex items-center">
                      <div className="h-8 w-8 rounded-full bg-[#E4E1FF] dark:bg-[#322F5D] flex items-center justify-center mr-2">
                        <span className="text-xs font-medium text-[#6C63FF] dark:text-[#8075FF]">
                          {collection.items}
                        </span>
                      </div>
                      <span className="text-sm text-[#121F3D]/70 dark:text-[#B6B8CF]">Cards</span>
                    </div>
                    <div className="flex items-center">
                      <div className="h-8 w-8 rounded-full bg-[#E4E1FF] dark:bg-[#322F5D] flex items-center justify-center mr-2">
                        <span className="text-xs font-medium text-[#6C63FF] dark:text-[#8075FF]">
                          {collection.floor}
                        </span>
                      </div>
                      <span className="text-sm text-[#121F3D]/70 dark:text-[#B6B8CF]">Floor</span>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Latest Drops */}
      <section className="py-20 px-4 bg-gradient-to-br from-[#F8F9FF] to-[#E4E1FF]/50 dark:from-[#121212] dark:to-[#1A1A1A]">
        <div className="max-w-7xl mx-auto">
          <div className="flex justify-between items-center mb-12">
            <h2 className="text-3xl md:text-4xl font-bold text-[#121F3D] dark:text-[#E8E6FF] tracking-tight">
              Latest Drops
            </h2>
            <Button
              variant="outline"
              className="rounded-full border-[#6C63FF] dark:border-[#8075FF] text-[#6C63FF] dark:text-[#8075FF] hover:bg-[#E4E1FF] dark:hover:bg-[#322F5D]"
            >
              View All <ArrowRight className="ml-2 h-4 w-4" />
            </Button>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {drops.map((drop, index) => (
              <Card
                key={index}
                className="rounded-3xl overflow-hidden hover:scale-[1.03] transition-all duration-300 shadow-md dark:shadow-[#352F7E]/20 hover:shadow-lg dark:hover:shadow-[#352F7E]/30 bg-white dark:bg-[#1A1C36] border-0 dark:border dark:border-[#352F7E]/20"
              >
                {/* Card display with proper aspect ratio */}
                <div className="relative h-[140px] w-full overflow-hidden bg-[#F8F9FF] dark:bg-[#0C0E1B]">
                  <div className="absolute left-1/2 top-1/2 transform -translate-x-1/2 -translate-y-1/2 w-[180px] h-[126px] hover:scale-105 transition-all duration-500">
                    <div className="w-full h-full rounded-lg overflow-hidden shadow-md dark:shadow-[#352F7E]/30 bg-white dark:bg-[#201C4A]">
                      <div className="relative w-full h-full">
                        <Image
                          src={drop.image || "/placeholder.svg?height=126&width=180"}
                          alt={drop.name}
                          fill
                          className="object-cover"
                        />
                      </div>
                    </div>
                  </div>

                  {drop.status === "Live" && (
                    <div className="absolute top-3 right-3 bg-[#4ECCA3] dark:bg-[#5DDFB8] text-white px-3 py-1 rounded-full text-xs font-medium flex items-center">
                      <span className="h-2 w-2 bg-white rounded-full mr-1 animate-pulse"></span>
                      Live Now
                    </div>
                  )}
                  {drop.status === "Upcoming" && (
                    <div className="absolute top-3 right-3 bg-[#FFD166] dark:bg-[#FFE066] text-[#121F3D] px-3 py-1 rounded-full text-xs font-medium">
                      Upcoming
                    </div>
                  )}
                  {drop.status === "Sold Out" && (
                    <div className="absolute top-3 right-3 bg-[#121F3D] dark:bg-[#848699] text-white dark:text-[#0C0E1B] px-3 py-1 rounded-full text-xs font-medium">
                      Sold Out
                    </div>
                  )}
                </div>
                <div className="p-5">
                  <div className="flex items-center mb-3">
                    <div className="h-8 w-8 rounded-full overflow-hidden relative mr-2">
                      <Image
                        src={drop.creatorImage || "/placeholder.svg?height=100&width=100"}
                        alt={drop.creator}
                        fill
                        className="object-cover"
                      />
                    </div>
                    <span className="text-sm font-medium text-[#121F3D] dark:text-[#E8E6FF]">{drop.creator}</span>
                  </div>
                  <h3 className="font-bold text-lg mb-2 text-[#121F3D] dark:text-[#E8E6FF]">{drop.name}</h3>
                  {drop.status === "Upcoming" && (
                    <div className="flex items-center text-sm text-[#121F3D]/70 dark:text-[#B6B8CF]">
                      <Clock className="h-4 w-4 mr-1" />
                      {drop.timeLeft}
                    </div>
                  )}
                </div>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* Vaulting & Tokenization */}
      <section className="py-20 px-4 bg-white dark:bg-[#0A0A0A]">
        <div className="max-w-7xl mx-auto">
          <div className="text-center mb-16">
            <h2 className="text-3xl md:text-4xl font-bold text-[#121F3D] dark:text-[#E8E6FF] tracking-tight mb-4">
              Secure Vaulting & Tokenization
            </h2>
            <p className="text-lg text-[#121F3D]/70 dark:text-[#B6B8CF] max-w-2xl mx-auto">
              We bridge physical trading cards with blockchain technology through our secure vaulting process
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
            {vaultingSteps.map((step, index) => (
              <div key={index} className="relative">
                <div className="rounded-3xl bg-white dark:bg-[#1A1C36] p-6 shadow-lg dark:shadow-[#352F7E]/20 hover:shadow-xl dark:hover:shadow-[#352F7E]/30 transition-all duration-300 hover:translate-y-[-8px] relative z-10 border border-transparent dark:border-[#352F7E]/20 h-full">
                  <div className="h-16 w-16 rounded-full bg-gradient-to-r from-[#6C63FF] to-[#5D51FF] dark:from-[#8075FF] dark:to-[#6C63FF] flex items-center justify-center text-white font-bold text-xl mb-6">
                    {index + 1}
                  </div>
                  <h3 className="font-bold text-xl mb-3 text-[#121F3D] dark:text-[#E8E6FF]">{step.title}</h3>
                  <p className="text-[#121F3D]/70 dark:text-[#B6B8CF]">{step.description}</p>
                </div>
                {index < vaultingSteps.length - 1 && (
                  <div className="hidden md:block absolute top-1/2 right-0 w-12 h-2 bg-[#E4E1FF] dark:bg-[#322F5D] transform translate-x-3 z-0"></div>
                )}
              </div>
            ))}
          </div>

          <div className="text-center mt-12">
            <Button className="rounded-full text-white bg-gradient-to-r from-[#6C63FF] to-[#5D51FF] dark:from-[#8075FF] dark:to-[#6C63FF] hover:from-[#5D51FF] hover:to-[#6C63FF] dark:hover:from-[#6C63FF] dark:hover:to-[#8075FF] px-8 py-6 text-lg font-medium">
              Learn More About Vaulting
            </Button>
          </div>
        </div>
      </section>

      {/* Live Auctions */}
      <section className="py-20 px-4 bg-[#121F3D] dark:bg-[#0A0A0A]">
        <div className="max-w-7xl mx-auto">
          <div className="flex justify-between items-center mb-12">
            <h2 className="text-3xl md:text-4xl font-bold text-white dark:text-[#E8E6FF] tracking-tight">
              Live Auctions
            </h2>
            <Button
              variant="outline"
              className="rounded-full border-white dark:border-[#8075FF] text-white dark:text-[#8075FF] hover:bg-white/10 dark:hover:bg-[#322F5D]"
            >
              View All <ArrowRight className="ml-2 h-4 w-4" />
            </Button>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {auctions.map((auction, index) => (
              <Card
                key={index}
                className="rounded-3xl overflow-hidden hover:scale-[1.03] transition-all duration-300 shadow-lg dark:shadow-[#352F7E]/20 hover:shadow-xl dark:hover:shadow-[#352F7E]/30 bg-white/5 dark:bg-[#1A1C36] backdrop-blur-sm border-0 dark:border dark:border-[#352F7E]/20"
              >
                {/* Card display with proper aspect ratio */}
                <div className="relative h-[140px] w-full overflow-hidden bg-[#0C0E1B]/50 dark:bg-[#0C0E1B]">
                  <div className="absolute left-1/2 top-1/2 transform -translate-x-1/2 -translate-y-1/2 w-[180px] h-[126px] hover:scale-105 hover:rotate-1 transition-all duration-500">
                    <div className="w-full h-full rounded-lg overflow-hidden shadow-md dark:shadow-[#352F7E]/30 bg-white/10 dark:bg-[#201C4A]">
                      <div className="relative w-full h-full">
                        <Image
                          src={auction.image || "/placeholder.svg?height=126&width=180"}
                          alt={auction.name}
                          fill
                          className="object-cover"
                        />
                      </div>
                    </div>
                  </div>

                  <div className="absolute top-3 right-3 bg-[#FF6B6B] dark:bg-[#FF7E7E] text-white px-3 py-1 rounded-full text-xs font-medium flex items-center">
                    <span className="h-2 w-2 bg-white rounded-full mr-1 animate-pulse"></span>
                    Live Auction
                  </div>
                </div>
                <div className="p-5">
                  <h3 className="font-bold text-xl mb-2 text-white dark:text-[#E8E6FF]">{auction.name}</h3>
                  <div className="flex justify-between items-center mb-4">
                    <div className="text-white/80 dark:text-[#B6B8CF] text-sm">Current Bid</div>
                    <div className="text-white dark:text-[#E8E6FF] font-bold">{auction.currentBid}</div>
                  </div>
                  <div className="flex justify-between items-center mb-4">
                    <div className="flex items-center text-white/80 dark:text-[#B6B8CF] text-sm">
                      <Clock className="h-4 w-4 mr-1" />
                      {auction.timeLeft}
                    </div>
                    <div className="flex items-center text-white/80 dark:text-[#B6B8CF] text-sm">
                      <Users className="h-4 w-4 mr-1" />
                      {auction.bidders} bidders
                    </div>
                  </div>
                  <div className="flex gap-2">
                    <Button className="flex-1 rounded-full text-[#121F3D] dark:text-[#0C0E1B] bg-gradient-to-r from-[#FFD166] to-[#FF6B6B] dark:from-[#FFE066] dark:to-[#FF7E7E] hover:from-[#FF6B6B] hover:to-[#FFD166] dark:hover:from-[#FF7E7E] dark:hover:to-[#FFE066] font-medium">
                      Place Bid
                    </Button>
                    <Button
                      variant="outline"
                      size="icon"
                      className="rounded-full border-white/20 dark:border-[#B6B8CF]/20 text-white dark:text-[#B6B8CF] hover:bg-white/10 dark:hover:bg-[#B6B8CF]/10"
                    >
                      <Heart className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* Card Authentication */}
      <section className="py-20 px-4 bg-white dark:bg-[#121212]">
        <div className="max-w-7xl mx-auto">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-12 items-center">
            <div>
              <h2 className="text-3xl md:text-4xl font-bold text-[#121F3D] dark:text-[#E8E6FF] tracking-tight mb-6">
                Expert Card Authentication
              </h2>
              <p className="text-lg text-[#121F3D]/70 dark:text-[#B6B8CF] mb-6">
                Every card in our marketplace undergoes rigorous authentication by industry experts using advanced
                technology to ensure authenticity and proper grading.
              </p>
              <ul className="space-y-4 mb-8">
                {authenticationFeatures.map((feature, index) => (
                  <li key={index} className="flex items-start">
                    <div className="h-6 w-6 rounded-full bg-[#4ECCA3] dark:bg-[#5DDFB8] flex items-center justify-center mr-3 mt-0.5">
                      <CheckCircle className="h-4 w-4 text-white" />
                    </div>
                    <span className="text-[#121F3D]/80 dark:text-[#B6B8CF]">{feature}</span>
                  </li>
                ))}
              </ul>
              <Button className="rounded-full text-white bg-gradient-to-r from-[#6C63FF] to-[#5D51FF] dark:from-[#8075FF] dark:to-[#6C63FF] hover:from-[#5D51FF] hover:to-[#6C63FF] dark:hover:from-[#6C63FF] dark:hover:to-[#8075FF] px-6 py-2 font-medium">
                Verify Your Cards
              </Button>
            </div>
            <div className="relative h-[300px] md:h-[400px]">
              {/* Authentication visualization */}
              <div className="absolute left-1/2 top-1/2 transform -translate-x-1/2 -translate-y-1/2 w-[220px] h-[154px] bg-gradient-to-r from-[#6C63FF]/10 to-[#5D51FF]/10 dark:from-[#8075FF]/20 dark:to-[#6C63FF]/20 rounded-xl p-3 z-20">
                <div className="w-full h-full rounded-lg overflow-hidden relative">
                  <Image
                    src="/placeholder.svg?height=154&width=220"
                    alt="Card authentication"
                    fill
                    className="object-cover"
                  />
                  <div className="absolute inset-0 bg-gradient-to-r from-[#6C63FF]/20 to-transparent dark:from-[#8075FF]/30 pointer-events-none"></div>

                  {/* Authentication overlay elements */}
                  <div className="absolute top-2 left-2 h-5 w-5 rounded-full border-2 border-[#4ECCA3] dark:border-[#5DDFB8] animate-pulse"></div>
                  <div className="absolute bottom-2 right-2 h-5 w-5 rounded-full border-2 border-[#4ECCA3] dark:border-[#5DDFB8] animate-pulse"></div>
                  <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 h-16 w-16 rounded-full border-2 border-[#FFD166] dark:border-[#FFE066] animate-pulse"></div>
                </div>
              </div>

              {/* Authentication badges */}
              <div className="absolute top-[15%] right-[10%] bg-white dark:bg-[#1A1C36] rounded-full p-3 shadow-lg dark:shadow-[#352F7E]/20 z-10">
                <Shield className="h-8 w-8 text-[#4ECCA3] dark:text-[#5DDFB8]" />
              </div>
              <div className="absolute bottom-[20%] left-[15%] bg-white dark:bg-[#1A1C36] rounded-full p-3 shadow-lg dark:shadow-[#352F7E]/20 z-10">
                <CheckCircle className="h-8 w-8 text-[#FFD166] dark:text-[#FFE066]" />
              </div>
              <div className="absolute bottom-[30%] right-[20%] bg-white dark:bg-[#1A1C36] rounded-full p-3 shadow-lg dark:shadow-[#352F7E]/20 z-10">
                <Wallet className="h-8 w-8 text-[#6C63FF] dark:text-[#8075FF]" />
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Testimonials */}
      <section className="py-20 px-4 bg-gradient-to-br from-[#F8F9FF] to-[#E4E1FF]/50 dark:from-[#121212] dark:to-[#1A1A1A]">
        <div className="max-w-7xl mx-auto">
          <div className="text-center mb-16">
            <h2 className="text-3xl md:text-4xl font-bold text-[#121F3D] dark:text-[#E8E6FF] tracking-tight mb-4">
              Collector Stories
            </h2>
            <p className="text-lg text-[#121F3D]/70 dark:text-[#B6B8CF] max-w-2xl mx-auto">
              Hear from our community of card collectors and sellers
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {testimonials.map((testimonial, index) => (
              <div
                key={index}
                className="rounded-3xl bg-white dark:bg-[#1A1C36] p-6 shadow-lg dark:shadow-[#352F7E]/20 hover:shadow-xl dark:hover:shadow-[#352F7E]/30 transition-all duration-300 hover:translate-y-[-8px] border border-transparent dark:border-[#352F7E]/20"
              >
                <div className="flex items-center mb-4">
                  <div className="h-12 w-12 rounded-full overflow-hidden relative mr-3">
                    <Image
                      src={testimonial.avatar || "/placeholder.svg?height=100&width=100"}
                      alt={testimonial.name}
                      fill
                      className="object-cover"
                    />
                  </div>
                  <div>
                    <h4 className="font-bold text-[#121F3D] dark:text-[#E8E6FF]">{testimonial.name}</h4>
                    <div className="flex">
                      {[...Array(5)].map((_, i) => (
                        <Star
                          key={i}
                          className="h-4 w-4 text-[#FFD166] dark:text-[#FFE066]"
                          fill={i < testimonial.rating ? (testimonial.rating > i ? "#FFD166" : "none") : "none"}
                        />
                      ))}
                    </div>
                  </div>
                </div>
                <p className="text-[#121F3D]/80 dark:text-[#B6B8CF] italic mb-4">"{testimonial.quote}"</p>
                <div className="flex items-center">
                  <div className="h-10 w-14 rounded-lg overflow-hidden relative mr-3">
                    <Image
                      src={testimonial.cardImage || "/placeholder.svg?height=70&width=100"}
                      alt="Card"
                      fill
                      className="object-cover"
                    />
                  </div>
                  <div className="text-sm text-[#121F3D]/70 dark:text-[#B6B8CF]">{testimonial.transaction}</div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Market Insights */}
      <section className="py-20 px-4 bg-white dark:bg-[#0A0A0A]">
        <div className="max-w-7xl mx-auto">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {marketStats.map((stat, index) => (
              <div
                key={index}
                className="rounded-3xl bg-white dark:bg-[#1A1C36] p-6 shadow-lg dark:shadow-[#352F7E]/20 hover:shadow-xl dark:hover:shadow-[#352F7E]/30 transition-all duration-300 hover:scale-105 border border-transparent dark:border-[#352F7E]/20"
              >
                <div className="flex items-center justify-center mb-4">
                  {stat.icon === "trending" && <TrendingUp className="h-12 w-12 text-[#6C63FF] dark:text-[#8075FF]" />}
                  {stat.icon === "users" && <Users className="h-12 w-12 text-[#6C63FF] dark:text-[#8075FF]" />}
                  {stat.icon === "chart" && <BarChart3 className="h-12 w-12 text-[#6C63FF] dark:text-[#8075FF]" />}
                </div>
                <div className="text-center">
                  <div className="text-4xl font-bold mb-2 bg-gradient-to-r from-[#6C63FF] to-[#5D51FF] dark:from-[#8075FF] dark:to-[#6C63FF] text-transparent bg-clip-text">
                    {stat.value}
                  </div>
                  <div className="text-[#121F3D]/70 dark:text-[#B6B8CF]">{stat.label}</div>
                </div>
              </div>
            ))}
          </div>
          <div className="text-center mt-12">
            <Button
              variant="outline"
              className="rounded-full border-[#6C63FF] dark:border-[#8075FF] text-[#6C63FF] dark:text-[#8075FF] hover:bg-[#E4E1FF] dark:hover:bg-[#322F5D]"
            >
              Download Market Report <ArrowUpRight className="ml-2 h-4 w-4" />
            </Button>
          </div>
        </div>
      </section>

      {/* Newsletter */}
      <section className="py-20 px-4 relative overflow-hidden">
        <div className="absolute inset-0 bg-gradient-to-br from-[#6C63FF] to-[#5D51FF] dark:from-[#1A1A1A] dark:to-[#121212] -z-10"></div>

        {/* Animated background shapes */}
        <div className="absolute top-1/4 left-1/4 w-64 h-64 rounded-full bg-white blur-3xl opacity-10 animate-float -z-10"></div>
        <div className="absolute bottom-1/4 right-1/3 w-80 h-80 rounded-full bg-white blur-3xl opacity-10 animate-float-delayed -z-10"></div>

        <div className="max-w-3xl mx-auto">
          <div className="rounded-3xl bg-white/10 dark:bg-white/5 backdrop-blur-sm p-8 md:p-12 border border-white/20">
            <div className="text-center mb-8">
              <h2 className="text-3xl md:text-4xl font-bold text-white tracking-tight mb-4">
                Get Early Access to Exclusive Card Drops
              </h2>
              <p className="text-white/80 max-w-lg mx-auto">
                Be the first to know about new collections, auctions, and platform features
              </p>
            </div>

            <div className="flex flex-col md:flex-row gap-4 mb-6">
              <Input
                type="email"
                placeholder="Enter your email"
                className="rounded-full bg-white/20 border-0 text-white placeholder:text-white/60 focus:ring-2 focus:ring-white/50"
              />
              <Button className="rounded-full text-[#121F3D] dark:text-[#0C0E1B] bg-white hover:bg-white/90 px-8 font-medium">
                Subscribe
              </Button>
            </div>

            <div className="flex flex-wrap justify-center gap-6">
              <div className="flex items-center">
                <Checkbox
                  id="sports"
                  className="rounded-full data-[state=checked]:bg-white data-[state=checked]:text-[#6C63FF] dark:data-[state=checked]:text-[#8075FF]"
                />
                <label htmlFor="sports" className="ml-2 text-sm text-white">
                  Sports Cards
                </label>
              </div>
              <div className="flex items-center">
                <Checkbox
                  id="tcg"
                  className="rounded-full data-[state=checked]:bg-white data-[state=checked]:text-[#6C63FF] dark:data-[state=checked]:text-[#8075FF]"
                />
                <label htmlFor="tcg" className="ml-2 text-sm text-white">
                  Trading Card Games
                </label>
              </div>
              <div className="flex items-center">
                <Checkbox
                  id="collectible"
                  className="rounded-full data-[state=checked]:bg-white data-[state=checked]:text-[#6C63FF] dark:data-[state=checked]:text-[#8075FF]"
                />
                <label htmlFor="collectible" className="ml-2 text-sm text-white">
                  Collectible Cards
                </label>
              </div>
              <div className="flex items-center">
                <Checkbox
                  id="reports"
                  className="rounded-full data-[state=checked]:bg-white data-[state=checked]:text-[#6C63FF] dark:data-[state=checked]:text-[#8075FF]"
                />
                <label htmlFor="reports" className="ml-2 text-sm text-white">
                  Market Reports
                </label>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Footer */}
      <footer className="bg-[#121F3D] dark:bg-[#0A0A0A] text-white pt-20 pb-8 px-4">
        <div className="max-w-7xl mx-auto">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-8 mb-16">
            <div>
              <div className="font-bold text-2xl mb-4">
                Card<span className="text-[#6C63FF] dark:text-[#8075FF]">Vault</span>
              </div>
              <p className="text-white/70 dark:text-[#B6B8CF] mb-6">
                The premier marketplace for authenticated trading cards on the blockchain.
              </p>
              <div className="flex space-x-4">
                <Button variant="ghost" size="icon" className="rounded-full hover:bg-white/10">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="20"
                    height="20"
                    fill="currentColor"
                    viewBox="0 0 16 16"
                  >
                    <path d="M16 8.049c0-4.446-3.582-8.05-8-8.05C3.58 0-.002 3.603-.002 8.05c0 4.017 2.926 7.347 6.75 7.951v-5.625h-2.03V8.05H6.75V6.275c0-2.017 1.195-3.131 3.022-3.131.876 0 1.791.157 1.791.157v1.98h-1.009c-.993 0-1.303.621-1.303 1.258v1.51h2.218l-.354 2.326H9.25V16c3.824-.604 6.75-3.934 6.75-7.951z" />
                  </svg>
                </Button>
                <Button variant="ghost" size="icon" className="rounded-full hover:bg-white/10">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="20"
                    height="20"
                    fill="currentColor"
                    viewBox="0 0 16 16"
                  >
                    <path d="M5.026 15c6.038 0 9.341-5.003 9.341-9.334 0-.14 0-.282-.006-.422A6.685 6.685 0 0 0 16 3.542a6.658 6.658 0 0 1-1.889.518 3.301 3.301 0 0 0 1.447-1.817 6.533 6.533 0 0 1-2.087.793A3.286 3.286 0 0 0 7.875 6.03a9.325 9.325 0 0 1-6.767-3.429 3.289 3.289 0 0 0 1.018 4.382A3.323 3.323 0 0 1 .64 6.575v.045a3.288 3.288 0 0 0 2.632 3.218 3.203 3.203 0 0 1-.865.115 3.23 3.23 0 0 1-.614-.057 3.283 3.283 0 0 0 3.067 2.277A6.588 6.588 0 0 1 .78 13.58a6.32 6.32 0 0 1-.78-.045A9.344 9.344 0 0 0 5.026 15z" />
                  </svg>
                </Button>
                <Button variant="ghost" size="icon" className="rounded-full hover:bg-white/10">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="20"
                    height="20"
                    fill="currentColor"
                    viewBox="0 0 16 16"
                  >
                    <path d="M8 0C5.829 0 5.556.01 4.703.048 3.85.088 3.269.222 2.76.42a3.917 3.917 0 0 0-1.417.923A3.927 3.927 0 0 0 .42 2.76C.222 3.268.087 3.85.048 4.7.01 5.555 0 5.827 0 8c0 2.173.01 2.445.048 3.298.04.852.174 1.433.372 1.942.205.526.478.972.923 1.417.444.445.89.719 1.416.923.51.198 1.09.333 1.942.372C5.555 15.99 5.827 16 8 16s2.445-.01 3.298-.048c.851-.04 1.434-.174 1.943-.372a3.916 3.916 0 0 0 1.416-.923c.445-.445.718-.891.923-1.417.197-.509.332-1.09.372-1.942C15.99 10.445 16 10.173 16 8s-.01-2.445-.048-3.298c-.04-.851-.175-1.433-.372-1.942a3.926 3.926 0 0 0-.923-1.417A3.911 3.911 0 0 0 13.24.42c-.51-.198-1.092-.333-1.943-.372C10.445.01 10.173 0 8 0zm0 1.44c2.136 0 2.39.01 3.233.048.78.036 1.203.166 1.485.276.374.145.64.318.92.598.28.28.453.546.598.92.11.282.24.705.276 1.485.038.844.047 1.097.047 3.233s-.01 2.39-.05 3.233c-.04.78-.17 1.203-.28 1.485-.15.374-.32.64-.6.92-.28.28-.55.453-.92.598-.28.11-.71.24-1.49.276-.85.038-1.1.047-3.24.047s-2.39-.01-3.24-.05c-.78-.04-1.21-.17-1.49-.28a2.49 2.49 0 0 1-.92-.6c-.28-.28-.46-.55-.6-.92-.11-.28-.24-.71-.28-1.49-.03-.84-.04-1.1-.04-3.23s.01-2.39.04-3.24c.04-.78.17-1.21.28-1.49.14-.38.32-.64.6-.92.28-.28.54-.46.92-.6.28-.11.7-.24 1.48-.28.85-.03 1.1-.04 3.24-.04zm0 2.452a4.108 4.108 0 1 0 0 8.215 4.108 4.108 0 0 0 0-8.215zm0 6.775a2.667 2.667 0 1 1 0-5.334 2.667 2.667 0 0 1 0 5.334zm5.23-6.937a.96.96 0 1 1-1.92 0 .96.96 0 0 1 1.92 0z" />
                  </svg>
                </Button>
                <Button variant="ghost" size="icon" className="rounded-full hover:bg-white/10">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="20"
                    height="20"
                    fill="currentColor"
                    viewBox="0 0 16 16"
                  >
                    <path d="M8.051 1.999h.089c.822.003 4.987.033 6.11.335a2.01 2.01 0 0 1 1.415 1.42c.101.38.172.883.22 1.402l.01.104.022.26.008.104c.065.914.073 1.77.074 1.957v.075c-.001.194-.01 1.108-.082 2.06l-.008.105-.009.104c-.05.572-.124 1.14-.235 1.558a2.007 2.007 0 0 1-1.415 1.42c-1.16.312-5.569.334-6.18.335h-.142c-.309 0-1.587-.006-2.927-.052l-.17-.006-.087-.004-.171-.007-.171-.007c-1.11-.049-2.167-.128-2.654-.26a2.007 2.007 0 0 1-1.415-1.419c-.111-.417-.185-.986-.235-1.558L.09 9.82l-.008-.104A31.4 31.4 0 0 1 0 7.68v-.123c.002-.215.01-.958.064-1.778l.007-.103.003-.052.008-.104.022-.26.01-.104c.048-.519.119-1.023.22-1.402a2.007 2.007 0 0 1 1.415-1.42c.487-.13 1.544-.21 2.654-.26l.17-.007.172-.006.086-.003.171-.007A99.788 99.788 0 0 1 7.858 2h.193zM6.4 5.209v4.818l4.157-2.408L6.4 5.209z" />
                  </svg>
                </Button>
              </div>
            </div>

            <div>
              <h4 className="font-bold text-lg mb-4">Quick Links</h4>
              <ul className="space-y-2">
                <li>
                  <Link
                    href="#"
                    className="text-white/70 dark:text-[#B6B8CF] hover:text-white dark:hover:text-[#E8E6FF]"
                  >
                    Cards
                  </Link>
                </li>
                <li>
                  <Link
                    href="#"
                    className="text-white/70 dark:text-[#B6B8CF] hover:text-white dark:hover:text-[#E8E6FF]"
                  >
                    Sets
                  </Link>
                </li>
                <li>
                  <Link
                    href="#"
                    className="text-white/70 dark:text-[#B6B8CF] hover:text-white dark:hover:text-[#E8E6FF]"
                  >
                    Auctions
                  </Link>
                </li>
                <li>
                  <Link
                    href="#"
                    className="text-white/70 dark:text-[#B6B8CF] hover:text-white dark:hover:text-[#E8E6FF]"
                  >
                    Vaulting
                  </Link>
                </li>
                <li>
                  <Link
                    href="#"
                    className="text-white/70 dark:text-[#B6B8CF] hover:text-white dark:hover:text-[#E8E6FF]"
                  >
                    Drops
                  </Link>
                </li>
              </ul>
            </div>

            <div>
              <h4 className="font-bold text-lg mb-4">Support</h4>
              <ul className="space-y-2">
                <li>
                  <Link
                    href="#"
                    className="text-white/70 dark:text-[#B6B8CF] hover:text-white dark:hover:text-[#E8E6FF]"
                  >
                    Help Center
                  </Link>
                </li>
                <li>
                  <Link
                    href="#"
                    className="text-white/70 dark:text-[#B6B8CF] hover:text-white dark:hover:text-[#E8E6FF]"
                  >
                    FAQs
                  </Link>
                </li>
                <li>
                  <Link
                    href="#"
                    className="text-white/70 dark:text-[#B6B8CF] hover:text-white dark:hover:text-[#E8E6FF]"
                  >
                    Contact Us
                  </Link>
                </li>
                <li>
                  <Link
                    href="#"
                    className="text-white/70 dark:text-[#B6B8CF] hover:text-white dark:hover:text-[#E8E6FF]"
                  >
                    Terms of Service
                  </Link>
                </li>
                <li>
                  <Link
                    href="#"
                    className="text-white/70 dark:text-[#B6B8CF] hover:text-white dark:hover:text-[#E8E6FF]"
                  >
                    Privacy Policy
                  </Link>
                </li>
              </ul>
            </div>

            <div>
              <h4 className="font-bold text-lg mb-4">Newsletter</h4>
              <p className="text-white/70 dark:text-[#B6B8CF] mb-4">Stay updated with the latest drops and features</p>
              <div className="flex">
                <Input
                  type="email"
                  placeholder="Email"
                  className="rounded-l-full bg-white/10 border-0 text-white placeholder:text-white/60 focus:ring-1 focus:ring-white/30"
                />
                <Button className="rounded-r-full bg-[#6C63FF] dark:bg-[#8075FF] hover:bg-[#5D51FF] dark:hover:bg-[#6C63FF]">
                  <ArrowRight className="h-4 w-4" />
                </Button>
              </div>
            </div>
          </div>

          <div className="border-t border-white/10 pt-8 text-center text-white/60 dark:text-[#848699] text-sm">
            <p>© 2025 CardVault. All rights reserved.</p>
          </div>
        </div>
      </footer>
    </main>
  )
}

// Sample data
const collections = [
  {
    name: "Vintage Baseball Cards",
    description: "Authenticated vintage baseball cards from the golden era of the sport",
    items: "124",
    floor: "1.2 ETH",
    cardImages: [
      "/placeholder.svg?height=84&width=120",
      "/placeholder.svg?height=84&width=120",
      "/placeholder.svg?height=84&width=120",
    ],
  },
  {
    name: "Holographic Pokémon",
    description: "First edition holographic Pokémon cards with authentication",
    items: "57",
    floor: "2.8 ETH",
    cardImages: [
      "/placeholder.svg?height=84&width=120",
      "/placeholder.svg?height=84&width=120",
      "/placeholder.svg?height=84&width=120",
    ],
  },
  {
    name: "Limited Edition Sports",
    description: "Rare and limited edition sports cards from championship seasons",
    items: "89",
    floor: "0.8 ETH",
    cardImages: [
      "/placeholder.svg?height=84&width=120",
      "/placeholder.svg?height=84&width=120",
      "/placeholder.svg?height=84&width=120",
    ],
  },
]

const drops = [
  {
    name: "Rookie Legends",
    creator: "Sports Vault",
    creatorImage: "/placeholder.svg?height=100&width=100",
    status: "Live",
    image: "/placeholder.svg?height=126&width=180",
  },
  {
    name: "Holographic Heroes",
    creator: "Collector's Guild",
    creatorImage: "/placeholder.svg?height=100&width=100",
    status: "Upcoming",
    timeLeft: "2d 5h",
    image: "/placeholder.svg?height=126&width=180",
  },
  {
    name: "Championship Collection",
    creator: "Sports Legends",
    creatorImage: "/placeholder.svg?height=100&width=100",
    status: "Upcoming",
    timeLeft: "5d 12h",
    image: "/placeholder.svg?height=126&width=180",
  },
  {
    name: "Signature Series",
    creator: "Card Masters",
    creatorImage: "/placeholder.svg?height=100&width=100",
    status: "Sold Out",
    image: "/placeholder.svg?height=126&width=180",
  },
]

const vaultingSteps = [
  {
    title: "Authentication",
    description: "Our experts authenticate your card using advanced techniques and industry knowledge",
  },
  {
    title: "Secure Vaulting",
    description: "Your card is stored in our climate-controlled, insured vault facility with 24/7 security",
  },
  {
    title: "Tokenization",
    description: "Your physical card is tokenized on the blockchain with a unique NFT representing ownership",
  },
  {
    title: "Marketplace Listing",
    description: "Your card becomes available for trading on our marketplace with full provenance history",
  },
]

const auctions = [
  {
    name: "1952 Mickey Mantle Rookie",
    currentBid: "45.5 ETH",
    timeLeft: "2h 45m",
    bidders: "24",
    image: "/placeholder.svg?height=126&width=180",
  },
  {
    name: "Charizard 1st Edition",
    currentBid: "32.8 ETH",
    timeLeft: "5h 12m",
    bidders: "18",
    image: "/placeholder.svg?height=126&width=180",
  },
  {
    name: "Michael Jordan Fleer RC",
    currentBid: "12.4 ETH",
    timeLeft: "1h 30m",
    bidders: "9",
    image: "/placeholder.svg?height=126&width=180",
  },
]

const testimonials = [
  {
    name: "Alex Thompson",
    avatar: "/placeholder.svg?height=100&width=100",
    rating: 5,
    quote:
      "The authentication process gave me complete confidence in my purchase. The tokenization makes reselling so much easier.",
    cardImage: "/placeholder.svg?height=70&width=100",
    transaction: "Purchased rare rookie card",
  },
  {
    name: "Sarah Johnson",
    avatar: "/placeholder.svg?height=100&width=100",
    rating: 5,
    quote: "I sold my vintage card collection for 30% more than traditional auction houses were offering.",
    cardImage: "/placeholder.svg?height=70&width=100",
    transaction: "Sold vintage collection",
  },
  {
    name: "Michael Chen",
    avatar: "/placeholder.svg?height=100&width=100",
    rating: 4,
    quote: "The vaulting service gives me peace of mind knowing my cards are secure while I can still trade them.",
    cardImage: "/placeholder.svg?height=70&width=100",
    transaction: "Vaulted sports cards",
  },
]

const marketStats = [
  {
    icon: "trending",
    value: "$24.5M",
    label: "Trading Volume",
  },
  {
    icon: "users",
    value: "12,450+",
    label: "Active Collectors",
  },
  {
    icon: "chart",
    value: "22.4%",
    label: "Average ROI",
  },
]

const authenticationFeatures = [
  "High-resolution scanning and imaging",
  "Multi-point verification process",
  "Professional grading partnerships",
  "Tamper-proof security seals",
  "Blockchain verification record",
]

```

`/home/sam/hack-pro/Vynix-v0/app/layout.tsx`:

```tsx
import type React from "react"
import type { Metadata } from "next"
import { Inter } from "next/font/google"
import "./globals.css"
import { ThemeProvider } from "@/components/theme-provider"
import Provider from "@/lib/provider"

const inter = Inter({ subsets: ["latin"] })

export const metadata: Metadata = {
  title: "Vynix",
  description: "The premier marketplace for authenticated trading cards on the blockchain",
  icons: ""
}

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body className={inter.className}>
      <Provider>
        <ThemeProvider attribute="class" defaultTheme="system" enableSystem disableTransitionOnChange>
          {children}
        </ThemeProvider>
        </Provider>
      </body>
    </html>
  )
}

```

`/home/sam/hack-pro/Vynix-v0/app/new/page.tsx`:

```tsx
"use client"

import { useEffect, useState } from 'react';
import { usePrivy, useWallets } from '@privy-io/react-auth';
import { formatEther } from 'viem/utils';
import { Button } from '@/components/ui/button';

function WalletBalance() {
  const { wallets, ready } = useWallets();
  const {login} = usePrivy()
  const [balance, setBalance] = useState<string | null>(null);
  const [address, setAddress] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Find the embedded wallet
  const embeddedWallet = wallets?.find(wallet => 
    wallet.walletClientType === 'privy' && wallet.connectorType === 'embedded'
  );

  const getBalance = async () => {
    if (!embeddedWallet) {
      setError('No embedded wallet found');
      return;
    }

    try {
      setLoading(true);
      setError(null);
      
      // Get the provider for the embedded wallet
      const provider = await embeddedWallet.getEthereumProvider();
      
      // Get the wallet address
      const walletAddress = embeddedWallet.address;
      setAddress(walletAddress);
      
      // Get the wallet balance using EIP-1193 request
      const balanceHex = await provider.request({
        method: 'eth_getBalance',
        params: [walletAddress, 'latest'],
      });
      // Convert hex string (e.g., '0x...') to BigInt
      const balanceInWei = BigInt(balanceHex);
      const formattedBalance = formatEther(balanceInWei);
      setBalance(formattedBalance);
    } catch (err) {
      console.error('Error getting balance:', err);
      if (err instanceof Error) {
        setError(`Failed to get balance: ${err.message}`);
      } else {
        setError('An unknown error occurred while fetching the balance.');
      }
    } finally {
      setLoading(false);
    }
  };

  // Automatically fetch balance when wallet is ready
  useEffect(() => {
    if (ready && embeddedWallet) {
      getBalance();
    }
  }, [ready, embeddedWallet]);

//   if (!ready) {
//     return <div>Loading wallets...</div>;
//   }

//   if (!embeddedWallet) {
//     return <div>No embedded wallet found. Please ensure you've configured Privy to create embedded wallets.</div>;
//   }

  return (
    <div>
      <h2>Embedded Wallet Details</h2>
        <Button onClick={() => login({loginMethods : ["google", "email"]})}>login</Button> 
      <div>
        <strong>Address:</strong> {address || 'Loading...'}
      </div>
      
      <div>
        <strong>Balance:</strong> {loading ? 'Loading...' : (balance ? `${balance} PHAR` : 'Unknown')}
      </div>
      
      {error && <div style={{ color: 'red' }}>{error}</div>}
      
      <button onClick={getBalance} disabled={loading}>
        {loading ? 'Refreshing...' : 'Refresh Balance'}
      </button>
    </div>
  );
}

export default WalletBalance;

```

`/home/sam/hack-pro/Vynix-v0/components/theme-provider.tsx`:

```tsx
"use client"
import { ThemeProvider as NextThemesProvider } from "next-themes"
import type { ThemeProviderProps } from "next-themes/dist/types"

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}

```

`/home/sam/hack-pro/Vynix-v0/components/ui/accordion.tsx`:

```tsx
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

```

`/home/sam/hack-pro/Vynix-v0/components/ui/alert-dialog.tsx`:

```tsx
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

```

`/home/sam/hack-pro/Vynix-v0/components/ui/alert.tsx`:

```tsx
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

```

`/home/sam/hack-pro/Vynix-v0/components/ui/aspect-ratio.tsx`:

```tsx
"use client"

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }

```

`/home/sam/hack-pro/Vynix-v0/components/ui/avatar.tsx`:

```tsx
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

```

`/home/sam/hack-pro/Vynix-v0/components/ui/badge.tsx`:

```tsx
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

```

`/home/sam/hack-pro/Vynix-v0/components/ui/breadcrumb.tsx`:

```tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}

```

`/home/sam/hack-pro/Vynix-v0/components/ui/button.tsx`:

```tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

```

`/home/sam/hack-pro/Vynix-v0/components/ui/calendar.tsx`:

```tsx
"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }

```

`/home/sam/hack-pro/Vynix-v0/components/ui/card.tsx`:

```tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

```

`/home/sam/hack-pro/Vynix-v0/components/ui/carousel.tsx`:

```tsx
"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}

```

`/home/sam/hack-pro/Vynix-v0/components/ui/chart.tsx`:

```tsx
"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}

```

`/home/sam/hack-pro/Vynix-v0/components/ui/checkbox.tsx`:

```tsx
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

```

`/home/sam/hack-pro/Vynix-v0/components/ui/collapsible.tsx`:

```tsx
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

```

`/home/sam/hack-pro/Vynix-v0/components/ui/command.tsx`:

```tsx
"use client"

import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }: DialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

```

`/home/sam/hack-pro/Vynix-v0/components/ui/context-menu.tsx`:

```tsx
"use client"

import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}

```

`/home/sam/hack-pro/Vynix-v0/components/ui/dialog.tsx`:

```tsx
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

```

`/home/sam/hack-pro/Vynix-v0/components/ui/drawer.tsx`:

```tsx
"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}

```

`/home/sam/hack-pro/Vynix-v0/components/ui/dropdown-menu.tsx`:

```tsx
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

```

`/home/sam/hack-pro/Vynix-v0/components/ui/form.tsx`:

```tsx
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

```

`/home/sam/hack-pro/Vynix-v0/components/ui/hover-card.tsx`:

```tsx
"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }

```

`/home/sam/hack-pro/Vynix-v0/components/ui/input-otp.tsx`:

```tsx
"use client"

import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }

```

`/home/sam/hack-pro/Vynix-v0/components/ui/input.tsx`:

```tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

```

`/home/sam/hack-pro/Vynix-v0/components/ui/label.tsx`:

```tsx
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva("text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70")

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> & VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

```

`/home/sam/hack-pro/Vynix-v0/components/ui/menubar.tsx`:

```tsx
"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}

```

`/home/sam/hack-pro/Vynix-v0/components/ui/navigation-menu.tsx`:

```tsx
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}

```

`/home/sam/hack-pro/Vynix-v0/components/ui/pagination.tsx`:

```tsx
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}

```

`/home/sam/hack-pro/Vynix-v0/components/ui/popover.tsx`:

```tsx
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }

```

`/home/sam/hack-pro/Vynix-v0/components/ui/progress.tsx`:

```tsx
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn("relative h-2 w-full overflow-hidden rounded-full bg-[#E4E1FF] dark:bg-[#1A1C36]", className)}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-gradient-to-r from-[#6C63FF] to-[#5D51FF] dark:from-[#8075FF] dark:to-[#6C63FF] transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }

```

`/home/sam/hack-pro/Vynix-v0/components/ui/radio-group.tsx`:

```tsx
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }

```

`/home/sam/hack-pro/Vynix-v0/components/ui/resizable.tsx`:

```tsx
"use client"

import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }

```

`/home/sam/hack-pro/Vynix-v0/components/ui/scroll-area.tsx`:

```tsx
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

```

`/home/sam/hack-pro/Vynix-v0/components/ui/select.tsx`:

```tsx
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

```

`/home/sam/hack-pro/Vynix-v0/components/ui/separator.tsx`:

```tsx
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

```

`/home/sam/hack-pro/Vynix-v0/components/ui/sheet.tsx`:

```tsx
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}

```

`/home/sam/hack-pro/Vynix-v0/components/ui/sidebar.tsx`:

```tsx
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}

```

`/home/sam/hack-pro/Vynix-v0/components/ui/skeleton.tsx`:

```tsx
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }

```

`/home/sam/hack-pro/Vynix-v0/components/ui/slider.tsx`:

```tsx
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }

```

`/home/sam/hack-pro/Vynix-v0/components/ui/sonner.tsx`:

```tsx
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }

```

`/home/sam/hack-pro/Vynix-v0/components/ui/switch.tsx`:

```tsx
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

```

`/home/sam/hack-pro/Vynix-v0/components/ui/table.tsx`:

```tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

```

`/home/sam/hack-pro/Vynix-v0/components/ui/tabs.tsx`:

```tsx
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

```

`/home/sam/hack-pro/Vynix-v0/components/ui/textarea.tsx`:

```tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }

```

`/home/sam/hack-pro/Vynix-v0/components/ui/toast.tsx`:

```tsx
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

```

`/home/sam/hack-pro/Vynix-v0/components/ui/toaster.tsx`:

```tsx
"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

```

`/home/sam/hack-pro/Vynix-v0/components/ui/toggle-group.tsx`:

```tsx
"use client"

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }

```

`/home/sam/hack-pro/Vynix-v0/components/ui/toggle.tsx`:

```tsx
"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3 min-w-10",
        sm: "h-9 px-2.5 min-w-9",
        lg: "h-11 px-5 min-w-11",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }

```

`/home/sam/hack-pro/Vynix-v0/components/ui/tooltip.tsx`:

```tsx
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

```

`/home/sam/hack-pro/Vynix-v0/components/ui/use-mobile.tsx`:

```tsx
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

```

`/home/sam/hack-pro/Vynix-v0/components/ui/use-toast.ts`:

```ts
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

```

`/home/sam/hack-pro/Vynix-v0/components/ui/logo.tsx`:

```tsx
import { cn } from "@/lib/utils"

interface LogoProps {
  className?: string
  size?: "sm" | "md" | "lg" | "xl" | "2xl"
  variant?: "default" | "gradient"
}

export function VynixLogo({ className, size = "2xl", variant = "gradient" }: LogoProps) {
  const sizeClasses = {
    sm: "h-6",
    md: "h-8",
    lg: "h-10",
    xl: "h-30"
  }

  return (
    <div className={cn("flex items-center gap-2", className)}>
      <div className="relative">
        <svg
          className={cn(
            sizeClasses["lg"],
            "w-auto",
            variant === "gradient" ? "text-[#6C63FF] dark:text-[#8075FF]" : "text-current",
          )}
          viewBox="0 0 32 32"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path d="M16 2L3 9L16 16L29 9L16 2Z" fill="currentColor" fillOpacity="0.8" />
          <path d="M3 9V23L16 30V16L3 9Z" fill="currentColor" fillOpacity="0.6" />
          <path d="M16 16V30L29 23V9L16 16Z" fill="currentColor" fillOpacity="0.4" />
          <path d="M10 12L16 15L22 12L16 9L10 12Z" fill="white" fillOpacity="0.5" />
        </svg>
      </div>
      <span
        className={cn(
          "semi-bold",
          sizeClasses["xl"],
          variant === "gradient"
            ? "bg-gradient-to-r from-[#6C63FF] to-[#5D51FF] dark:from-[#8075FF] dark:to-[#6C63FF] text-transparent bg-clip-text text-2xl"
            : "text-current",
        )}
      >
        Vynix
      </span>
    </div>
  )
}

```

`/home/sam/hack-pro/Vynix-v0/components/ui/resizable-navbar.tsx`:

```tsx
"use client";
import { cn } from "@/lib/utils";
import { IconMenu2, IconX } from "@tabler/icons-react";
import {
  motion,
  AnimatePresence,
  useScroll,
  useMotionValueEvent,
} from "motion/react";

import React, { useRef, useState } from "react";
import { VynixLogo } from "./logo";


interface NavbarProps {
  children: React.ReactNode;
  className?: string;
}

interface NavBodyProps {
  children: React.ReactNode;
  className?: string;
  visible?: boolean;
}

interface NavItemsProps {
  items: {
    name: string;
    link: string;
  }[];
  className?: string;
  onItemClick?: () => void;
}

interface MobileNavProps {
  children: React.ReactNode;
  className?: string;
  visible?: boolean;
}

interface MobileNavHeaderProps {
  children: React.ReactNode;
  className?: string;
}

interface MobileNavMenuProps {
  children: React.ReactNode;
  className?: string;
  isOpen: boolean;
  onClose: () => void;
}

export const Navbar = ({ children, className }: NavbarProps) => {
  const ref = useRef<HTMLDivElement>(null);
  const { scrollY } = useScroll({
    target: ref,
    offset: ["start start", "end start"],
  });
  const [visible, setVisible] = useState<boolean>(false);

  useMotionValueEvent(scrollY, "change", (latest) => {
    if (latest > 100) {
      setVisible(true);
    } else {
      setVisible(false);
    }
  });

  return (
    <motion.div
      ref={ref}
      // IMPORTANT: Change this to class of `fixed` if you want the navbar to be fixed
      className={cn("fixed inset-x-0 top-10 z-40 w-full", className)}
    >
      {React.Children.map(children, (child) =>
        React.isValidElement(child)
          ? React.cloneElement(
              child as React.ReactElement<{ visible?: boolean }>,
              { visible },
            )
          : child,
      )}
    </motion.div>
  );
};

export const NavBody = ({ children, className, visible }: NavBodyProps) => {
  return (
    <motion.div
      animate={{
        backdropFilter: visible ? "blur(10px)" : "none",
        boxShadow: visible
          ? "0 0 24px rgba(34, 42, 53, 0.06), 0 1px 1px rgba(0, 0, 0, 0.05), 0 0 0 1px rgba(34, 42, 53, 0.04), 0 0 4px rgba(34, 42, 53, 0.08), 0 16px 68px rgba(47, 48, 55, 0.05), 0 1px 0 rgba(255, 255, 255, 0.1) inset"
          : "none",
        width: visible ? "40%" : "100%",
        y: visible ? 20 : 0,
      }}
      transition={{
        type: "spring",
        stiffness: 200,
        damping: 50,
      }}
      style={{
        minWidth: "800px",
      }}
      className={cn(
        "relative z-[60] mx-auto hidden w-full max-w-7xl flex-row items-center justify-between self-start rounded-full bg-transparent px-4 py-2 lg:flex dark:bg-transparent",
        visible && "bg-white/80 dark:bg-neutral-950/80",
        className,
      )}
    >
      {children}
    </motion.div>
  );
};

export const NavItems = ({ items, className, onItemClick }: NavItemsProps) => {
  const [hovered, setHovered] = useState<number | null>(null);

  return (
    <motion.div
      onMouseLeave={() => setHovered(null)}
      className={cn(
        "absolute inset-0 hidden flex-1 flex-row items-center justify-center space-x-2 text-sm font-medium text-zinc-600 transition duration-200 hover:text-zinc-800 lg:flex lg:space-x-2",
        className,
      )}
    >
      {items.map((item, idx) => (
        <a
          onMouseEnter={() => setHovered(idx)}
          onClick={onItemClick}
          className="relative px-4 py-2 text-neutral-600 dark:text-neutral-300"
          key={`link-${idx}`}
          href={item.link}
        >
          {hovered === idx && (
            <motion.div
              layoutId="hovered"
              className="absolute inset-0 h-full w-full rounded-full bg-gray-100 dark:bg-neutral-800"
            />
          )}
          <span className="relative z-20">{item.name}</span>
        </a>
      ))}
    </motion.div>
  );
};

export const MobileNav = ({ children, className, visible }: MobileNavProps) => {
  return (
    <motion.div
      animate={{
        backdropFilter: visible ? "blur(10px)" : "none",
        boxShadow: visible
          ? "0 0 24px rgba(34, 42, 53, 0.06), 0 1px 1px rgba(0, 0, 0, 0.05), 0 0 0 1px rgba(34, 42, 53, 0.04), 0 0 4px rgba(34, 42, 53, 0.08), 0 16px 68px rgba(47, 48, 55, 0.05), 0 1px 0 rgba(255, 255, 255, 0.1) inset"
          : "none",
        width: visible ? "90%" : "100%",
        paddingRight: visible ? "12px" : "0px",
        paddingLeft: visible ? "12px" : "0px",
        borderRadius: visible ? "4px" : "2rem",
        y: visible ? 20 : 0,
      }}
      transition={{
        type: "spring",
        stiffness: 200,
        damping: 50,
      }}
      className={cn(
        "relative z-50 mx-auto flex w-full max-w-[calc(100vw-2rem)] flex-col items-center justify-between bg-transparent px-0 py-2 lg:hidden",
        visible && "bg-white/80 dark:bg-neutral-950/80",
        className,
      )}
    >
      {children}
    </motion.div>
  );
};

export const MobileNavHeader = ({
  children,
  className,
}: MobileNavHeaderProps) => {
  return (
    <div
      className={cn(
        "flex w-full flex-row items-center justify-between",
        className,
      )}
    >
      {children}
    </div>
  );
};

export const MobileNavMenu = ({
  children,
  className,
  isOpen,
  onClose,
}: MobileNavMenuProps) => {
  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className={cn(
            "absolute inset-x-0 top-16 z-50 flex w-full flex-col items-start justify-start gap-4 rounded-lg bg-white px-4 py-8 shadow-[0_0_24px_rgba(34,_42,_53,_0.06),_0_1px_1px_rgba(0,_0,_0,_0.05),_0_0_0_1px_rgba(34,_42,_53,_0.04),_0_0_4px_rgba(34,_42,_53,_0.08),_0_16px_68px_rgba(47,_48,_55,_0.05),_0_1px_0_rgba(255,_255,_255,_0.1)_inset] dark:bg-neutral-950",
            className,
          )}
        >
          {children}
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export const MobileNavToggle = ({
  isOpen,
  onClick,
}: {
  isOpen: boolean;
  onClick: () => void;
}) => {
  return isOpen ? (
    <IconX className="text-black dark:text-white" onClick={onClick} />
  ) : (
    <IconMenu2 className="text-black dark:text-white" onClick={onClick} />
  );
};

export const NavbarLogo = () => {
  return (
    <a
      href="/"
      className="relative z-20 mr-4 flex items-center space-x-2 px-2 py-1 text-sm font-normal text-black"
    >
      <VynixLogo/>
    </a>
  );
};

export const NavbarButton = ({
  href,
  as: Tag = "a",
  children,
  className,
  variant = "primary",
  ...props
}: {
  href?: string;
  as?: React.ElementType;
  children: React.ReactNode;
  className?: string;
  variant?: "primary" | "secondary" | "dark" | "gradient";
} & (
  | React.ComponentPropsWithoutRef<"a">
  | React.ComponentPropsWithoutRef<"button">
)) => {
  const baseStyles =
    "px-4 py-2 rounded-md bg-white button bg-white text-black text-sm font-bold relative cursor-pointer hover:-translate-y-0.5 transition duration-200 inline-block text-center";

  const variantStyles = {
    primary:
      "shadow-[0_0_24px_rgba(34,_42,_53,_0.06),_0_1px_1px_rgba(0,_0,_0,_0.05),_0_0_0_1px_rgba(34,_42,_53,_0.04),_0_0_4px_rgba(34,_42,_53,_0.08),_0_16px_68px_rgba(47,_48,_55,_0.05),_0_1px_0_rgba(255,_255,_255,_0.1)_inset]",
    secondary: "bg-transparent shadow-none dark:text-white",
    dark: "bg-black text-white shadow-[0_0_24px_rgba(34,_42,_53,_0.06),_0_1px_1px_rgba(0,_0,_0,_0.05),_0_0_0_1px_rgba(34,_42,_53,_0.04),_0_0_4px_rgba(34,_42,_53,_0.08),_0_16px_68px_rgba(47,_48,_55,_0.05),_0_1px_0_rgba(255,_255,_255,_0.1)_inset]",
    gradient:
      "bg-gradient-to-b from-blue-500 to-blue-700 text-white shadow-[0px_2px_0px_0px_rgba(255,255,255,0.3)_inset]",
  };

  return (
    <Tag
      href={href || undefined}
      className={cn(baseStyles, variantStyles[variant], className)}
      {...props}
    >
      {children}
    </Tag>
  );
};

```

`/home/sam/hack-pro/Vynix-v0/components/theme-toggle.tsx`:

```tsx
"use client"

import { Moon, Sun } from "lucide-react"
import { useTheme } from "next-themes"
import { Button } from "@/components/ui/button"
import { useEffect, useState } from "react"

export function ThemeToggle() {
  const { theme, setTheme } = useTheme()


  return (
    <Button
      variant="ghost"
      size="icon"
      onClick={() => setTheme(theme === "dark" ? "light" : "dark")}
      className="rounded-full z-20"
      aria-label="Toggle theme"
    >
      {theme === "dark" ? <Moon className="h-5 w-5 text-[#E0E0E0]" /> : <Sun className="h-5 w-5 text-[#121F3D]" />}
      <span className="sr-only">Toggle theme</span>
    </Button>
  )
}

```

`/home/sam/hack-pro/Vynix-v0/components/marketplace/marketplace-header.tsx`:

```tsx
"use client"

import { useState, useEffect } from "react"
import { motion } from "framer-motion"
import { Search, Mic } from "lucide-react"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { cn } from "@/lib/utils"

const categories = [
  { name: "Pokemon", icon: "pokeball", active: true },
  { name: "Sports Cards", icon: "sports", active: false },
  { name: "TCG", icon: "cards", active: false },
  { name: "Collectible Cards", icon: "collectible", active: false },
  { name: "Limited Editions", icon: "limited", active: false },
]

export function MarketplaceHeader() {
  const [searchFocused, setSearchFocused] = useState(false)
  const [selectedCategory, setSelectedCategory] = useState("Pokemon")
  const [scrolled, setScrolled] = useState(false)

  useEffect(() => {
    const handleScroll = () => {
      const isScrolled = window.scrollY > 100
      if (isScrolled !== scrolled) {
        setScrolled(isScrolled)
      }
    }

    window.addEventListener("scroll", handleScroll)
    return () => {
      window.removeEventListener("scroll", handleScroll)
    }
  }, [scrolled])

  return (
    <div className="relative">
      {/* Category Hero Section */}
      <div className="relative overflow-hidden">
        <div className="absolute inset-0 bg-gradient-to-br from-[#6C63FF]/10 to-[#5D51FF]/20 dark:from-[#1A1A1A] dark:to-[#121212] -z-10"></div>

        {/* Pokemon-themed background elements */}
        {selectedCategory === "Pokemon" && (
          <>
            <div className="absolute top-1/4 left-1/4 w-64 h-64 rounded-full bg-[#E4E1FF] dark:bg-[#2A2A2A] blur-3xl opacity-30 animate-float -z-10"></div>
            <div className="absolute bottom-1/4 right-1/3 w-80 h-80 rounded-full bg-[#6C63FF] dark:bg-[#1A1A1A] blur-3xl opacity-20 animate-float-delayed -z-10"></div>

            {/* Pokemon silhouettes */}
            <div className="absolute top-20 right-[10%] w-32 h-32 opacity-10 dark:opacity-5 -z-5">
              <svg viewBox="0 0 100 100" className="w-full h-full">
                <path
                  d="M25,75 C25,91.5 41.5,91.5 50,83 C58.5,91.5 75,91.5 75,75 C75,58.5 58.5,58.5 50,67 C41.5,58.5 25,58.5 25,75 Z"
                  fill="currentColor"
                />
              </svg>
            </div>
            <div className="absolute bottom-10 left-[15%] w-24 h-24 opacity-10 dark:opacity-5 -z-5">
              <svg viewBox="0 0 100 100" className="w-full h-full">
                <circle cx="50" cy="50" r="40" fill="none" stroke="currentColor" strokeWidth="8" />
                <line x1="50" y1="10" x2="50" y2="90" stroke="currentColor" strokeWidth="8" />
                <circle cx="50" cy="50" r="15" fill="currentColor" />
              </svg>
            </div>
          </>
        )}

        <div className="max-w-7xl mx-auto px-4 py-12">
          <motion.h1
            className="text-4xl md:text-5xl font-bold text-center mb-4 bg-gradient-to-r from-[#6C63FF] to-[#5D51FF] dark:from-[#8075FF] dark:to-[#6C63FF] text-transparent bg-clip-text"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            {selectedCategory} Trading Cards
          </motion.h1>
          <motion.p
            className="text-lg text-center text-[#121F3D]/80 dark:text-[#B6B8CF] max-w-2xl mx-auto mb-8"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.1 }}
          >
            Authentic physical cards with digital verification
          </motion.p>
        </div>
      </div>

      {/* Category Navigation */}
      <div
        className={cn(
          "sticky top-20 z-30 bg-white/80 dark:bg-black/80 backdrop-blur-md transition-all duration-300 py-4",
          scrolled && "shadow-md",
        )}
      >
        <div className="max-w-7xl mx-auto px-4">
          <div className="flex flex-col space-y-4">
            {/* Category Pills */}
            <div className="flex overflow-x-auto pb-2 hide-scrollbar">
              <div className="flex space-x-2">
                {categories.map((category) => (
                  <Button
                    key={category.name}
                    variant={category.name === selectedCategory ? "default" : "outline"}
                    className={cn(
                      "rounded-full whitespace-nowrap",
                      category.name === selectedCategory
                        ? "bg-gradient-to-r from-[#6C63FF] to-[#5D51FF] dark:from-[#8075FF] dark:to-[#6C63FF] text-white"
                        : "text-[#121F3D] dark:text-[#E0E0E0]",
                    )}
                    onClick={() => setSelectedCategory(category.name)}
                  >
                    {category.name === "Pokemon" && (
                      <div className="mr-2 relative w-5 h-5">
                        <div className="absolute inset-0 rounded-full bg-white dark:bg-[#1A1A1A] border-2 border-current"></div>
                        <div className="absolute inset-[30%] rounded-full bg-current"></div>
                      </div>
                    )}
                    {category.name}
                  </Button>
                ))}
              </div>
            </div>

            {/* Search Bar */}
            <div className="relative">
              <div
                className={cn(
                  "flex items-center bg-white dark:bg-[#1A1A1A] rounded-full border border-[#E4E1FF] dark:border-[#2A2A2A] overflow-hidden transition-all duration-300",
                  searchFocused ? "ring-2 ring-[#6C63FF] dark:ring-[#8075FF]" : "",
                )}
              >
                <Search className="h-5 w-5 text-[#6C63FF] dark:text-[#8075FF] ml-4" />
                <Input
                  type="text"
                  placeholder={`Search ${selectedCategory} cards...`}
                  className="flex-1 border-0 bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0 text-[#121F3D] dark:text-[#E0E0E0] placeholder:text-[#121F3D]/50 dark:placeholder:text-[#E0E0E0]/50"
                  onFocus={() => setSearchFocused(true)}
                  onBlur={() => setSearchFocused(false)}
                />
                <Button variant="ghost" size="icon" className="rounded-full mr-1">
                  <Mic className="h-5 w-5 text-[#6C63FF] dark:text-[#8075FF]" />
                </Button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

```

`/home/sam/hack-pro/Vynix-v0/components/marketplace/marketplace-filters.tsx`:

```tsx
"use client"

import { useState } from "react"
import { motion, AnimatePresence } from "framer-motion"
import { ChevronDown, ChevronUp, X, SlidersHorizontal } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Slider } from "@/components/ui/slider"
import { cn } from "@/lib/utils"

interface FilterOption {
  label: string
  value: string
  count?: number
}

interface FilterCategory {
  name: string
  options: FilterOption[]
}

const filterCategories: FilterCategory[] = [
  {
    name: "Card Series",
    options: [
      { label: "Base Set", value: "base-set", count: 102 },
      { label: "Jungle", value: "jungle", count: 64 },
      { label: "Fossil", value: "fossil", count: 62 },
      { label: "Team Rocket", value: "team-rocket", count: 83 },
      { label: "Gym Heroes", value: "gym-heroes", count: 132 },
    ],
  },
  {
    name: "Rarity",
    options: [
      { label: "Common", value: "common", count: 245 },
      { label: "Uncommon", value: "uncommon", count: 187 },
      { label: "Rare", value: "rare", count: 96 },
      { label: "Holo Rare", value: "holo-rare", count: 52 },
      { label: "Ultra Rare", value: "ultra-rare", count: 28 },
    ],
  },
  {
    name: "Card Type",
    options: [
      { label: "Pokémon", value: "pokemon", count: 412 },
      { label: "Energy", value: "energy", count: 87 },
      { label: "Trainer", value: "trainer", count: 109 },
    ],
  },
  {
    name: "Condition",
    options: [
      { label: "PSA 10", value: "psa-10", count: 42 },
      { label: "PSA 9", value: "psa-9", count: 78 },
      { label: "PSA 8", value: "psa-8", count: 124 },
      { label: "BGS 9.5", value: "bgs-9.5", count: 36 },
      { label: "Raw", value: "raw", count: 328 },
    ],
  },
]

export function MarketplaceFilters() {
  const [activeFilters, setActiveFilters] = useState<Record<string, string[]>>({})
  const [priceRange, setPriceRange] = useState([0, 1000])
  const [expandedCategory, setExpandedCategory] = useState<string | null>(null)
  const [sortOption, setSortOption] = useState("recently-listed")
  const [viewMode, setViewMode] = useState("grid")
  const [isFilterExpanded, setIsFilterExpanded] = useState(true)

  const handleFilterToggle = (category: string, value: string) => {
    setActiveFilters((prev) => {
      const current = prev[category] || []
      if (current.includes(value)) {
        return {
          ...prev,
          [category]: current.filter((v) => v !== value),
        }
      } else {
        return {
          ...prev,
          [category]: [...current, value],
        }
      }
    })
  }

  const handleClearFilter = (category: string, value: string) => {
    setActiveFilters((prev) => ({
      ...prev,
      [category]: (prev[category] || []).filter((v) => v !== value),
    }))
  }

  const handleClearAllFilters = () => {
    setActiveFilters({})
    setPriceRange([0, 1000])
  }

  const totalActiveFilters =
    Object.values(activeFilters).flat().length + (priceRange[0] > 0 || priceRange[1] < 1000 ? 1 : 0)

  const sortOptions = [
    { label: "Recently Listed", value: "recently-listed" },
    { label: "Price: Low to High", value: "price-asc" },
    { label: "Price: High to Low", value: "price-desc" },
    { label: "Popularity", value: "popularity" },
    { label: "Rarity", value: "rarity" },
    { label: "Ending Soon", value: "ending-soon" },
  ]

  return (
    <div className="mb-8">
      <div className="flex items-center justify-between mb-4">
        <Button
          variant="outline"
          className="rounded-full flex items-center gap-2"
          onClick={() => setIsFilterExpanded(!isFilterExpanded)}
        >
          <SlidersHorizontal className="h-4 w-4" />
          Filters
          {totalActiveFilters > 0 && (
            <span className="bg-[#6C63FF] dark:bg-[#8075FF] text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
              {totalActiveFilters}
            </span>
          )}
          {isFilterExpanded ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />}
        </Button>

        <div className="flex items-center gap-2">
          <div className="text-sm text-[#121F3D]/70 dark:text-[#B6B8CF]">608 results</div>

          <div className="relative group">
            <Button variant="outline" className="rounded-full flex items-center gap-2">
              Sort: {sortOptions.find((o) => o.value === sortOption)?.label}
              <ChevronDown className="h-4 w-4" />
            </Button>
            <div className="absolute right-0 mt-2 w-48 rounded-xl bg-white dark:bg-[#1A1A1A] shadow-lg border border-[#E4E1FF] dark:border-[#2A2A2A] p-2 hidden group-hover:block z-10">
              {sortOptions.map((option) => (
                <button
                  key={option.value}
                  className={cn(
                    "w-full text-left px-3 py-2 rounded-lg text-sm",
                    sortOption === option.value
                      ? "bg-[#E4E1FF] dark:bg-[#322F5D] text-[#6C63FF] dark:text-[#8075FF]"
                      : "hover:bg-[#F8F9FF] dark:hover:bg-[#1A1A1A] text-[#121F3D] dark:text-[#E0E0E0]",
                  )}
                  onClick={() => setSortOption(option.value)}
                >
                  {option.label}
                </button>
              ))}
            </div>
          </div>
        </div>
      </div>

      <AnimatePresence>
        {isFilterExpanded && (
          <motion.div
            initial={{ height: 0, opacity: 0 }}
            animate={{ height: "auto", opacity: 1 }}
            exit={{ height: 0, opacity: 0 }}
            transition={{ duration: 0.3 }}
            className="overflow-hidden"
          >
            <div className="bg-white dark:bg-[#1A1A1A] rounded-2xl p-4 border border-[#E4E1FF] dark:border-[#2A2A2A] mb-4">
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
                {filterCategories.map((category) => (
                  <div key={category.name} className="space-y-2">
                    <div
                      className="font-medium text-[#121F3D] dark:text-[#E0E0E0] flex items-center justify-between cursor-pointer"
                      onClick={() => setExpandedCategory(expandedCategory === category.name ? null : category.name)}
                    >
                      {category.name}
                      {expandedCategory === category.name ? (
                        <ChevronUp className="h-4 w-4" />
                      ) : (
                        <ChevronDown className="h-4 w-4" />
                      )}
                    </div>

                    <AnimatePresence>
                      {(expandedCategory === category.name || expandedCategory === null) && (
                        <motion.div
                          initial={expandedCategory !== null ? { height: 0, opacity: 0 } : false}
                          animate={{ height: "auto", opacity: 1 }}
                          exit={{ height: 0, opacity: 0 }}
                          transition={{ duration: 0.2 }}
                          className="space-y-1 overflow-hidden"
                        >
                          {category.options.map((option) => (
                            <div key={option.value} className="flex items-center">
                              <input
                                type="checkbox"
                                id={option.value}
                                checked={(activeFilters[category.name] || []).includes(option.value)}
                                onChange={() => handleFilterToggle(category.name, option.value)}
                                className="rounded-sm text-[#6C63FF] dark:text-[#8075FF] focus:ring-[#6C63FF] dark:focus:ring-[#8075FF]"
                              />
                              <label
                                htmlFor={option.value}
                                className="ml-2 text-sm text-[#121F3D]/80 dark:text-[#B6B8CF] flex-1 cursor-pointer"
                              >
                                {option.label}
                              </label>
                              <span className="text-xs text-[#121F3D]/50 dark:text-[#B6B8CF]/50">{option.count}</span>
                            </div>
                          ))}
                        </motion.div>
                      )}
                    </AnimatePresence>
                  </div>
                ))}

                <div className="space-y-2">
                  <div className="font-medium text-[#121F3D] dark:text-[#E0E0E0]">Price Range</div>
                  <div className="px-2">
                    <Slider
                      defaultValue={[0, 1000]}
                      max={1000}
                      step={10}
                      value={priceRange}
                      onValueChange={setPriceRange}
                      className="py-4"
                    />
                    <div className="flex justify-between text-sm text-[#121F3D]/80 dark:text-[#B6B8CF]">
                      <span>${priceRange[0]}</span>
                      <span>${priceRange[1]}</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Active Filters */}
            {totalActiveFilters > 0 && (
              <div className="flex flex-wrap gap-2 mb-4">
                {Object.entries(activeFilters).flatMap(([category, values]) =>
                  values.map((value) => {
                    const option = filterCategories
                      .find((c) => c.name === category)
                      ?.options.find((o) => o.value === value)

                    return option ? (
                      <div
                        key={`${category}-${value}`}
                        className="bg-[#E4E1FF] dark:bg-[#322F5D] text-[#6C63FF] dark:text-[#8075FF] rounded-full px-3 py-1 text-sm flex items-center gap-1"
                      >
                        {option.label}
                        <button onClick={() => handleClearFilter(category, value)}>
                          <X className="h-3 w-3" />
                        </button>
                      </div>
                    ) : null
                  }),
                )}

                {(priceRange[0] > 0 || priceRange[1] < 1000) && (
                  <div className="bg-[#E4E1FF] dark:bg-[#322F5D] text-[#6C63FF] dark:text-[#8075FF] rounded-full px-3 py-1 text-sm flex items-center gap-1">
                    ${priceRange[0]} - ${priceRange[1]}
                    <button onClick={() => setPriceRange([0, 1000])}>
                      <X className="h-3 w-3" />
                    </button>
                  </div>
                )}

                <Button
                  variant="ghost"
                  size="sm"
                  className="rounded-full text-[#6C63FF] dark:text-[#8075FF] hover:bg-[#E4E1FF] dark:hover:bg-[#322F5D]"
                  onClick={handleClearAllFilters}
                >
                  Clear All
                </Button>
              </div>
            )}
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  )
}

```

`/home/sam/hack-pro/Vynix-v0/components/marketplace/marketplace-featured.tsx`:

```tsx
"use client"

import { useState } from "react"
import Image from "next/image"
import { motion } from "framer-motion"
import { Clock, Heart, Eye, ChevronDown, ChevronUp } from "lucide-react"
import { Button } from "@/components/ui/button"
import { cn } from "@/lib/utils"

const featuredCards = [
  {
    id: "1",
    name: "Charizard",
    set: "Base Set",
    image: "/fiery-dragon-card.png",
    rarity: "Holo Rare",
    condition: "PSA 9",
    price: 12500,
    auction: true,
    timeLeft: "2d 5h",
    bids: 24,
    type: "holographic",
  },
  {
    id: "2",
    name: "Pikachu Illustrator",
    set: "Promo",
    image: "/electric-mouse-art.png",
    rarity: "Ultra Rare",
    condition: "BGS 9",
    price: 375000,
    auction: false,
    type: "full-art",
  },
  {
    id: "3",
    name: "Lugia 1st Edition",
    set: "Neo Genesis",
    image: "/swirling-sea-guardian.png",
    rarity: "Holo Rare",
    condition: "PSA 10",
    price: 28500,
    auction: true,
    timeLeft: "4d 12h",
    bids: 18,
    type: "holographic",
  },
]

export function MarketplaceFeatured() {
  const [expanded, setExpanded] = useState(true)
  const [likedCards, setLikedCards] = useState<string[]>([])

  const toggleLike = (id: string) => {
    setLikedCards((prev) => (prev.includes(id) ? prev.filter((cardId) => cardId !== id) : [...prev, id]))
  }

  return (
    <div className="mb-12">
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-2xl font-bold text-[#121F3D] dark:text-[#E8E6FF]">Featured Cards</h2>
        <Button variant="ghost" size="sm" className="rounded-full" onClick={() => setExpanded(!expanded)}>
          {expanded ? (
            <>
              <ChevronUp className="h-4 w-4 mr-1" />
              Collapse
            </>
          ) : (
            <>
              <ChevronDown className="h-4 w-4 mr-1" />
              Expand
            </>
          )}
        </Button>
      </div>

      {expanded && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {featuredCards.map((card) => (
            <motion.div
              key={card.id}
              className="group relative"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
              whileHover={{ y: -8, transition: { duration: 0.2 } }}
            >
              <div className="relative bg-white dark:bg-[#1A1C36] rounded-3xl overflow-hidden shadow-lg dark:shadow-[#352F7E]/20 hover:shadow-xl dark:hover:shadow-[#352F7E]/30 border border-transparent dark:border-[#352F7E]/20 p-4">
                {/* Premium indicator */}
                <div className="absolute top-3 left-3 bg-gradient-to-r from-[#FFD166] to-[#FF6B6B] dark:from-[#FFE066] dark:to-[#FF7E7E] text-white px-3 py-1 rounded-full text-xs font-medium z-10">
                  Featured
                </div>

                {/* Card image with proper aspect ratio */}
                <div className="relative h-[350px] w-[250px] mx-auto mb-4 perspective-card group-hover:transform-card">
                  <div
                    className={cn(
                      "absolute inset-0 rounded-lg overflow-hidden shadow-md",
                      card.type === "holographic" && "holographic-effect",
                      card.type === "full-art" && "full-art-effect",
                    )}
                  >
                    <Image src={card.image || "/placeholder.svg"} alt={card.name} fill className="object-cover" />

                    {/* Quick view overlay */}
                    <div className="absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-all duration-300 flex items-center justify-center opacity-0 group-hover:opacity-100">
                      <Button
                        variant="secondary"
                        size="sm"
                        className="rounded-full bg-white/80 dark:bg-black/50 backdrop-blur-sm"
                      >
                        <Eye className="h-4 w-4 mr-1" />
                        Quick View
                      </Button>
                    </div>
                  </div>
                </div>

                {/* Card details */}
                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <h3 className="font-bold text-xl text-[#121F3D] dark:text-[#E8E6FF]">{card.name}</h3>
                    <Button variant="ghost" size="icon" className="rounded-full" onClick={() => toggleLike(card.id)}>
                      <Heart
                        className={cn(
                          "h-5 w-5 transition-all duration-300",
                          likedCards.includes(card.id)
                            ? "fill-[#FF6B6B] text-[#FF6B6B] scale-110"
                            : "text-[#121F3D]/50 dark:text-[#B6B8CF]/50",
                        )}
                      />
                    </Button>
                  </div>

                  <div className="flex items-center text-sm text-[#121F3D]/70 dark:text-[#B6B8CF]">
                    <div className="bg-[#E4E1FF] dark:bg-[#322F5D] h-5 w-5 rounded-full mr-2 flex items-center justify-center text-xs">
                      <span className="text-[#6C63FF] dark:text-[#8075FF]">S</span>
                    </div>
                    {card.set}
                  </div>

                  <div className="flex items-center justify-between">
                    <div className="flex items-center">
                      <div className="bg-[#FFD166] dark:bg-[#FFE066] text-[#121F3D] px-2 py-0.5 rounded-full text-xs font-medium">
                        {card.rarity}
                      </div>
                      <div className="ml-2 bg-[#E4E1FF] dark:bg-[#322F5D] text-[#6C63FF] dark:text-[#8075FF] px-2 py-0.5 rounded-full text-xs font-medium">
                        {card.condition}
                      </div>
                    </div>
                  </div>

                  {card.auction ? (
                    <div className="mt-2 space-y-2">
                      <div className="flex items-center justify-between">
                        <div className="text-sm text-[#121F3D]/70 dark:text-[#B6B8CF]">Current Bid</div>
                        <div className="font-bold text-[#121F3D] dark:text-[#E8E6FF]">
                          ${card.price.toLocaleString()}
                        </div>
                      </div>
                      <div className="flex items-center justify-between text-sm text-[#121F3D]/70 dark:text-[#B6B8CF]">
                        <div className="flex items-center">
                          <Clock className="h-4 w-4 mr-1" />
                          {card.timeLeft}
                        </div>
                        <div>{card.bids} bids</div>
                      </div>
                      <Button className="w-full rounded-full text-white bg-gradient-to-r from-[#6C63FF] to-[#5D51FF] dark:from-[#8075FF] dark:to-[#6C63FF] hover:from-[#5D51FF] hover:to-[#6C63FF]">
                        Place Bid
                      </Button>
                    </div>
                  ) : (
                    <div className="mt-2 space-y-2">
                      <div className="flex items-center justify-between">
                        <div className="text-sm text-[#121F3D]/70 dark:text-[#B6B8CF]">Price</div>
                        <div className="font-bold text-[#121F3D] dark:text-[#E8E6FF]">
                          ${card.price.toLocaleString()}
                        </div>
                      </div>
                      <Button className="w-full rounded-full text-white bg-gradient-to-r from-[#6C63FF] to-[#5D51FF] dark:from-[#8075FF] dark:to-[#6C63FF] hover:from-[#5D51FF] hover:to-[#6C63FF]">
                        Buy Now
                      </Button>
                    </div>
                  )}
                </div>

                {/* Authentication badge */}
                <div className="absolute bottom-4 right-4">
                  <div className="bg-[#4ECCA3] dark:bg-[#5DDFB8] rounded-full p-1">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path
                        d="M9 12L11 14L15 10M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z"
                        stroke="white"
                        strokeWidth="2"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                      />
                    </svg>
                  </div>
                </div>
              </div>
            </motion.div>
          ))}
        </div>
      )}
    </div>
  )
}

```

`/home/sam/hack-pro/Vynix-v0/components/marketplace/marketplace-grid.tsx`:

```tsx
"use client"

import type React from "react"

import { useState, useRef, useEffect } from "react"
import Image from "next/image"
import { motion, useMotionValue, useTransform, useSpring, useInView } from "framer-motion"
import { Heart, Eye, ArrowUp } from "lucide-react"
import { Button } from "@/components/ui/button"
import { cn } from "@/lib/utils"

// Generate mock card data
const generateCards = (count: number) => {
  const cardTypes = ["normal", "holographic", "full-art", "reverse-holo", "gold"]
  const rarities = ["Common", "Uncommon", "Rare", "Holo Rare", "Ultra Rare"]
  const conditions = ["PSA 10", "PSA 9", "PSA 8", "BGS 9.5", "Raw"]
  const sets = ["Base Set", "Jungle", "Fossil", "Team Rocket", "Gym Heroes", "Neo Genesis"]
  const pokemonNames = [
    "Pikachu",
    "Charizard",
    "Blastoise",
    "Venusaur",
    "Mewtwo",
    "Mew",
    "Gyarados",
    "Dragonite",
    "Gengar",
    "Alakazam",
    "Machamp",
    "Zapdos",
    "Articuno",
    "Moltres",
    "Snorlax",
    "Lapras",
    "Vaporeon",
    "Jolteon",
    "Flareon",
    "Eevee",
  ]

  return Array.from({ length: count }, (_, i) => {
    const id = (i + 1).toString()
    const name = pokemonNames[Math.floor(Math.random() * pokemonNames.length)]
    const set = sets[Math.floor(Math.random() * sets.length)]
    const rarity = rarities[Math.floor(Math.random() * rarities.length)]
    const condition = conditions[Math.floor(Math.random() * conditions.length)]
    const type = cardTypes[Math.floor(Math.random() * cardTypes.length)]
    const price = Math.floor(Math.random() * 10000) + 10
    const auction = Math.random() > 0.7
    const timeLeft = `${Math.floor(Math.random() * 3) + 1}d ${Math.floor(Math.random() * 23) + 1}h`
    const bids = Math.floor(Math.random() * 30) + 1
    const hot = Math.random() > 0.8
    const justSold = !auction && Math.random() > 0.9
    const recentPriceChange = Math.random() > 0.8

    return {
      id,
      name,
      set,
      image: `/placeholder.svg?height=350&width=250&query=${name} pokemon card`,
      rarity,
      condition,
      price,
      auction,
      timeLeft: auction ? timeLeft : undefined,
      bids: auction ? bids : undefined,
      type,
      hot,
      justSold,
      recentPriceChange,
      viewers: hot ? Math.floor(Math.random() * 10) + 3 : undefined,
    }
  })
}

const cards = generateCards(24)

interface CardProps {
  card: any
  onLike: (id: string) => void
  isLiked: boolean
}

function Card({ card, onLike, isLiked }: CardProps) {
  const ref = useRef<HTMLDivElement>(null)
  const isInView = useInView(ref, { once: true, margin: "0px 0px -100px 0px" })

  // 3D tilt effect
  const x = useMotionValue(0)
  const y = useMotionValue(0)

  const rotateX = useTransform(y, [-100, 100], [10, -10])
  const rotateY = useTransform(x, [-100, 100], [-10, 10])

  const springConfig = { stiffness: 300, damping: 30 }
  const springRotateX = useSpring(rotateX, springConfig)
  const springRotateY = useSpring(rotateY, springConfig)

  function handleMouseMove(e: React.MouseEvent<HTMLDivElement>) {
    const rect = e.currentTarget.getBoundingClientRect()
    const centerX = rect.left + rect.width / 2
    const centerY = rect.top + rect.height / 2

    x.set(e.clientX - centerX)
    y.set(e.clientY - centerY)
  }

  function handleMouseLeave() {
    x.set(0)
    y.set(0)
  }

  return (
    <motion.div
      ref={ref}
      className="group relative"
      initial={{ opacity: 0, y: 20 }}
      animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 20 }}
      transition={{ duration: 0.5 }}
      onMouseMove={handleMouseMove}
      onMouseLeave={handleMouseLeave}
      style={{
        perspective: 1000,
      }}
    >
      <motion.div
        className="relative bg-white dark:bg-[#1A1A1A] rounded-2xl overflow-hidden shadow-md dark:shadow-[#352F7E]/10 hover:shadow-lg dark:hover:shadow-[#352F7E]/20 border border-transparent dark:border-[#2A2A2A]/50 p-3"
        style={{
          rotateX: springRotateX,
          rotateY: springRotateY,
          transformStyle: "preserve-3d",
        }}
      >
        {/* Status indicators */}
        {card.hot && (
          <div className="absolute top-3 left-3 bg-[#FF6B6B] dark:bg-[#FF7E7E] text-white px-2 py-0.5 rounded-full text-xs font-medium z-10 flex items-center">
            <span className="h-1.5 w-1.5 bg-white rounded-full mr-1 animate-pulse"></span>
            Hot
          </div>
        )}

        {card.justSold && (
          <div className="absolute top-0 left-0 right-0 bg-[#4ECCA3] dark:bg-[#5DDFB8] text-white py-1 text-xs font-medium text-center z-10">
            Just Sold
          </div>
        )}

        {/* Card image with proper aspect ratio */}
        <div className="relative h-[200px] w-[143px] mx-auto mb-3">
          <div
            className={cn(
              "absolute inset-0 rounded-lg overflow-hidden shadow-sm",
              card.type === "holographic" && "holographic-effect",
              card.type === "full-art" && "full-art-effect",
              card.type === "gold" && "gold-effect",
              card.type === "reverse-holo" && "reverse-holo-effect",
            )}
          >
            <Image src={card.image || "/placeholder.svg"} alt={card.name} fill className="object-cover" />

            {/* Quick view overlay */}
            <div className="absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-all duration-300 flex items-center justify-center opacity-0 group-hover:opacity-100">
              <Button
                variant="secondary"
                size="sm"
                className="rounded-full bg-white/80 dark:bg-black/50 backdrop-blur-sm scale-90 group-hover:scale-100 transition-transform"
              >
                <Eye className="h-3 w-3 mr-1" />
                Quick View
              </Button>
            </div>
          </div>
        </div>

        {/* Card details */}
        <div className="space-y-1">
          <div className="flex items-center justify-between">
            <h3 className="font-bold text-[#121F3D] dark:text-[#E0E0E0] truncate max-w-[80%]">{card.name}</h3>
            <Button variant="ghost" size="icon" className="h-6 w-6 rounded-full" onClick={() => onLike(card.id)}>
              <Heart
                className={cn(
                  "h-4 w-4 transition-all duration-300",
                  isLiked ? "fill-[#FF6B6B] text-[#FF6B6B] scale-110" : "text-[#121F3D]/50 dark:text-[#B6B8CF]/50",
                )}
              />
            </Button>
          </div>

          <div className="flex items-center text-xs text-[#121F3D]/70 dark:text-[#B6B8CF]">
            <div className="bg-[#E4E1FF] dark:bg-[#2A2A2A] h-4 w-4 rounded-full mr-1.5 flex items-center justify-center text-[10px]">
              <span className="text-[#6C63FF] dark:text-[#8075FF]">S</span>
            </div>
            {card.set}
          </div>

          <div className="flex items-center gap-1.5">
            <div className="bg-[#FFD166] dark:bg-[#FFE066] text-[#121F3D] px-1.5 py-0.5 rounded-full text-[10px] font-medium">
              {card.rarity}
            </div>
            <div className="bg-[#E4E1FF] dark:bg-[#2A2A2A] text-[#6C63FF] dark:text-[#8075FF] px-1.5 py-0.5 rounded-full text-[10px] font-medium">
              {card.condition}
            </div>
          </div>

          {card.auction ? (
            <div className="pt-1 space-y-1">
              <div className="flex items-center justify-between">
                <div className="text-xs text-[#121F3D]/70 dark:text-[#B6B8CF]">Current Bid</div>
                <div className="font-bold text-sm text-[#121F3D] dark:text-[#E0E0E0]">${card.price}</div>
              </div>
              <div className="flex items-center justify-between text-[10px] text-[#121F3D]/70 dark:text-[#B6B8CF]">
                <div className="flex items-center">
                  <svg
                    width="12"
                    height="12"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                    className="mr-1"
                  >
                    <path
                      d="M12 6V12L16 14M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12Z"
                      stroke="currentColor"
                      strokeWidth="2"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    />
                  </svg>
                  {card.timeLeft}
                </div>
                <div>{card.bids} bids</div>
              </div>
              <Button className="w-full h-7 rounded-full text-xs text-white bg-gradient-to-r from-[#6C63FF] to-[#5D51FF] dark:from-[#8075FF] dark:to-[#6C63FF] hover:from-[#5D51FF] hover:to-[#6C63FF]">
                Place Bid
              </Button>
            </div>
          ) : (
            <div className="pt-1 space-y-1">
              <div className="flex items-center justify-between">
                <div className="text-xs text-[#121F3D]/70 dark:text-[#B6B8CF]">Price</div>
                <div className="flex items-center">
                  <div className="font-bold text-sm text-[#121F3D] dark:text-[#E0E0E0]">${card.price}</div>
                  {card.recentPriceChange && (
                    <div className="ml-1 text-[10px] text-[#4ECCA3] dark:text-[#5DDFB8] flex items-center">
                      <ArrowUp className="h-2 w-2 mr-0.5" />
                      5%
                    </div>
                  )}
                </div>
              </div>
              <Button className="w-full h-7 rounded-full text-xs text-white bg-gradient-to-r from-[#6C63FF] to-[#5D51FF] dark:from-[#8075FF] dark:to-[#6C63FF] hover:from-[#5D51FF] hover:to-[#6C63FF]">
                Buy Now
              </Button>
            </div>
          )}
        </div>

        {/* Authentication badge */}
        <div className="absolute bottom-3 right-3">
          <div className="bg-[#4ECCA3] dark:bg-[#5DDFB8] rounded-full p-0.5">
            <svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path
                d="M9 12L11 14L15 10M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z"
                stroke="white"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
            </svg>
          </div>
        </div>

        {/* Viewers indicator */}
        {card.viewers && (
          <div className="absolute top-3 right-3 bg-white/80 dark:bg-black/50 backdrop-blur-sm rounded-full px-2 py-0.5 text-[10px] font-medium text-[#121F3D] dark:text-[#E0E0E0] flex items-center">
            <Eye className="h-3 w-3 mr-1 text-[#6C63FF] dark:text-[#8075FF]" />
            {card.viewers} viewing
          </div>
        )}
      </motion.div>
    </motion.div>
  )
}

export function MarketplaceGrid() {
  const [likedCards, setLikedCards] = useState<string[]>([])
  const [showBackToTop, setShowBackToTop] = useState(false)

  const handleLike = (id: string) => {
    setLikedCards((prev) => (prev.includes(id) ? prev.filter((cardId) => cardId !== id) : [...prev, id]))
  }

  useEffect(() => {
    const handleScroll = () => {
      setShowBackToTop(window.scrollY > 500)
    }

    window.addEventListener("scroll", handleScroll)
    return () => window.removeEventListener("scroll", handleScroll)
  }, [])

  const scrollToTop = () => {
    window.scrollTo({ top: 0, behavior: "smooth" })
  }

  return (
    <div>
      <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4 md:gap-6">
        {cards.map((card) => (
          <Card key={card.id} card={card} onLike={handleLike} isLiked={likedCards.includes(card.id)} />
        ))}
      </div>

      {/* Load more button */}
      <div className="mt-12 text-center">
        <Button
          variant="outline"
          className="rounded-full border-[#6C63FF] dark:border-[#8075FF] text-[#6C63FF] dark:text-[#8075FF] hover:bg-[#E4E1FF] dark:hover:bg-[#1A1A1A]"
        >
          Load More Cards
        </Button>
      </div>

      {/* Back to top button */}
      {showBackToTop && (
        <motion.button
          className="fixed bottom-8 right-8 bg-white dark:bg-[#1A1A1A] shadow-lg dark:shadow-[#352F7E]/20 rounded-full p-3 z-50"
          onClick={scrollToTop}
          initial={{ opacity: 0, scale: 0.8 }}
          animate={{ opacity: 1, scale: 1 }}
          exit={{ opacity: 0, scale: 0.8 }}
          whileHover={{ y: -5 }}
          transition={{ duration: 0.2 }}
        >
          <ArrowUp className="h-5 w-5 text-[#6C63FF] dark:text-[#8075FF]" />
        </motion.button>
      )}
    </div>
  )
}

```

`/home/sam/hack-pro/Vynix-v0/components/marketplace/marketplace-loading.tsx`:

```tsx
import { Skeleton } from "@/components/ui/skeleton"

export function MarketplaceLoading() {
  return (
    <div>
      {/* Featured cards loading */}
      <div className="mb-12">
        <div className="flex items-center justify-between mb-6">
          <Skeleton className="h-8 w-48" />
          <Skeleton className="h-8 w-24" />
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {[1, 2, 3].map((i) => (
            <div key={i} className="bg-white dark:bg-[#1A1A1A] rounded-3xl p-4 shadow-md">
              <Skeleton className="h-[350px] w-[250px] mx-auto mb-4 rounded-lg" />
              <Skeleton className="h-6 w-3/4 mb-2" />
              <Skeleton className="h-4 w-1/2 mb-2" />
              <div className="flex gap-2 mb-4">
                <Skeleton className="h-5 w-16 rounded-full" />
                <Skeleton className="h-5 w-16 rounded-full" />
              </div>
              <Skeleton className="h-4 w-full mb-2" />
              <Skeleton className="h-10 w-full rounded-full" />
            </div>
          ))}
        </div>
      </div>

      {/* Filters loading */}
      <div className="mb-8">
        <div className="flex items-center justify-between mb-4">
          <Skeleton className="h-10 w-32 rounded-full" />
          <div className="flex items-center gap-4">
            <Skeleton className="h-5 w-24" />
            <Skeleton className="h-10 w-40 rounded-full" />
          </div>
        </div>
        <Skeleton className="h-40 w-full rounded-2xl mb-4" />
      </div>

      {/* Cards grid loading */}
      <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4 md:gap-6">
        {Array.from({ length: 10 }).map((_, i) => (
          <div key={i} className="bg-white dark:bg-[#1A1A1A] rounded-2xl p-3 shadow-md">
            <Skeleton className="h-[200px] w-[143px] mx-auto mb-3 rounded-lg" />
            <Skeleton className="h-5 w-3/4 mb-2" />
            <Skeleton className="h-4 w-1/2 mb-2" />
            <div className="flex gap-1.5 mb-2">
              <Skeleton className="h-4 w-12 rounded-full" />
              <Skeleton className="h-4 w-12 rounded-full" />
            </div>
            <Skeleton className="h-4 w-full mb-2" />
            <Skeleton className="h-7 w-full rounded-full" />
          </div>
        ))}
      </div>
    </div>
  )
}

```

`/home/sam/hack-pro/Vynix-v0/components/marketplace/card-detail-3d.tsx`:

```tsx
"use client"

import type React from "react"
import { useRef, useState } from "react"
import Image from "next/image"
import { motion, useMotionValue, useTransform, useSpring } from "framer-motion"
import { cn } from "@/lib/utils"
import { ZoomIn, ZoomOut } from "lucide-react"
import { Button } from "@/components/ui/button"

interface CardDetail3DProps {
  image: string
  type?: "normal" | "holographic" | "full-art" | "reverse-holo" | "gold"
  isZoomed: boolean
  setIsZoomed: (isZoomed: boolean) => void
}

export function CardDetail3D({ image, type = "normal", isZoomed, setIsZoomed }: CardDetail3DProps) {
  const containerRef = useRef<HTMLDivElement>(null)
  const [position, setPosition] = useState({ x: 0, y: 0 })
  const [zoomPosition, setZoomPosition] = useState({ x: 0, y: 0 })
  const [isDragging, setIsDragging] = useState(false)

  // 3D tilt effect
  const x = useMotionValue(0)
  const y = useMotionValue(0)

  const rotateX = useTransform(y, [-100, 100], [8, -8])
  const rotateY = useTransform(x, [-100, 100], [-8, 8])

  const springConfig = { stiffness: 300, damping: 30 }
  const springRotateX = useSpring(rotateX, springConfig)
  const springRotateY = useSpring(rotateY, springConfig)

  function handleMouseMove(e: React.MouseEvent<HTMLDivElement>) {
    if (isZoomed) {
      // Handle zoom panning
      const rect = containerRef.current?.getBoundingClientRect()
      if (!rect) return

      const relativeX = e.clientX - rect.left
      const relativeY = e.clientY - rect.top

      const percentX = (relativeX / rect.width) * 100
      const percentY = (relativeY / rect.height) * 100

      setZoomPosition({ x: percentX, y: percentY })
    } else {
      // Handle 3D tilt effect
      const rect = e.currentTarget.getBoundingClientRect()
      const centerX = rect.left + rect.width / 2
      const centerY = rect.top + rect.height / 2

      x.set(e.clientX - centerX)
      y.set(e.clientY - centerY)
    }
  }

  function handleMouseLeave() {
    if (!isZoomed) {
      x.set(0)
      y.set(0)
    }
  }

  function handleMouseDown(e: React.MouseEvent<HTMLDivElement>) {
    if (isZoomed) {
      setIsDragging(true)
      setPosition({
        x: e.clientX - zoomPosition.x,
        y: e.clientY - zoomPosition.y,
      })
    }
  }

  function handleMouseUp() {
    if (isZoomed) {
      setIsDragging(false)
    }
  }

  return (
    <div
      className={cn("relative cursor-move transition-all duration-300", isZoomed ? "h-[600px]" : "h-[450px]")}
      ref={containerRef}
      onMouseMove={handleMouseMove}
      onMouseLeave={handleMouseLeave}
      onMouseDown={handleMouseDown}
      onMouseUp={handleMouseUp}
      style={{
        perspective: 1000,
      }}
    >
      {isZoomed ? (
        <div
          className="relative w-full h-full overflow-hidden rounded-xl"
          style={{
            cursor: isDragging ? "grabbing" : "grab",
          }}
        >
          <div
            className="absolute w-[200%] h-[200%]"
            style={{
              transform: `translate(${-zoomPosition.x}%, ${-zoomPosition.y}%)`,
            }}
          >
            <Image
              src={image || "/placeholder.svg"}
              alt="Card detail"
              fill
              className="object-cover"
              quality={100}
              priority
            />
          </div>
          <Button
            variant="secondary"
            size="sm"
            className="absolute bottom-4 right-4 rounded-full bg-black/50 backdrop-blur-sm text-white border border-white/10 hover:bg-black/70"
            onClick={(e) => {
              e.stopPropagation()
              setIsZoomed(false)
            }}
          >
            <ZoomOut className="h-4 w-4 mr-1" />
            Exit Zoom
          </Button>
        </div>
      ) : (
        <motion.div
          className={cn(
            "relative w-full h-full rounded-xl overflow-hidden shadow-lg shadow-[#352F7E]/20",
            type === "holographic" && "holographic-effect",
            type === "full-art" && "full-art-effect",
            type === "gold" && "gold-effect",
            type === "reverse-holo" && "reverse-holo-effect",
          )}
          style={{
            rotateX: springRotateX,
            rotateY: springRotateY,
            transformStyle: "preserve-3d",
          }}
        >
          <Image src={image || "/placeholder.svg"} alt="Card detail" fill className="object-contain" priority />
          <div className="absolute inset-0 bg-gradient-to-tr from-[#6C63FF]/5 to-transparent pointer-events-none"></div>
          <Button
            variant="secondary"
            size="sm"
            className="absolute bottom-4 right-4 rounded-full bg-black/50 backdrop-blur-sm text-white border border-white/10 hover:bg-black/70"
            onClick={(e) => {
              e.stopPropagation()
              setIsZoomed(true)
            }}
          >
            <ZoomIn className="h-4 w-4 mr-1" />
            Zoom
          </Button>
        </motion.div>
      )}
    </div>
  )
}

```

`/home/sam/hack-pro/Vynix-v0/components/marketplace/price-history-chart.tsx`:

```tsx
"use client"

import { useState } from "react"
import { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, ReferenceLine } from "recharts"

interface PriceHistoryChartProps {
  data: { date: string; price: number }[]
}

export function PriceHistoryChart({ data }: PriceHistoryChartProps) {
  const [activeFilter, setActiveFilter] = useState("all")

  // Find min, max, and average prices
  const prices = data.map((item) => item.price)
  const minPrice = Math.min(...prices)
  const maxPrice = Math.max(...prices)
  const avgPrice = prices.reduce((a, b) => a + b, 0) / prices.length

  // Format dates for display
  const formattedData = data.map((item) => {
    const [year, month] = item.date.split("-")
    const date = new Date(Number.parseInt(year), Number.parseInt(month) - 1)
    return {
      ...item,
      formattedDate: date.toLocaleDateString("en-US", { month: "short", year: "2-digit" }),
    }
  })

  return (
    <div>
      <div className="flex flex-wrap items-center justify-between mb-4 gap-4">
        <div className="grid grid-cols-3 gap-3">
          <div className="bg-[#0C0E1B]/80 backdrop-blur-md rounded-lg p-2 border border-[#352F7E]/20">
            <div className="text-xs text-[#B6B8CF]/70">Min</div>
            <div className="font-medium text-white">${minPrice.toLocaleString()}</div>
          </div>
          <div className="bg-[#0C0E1B]/80 backdrop-blur-md rounded-lg p-2 border border-[#352F7E]/20">
            <div className="text-xs text-[#B6B8CF]/70">Average</div>
            <div className="font-medium text-white">${Math.round(avgPrice).toLocaleString()}</div>
          </div>
          <div className="bg-[#0C0E1B]/80 backdrop-blur-md rounded-lg p-2 border border-[#352F7E]/20">
            <div className="text-xs text-[#B6B8CF]/70">Max</div>
            <div className="font-medium text-white">${maxPrice.toLocaleString()}</div>
          </div>
        </div>

        <div className="flex space-x-2 text-sm">
          {["all", "6m", "3m", "1m"].map((filter) => (
            <button
              key={filter}
              className={`px-3 py-1 rounded-full ${
                activeFilter === filter
                  ? "bg-[#8075FF] text-white"
                  : "bg-[#0C0E1B]/80 text-[#B6B8CF] hover:bg-[#322F5D]/50 border border-[#352F7E]/20"
              }`}
              onClick={() => setActiveFilter(filter)}
            >
              {filter === "all" ? "All" : filter}
            </button>
          ))}
        </div>
      </div>

      <div className="h-[200px] w-full">
        <ResponsiveContainer width="100%" height="100%">
          <AreaChart data={formattedData} margin={{ top: 5, right: 0, left: 0, bottom: 5 }}>
            <defs>
              <linearGradient id="colorPrice" x1="0" y1="0" x2="0" y2="1">
                <stop offset="5%" stopColor="#8075FF" stopOpacity={0.3} />
                <stop offset="95%" stopColor="#8075FF" stopOpacity={0} />
              </linearGradient>
            </defs>
            <CartesianGrid strokeDasharray="3 3" vertical={false} stroke="#352F7E" opacity={0.3} />
            <XAxis dataKey="formattedDate" tick={{ fontSize: 12, fill: "#B6B8CF" }} tickLine={false} axisLine={false} />
            <YAxis
              domain={[minPrice * 0.9, maxPrice * 1.1]}
              tickFormatter={(value) => `$${value.toLocaleString()}`}
              tick={{ fontSize: 12, fill: "#B6B8CF" }}
              tickLine={false}
              axisLine={false}
              width={60}
            />
            <Tooltip
              formatter={(value: number) => [`$${value.toLocaleString()}`, "Price"]}
              labelFormatter={(label) => `Date: ${label}`}
              contentStyle={{
                backgroundColor: "rgba(19, 21, 37, 0.9)",
                borderRadius: "8px",
                border: "1px solid rgba(53, 47, 126, 0.3)",
                color: "#FFFFFF",
                boxShadow: "0px 4px 10px rgba(0, 0, 0, 0.3)",
              }}
            />
            <ReferenceLine y={avgPrice} stroke="#8075FF" strokeDasharray="3 3">
              <label position="right" value="Average" fill="#8075FF" fontSize={12} />
            </ReferenceLine>
            <Area type="monotone" dataKey="price" stroke="#8075FF" fill="url(#colorPrice)" strokeWidth={2} />
          </AreaChart>
        </ResponsiveContainer>
      </div>

      <div className="flex justify-between text-xs text-[#B6B8CF]/70 mt-2">
        <div>Price history based on {data.length} sales</div>
        <div>Last updated: April 2023</div>
      </div>
    </div>
  )
}

```

`/home/sam/hack-pro/Vynix-v0/components/marketplace/card-carousel.tsx`:

```tsx
"use client"

import { useRef, useState } from "react"
import Image from "next/image"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { Button } from "@/components/ui/button"
import { cn } from "@/lib/utils"
import { motion } from "framer-motion"

interface Card {
  id: string
  name: string
  set: string
  image: string
  rarity: string
  condition: string
  price: number
  cardType: string
}

interface CardCarouselProps {
  cards: Card[]
}

export function CardCarousel({ cards }: CardCarouselProps) {
  const [activeIndex, setActiveIndex] = useState(0)
  const carouselRef = useRef<HTMLDivElement>(null)

  const scrollNext = () => {
    if (activeIndex < cards.length - 1) {
      setActiveIndex(activeIndex + 1)
      carouselRef.current?.scrollTo({
        left: (carouselRef.current.scrollWidth / cards.length) * (activeIndex + 1),
        behavior: "smooth",
      })
    }
  }

  const scrollPrev = () => {
    if (activeIndex > 0) {
      setActiveIndex(activeIndex - 1)
      carouselRef.current?.scrollTo({
        left: (carouselRef.current.scrollWidth / cards.length) * (activeIndex - 1),
        behavior: "smooth",
      })
    }
  }

  const handleScroll = () => {
    if (carouselRef.current) {
      const scrollLeft = carouselRef.current.scrollLeft
      const itemWidth = carouselRef.current.scrollWidth / cards.length
      const index = Math.round(scrollLeft / itemWidth)
      setActiveIndex(index)
    }
  }

  return (
    <div className="relative group">
      {/* Navigation buttons */}
      <Button
        variant="secondary"
        size="icon"
        className={cn(
          "absolute -left-4 top-1/2 -translate-y-1/2 z-10 h-8 w-8 rounded-full bg-[#0C0E1B]/80 border border-[#352F7E]/20 shadow-md opacity-0 group-hover:opacity-100 transition-opacity text-white",
          activeIndex === 0 ? "hidden" : "block",
        )}
        onClick={scrollPrev}
      >
        <ChevronLeft className="h-5 w-5" />
      </Button>

      <Button
        variant="secondary"
        size="icon"
        className={cn(
          "absolute -right-4 top-1/2 -translate-y-1/2 z-10 h-8 w-8 rounded-full bg-[#0C0E1B]/80 border border-[#352F7E]/20 shadow-md opacity-0 group-hover:opacity-100 transition-opacity text-white",
          activeIndex === cards.length - 1 ? "hidden" : "block",
        )}
        onClick={scrollNext}
      >
        <ChevronRight className="h-5 w-5" />
      </Button>

      {/* Carousel */}
      <div
        ref={carouselRef}
        className="flex overflow-x-auto hide-scrollbar pb-6 snap-x snap-mandatory scroll-smooth"
        onScroll={handleScroll}
      >
        {cards.map((card, index) => (
          <div key={card.id} className="min-w-[180px] max-w-[180px] mr-4 snap-start">
            <motion.div whileHover={{ y: -5 }} transition={{ duration: 0.2 }}>
              <div className="bg-[#0C0E1B]/80 backdrop-blur-md rounded-xl overflow-hidden shadow-md hover:shadow-lg border border-[#352F7E]/20">
                <div className="relative h-[220px] w-full">
                  <div
                    className={cn(
                      "absolute inset-0",
                      card.cardType === "holographic" && "holographic-effect",
                      card.cardType === "full-art" && "full-art-effect",
                    )}
                  >
                    <Image src={card.image || "/placeholder.svg"} alt={card.name} fill className="object-cover" />
                  </div>
                </div>
                <div className="p-3">
                  <h4 className="font-medium text-white truncate">{card.name}</h4>
                  <p className="text-xs text-[#B6B8CF] mb-2">{card.set}</p>
                  <div className="flex justify-between items-center">
                    <span className="text-xs font-medium bg-[#322F5D] text-[#8075FF] rounded-full px-2 py-0.5 border border-[#8075FF]/20">
                      {card.condition}
                    </span>
                    <span className="font-medium text-sm text-white">${card.price.toLocaleString()}</span>
                  </div>
                </div>
              </div>
            </motion.div>
          </div>
        ))}
      </div>

      {/* Indicators */}
      <div className="flex justify-center mt-2 space-x-1.5">
        {cards.map((_, index) => (
          <button
            key={index}
            className={`h-1.5 rounded-full transition-all ${
              activeIndex === index ? "w-4 bg-[#8075FF]" : "w-1.5 bg-[#352F7E]/30"
            }`}
            onClick={() => {
              setActiveIndex(index)
              carouselRef.current?.scrollTo({
                left: (carouselRef.current.scrollWidth / cards.length) * index,
                behavior: "smooth",
              })
            }}
          ></button>
        ))}
      </div>
    </div>
  )
}

```

`/home/sam/hack-pro/Vynix-v0/components/marketplace/card-listing-page.tsx`:

```tsx
"use client"

import type React from "react"

import { useState, useRef } from "react"
import Image from "next/image"
import { motion, AnimatePresence } from "framer-motion"
import { Upload, Camera, X, Check, Edit, Info, Sparkles, Clock, DollarSign, Tag, BarChart3 } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Slider } from "@/components/ui/slider"
import { Switch } from "@/components/ui/switch"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { cn } from "@/lib/utils"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"

// Mock data for card sets
const cardSets = [
  { id: "base", name: "Base Set" },
  { id: "jungle", name: "Jungle" },
  { id: "fossil", name: "Fossil" },
  { id: "team-rocket", name: "Team Rocket" },
  { id: "gym-heroes", name: "Gym Heroes" },
  { id: "neo-genesis", name: "Neo Genesis" },
]

// Mock data for card rarities
const cardRarities = [
  { id: "common", name: "Common" },
  { id: "uncommon", name: "Uncommon" },
  { id: "rare", name: "Rare" },
  { id: "holo-rare", name: "Holo Rare" },
  { id: "ultra-rare", name: "Ultra Rare" },
]

// Mock data for card conditions
const cardConditions = [
  { id: "mint", name: "Mint", grade: "PSA 10" },
  { id: "near-mint", name: "Near Mint", grade: "PSA 9" },
  { id: "excellent", name: "Excellent", grade: "PSA 8" },
  { id: "very-good", name: "Very Good", grade: "PSA 7" },
  { id: "good", name: "Good", grade: "PSA 6" },
]

// Mock data for blockchains
const blockchains = [
  { id: "ethereum", name: "Ethereum" },
  { id: "polygon", name: "Polygon" },
  { id: "solana", name: "Solana" },
  { id: "flow", name: "Flow" },
]

export function CardListingPage() {
  const [currentStep, setCurrentStep] = useState(1)
  const [uploadedImage, setUploadedImage] = useState<string | null>(null)
  const [isProcessing, setIsProcessing] = useState(false)
  const [processingProgress, setProcessingProgress] = useState(0)
  const [processingStep, setProcessingStep] = useState("")
  const [extractedData, setExtractedData] = useState<any>(null)
  const [isEditing, setIsEditing] = useState<string | null>(null)
  const [confidence, setConfidence] = useState(0)

  const fileInputRef = useRef<HTMLInputElement>(null)

  // Handle file upload
  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (file) {
      const reader = new FileReader()
      reader.onload = (event) => {
        setUploadedImage(event.target?.result as string)
        simulateProcessing()
      }
      reader.readAsDataURL(file)
    }
  }

  // Simulate the processing of the card image
  const simulateProcessing = () => {
    setIsProcessing(true)
    setProcessingStep("Detecting card")
    setProcessingProgress(0)

    // Simulate the different steps of processing
    setTimeout(() => {
      setProcessingProgress(30)
      setProcessingStep("Reading text")
    }, 1500)

    setTimeout(() => {
      setProcessingProgress(60)
      setProcessingStep("Matching database")
    }, 3000)

    setTimeout(() => {
      setProcessingProgress(100)
      setProcessingStep("Complete")
      setIsProcessing(false)

      // Mock extracted data
      setExtractedData({
        name: "Charizard",
        set: "Base Set",
        number: "4/102",
        type: "Fire",
        rarity: "Holo Rare",
        condition: "Near Mint",
        grade: "PSA 9",
        year: "1999",
        artist: "Mitsuhiro Arita",
        isFirstEdition: true,
        isHolographic: true,
      })

      setConfidence(92)
      setCurrentStep(2)
    }, 4500)
  }

  // Handle drag and drop
  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault()
  }

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault()
    const file = e.dataTransfer.files?.[0]
    if (file) {
      const reader = new FileReader()
      reader.onload = (event) => {
        setUploadedImage(event.target?.result as string)
        simulateProcessing()
      }
      reader.readAsDataURL(file)
    }
  }

  // Handle camera capture
  const handleCameraCapture = () => {
    // Check if the browser supports the MediaDevices API
    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
      // Create a video element to show the camera stream
      const videoElement = document.createElement("video")
      videoElement.autoplay = true

      // Create a canvas element to capture the frame
      const canvasElement = document.createElement("canvas")

      // Create a modal for the camera
      const modal = document.createElement("div")
      modal.style.position = "fixed"
      modal.style.top = "0"
      modal.style.left = "0"
      modal.style.width = "100%"
      modal.style.height = "100%"
      modal.style.backgroundColor = "rgba(0, 0, 0, 0.9)"
      modal.style.zIndex = "9999"
      modal.style.display = "flex"
      modal.style.flexDirection = "column"
      modal.style.alignItems = "center"
      modal.style.justifyContent = "center"

      // Add the video element to the modal
      videoElement.style.maxWidth = "100%"
      videoElement.style.maxHeight = "70vh"
      videoElement.style.borderRadius = "8px"
      modal.appendChild(videoElement)

      // Add capture and close buttons
      const buttonContainer = document.createElement("div")
      buttonContainer.style.display = "flex"
      buttonContainer.style.gap = "16px"
      buttonContainer.style.marginTop = "16px"

      const captureButton = document.createElement("button")
      captureButton.textContent = "Capture"
      captureButton.style.padding = "8px 24px"
      captureButton.style.borderRadius = "9999px"
      captureButton.style.backgroundColor = "#8075FF"
      captureButton.style.color = "white"
      captureButton.style.border = "none"
      captureButton.style.cursor = "pointer"

      const closeButton = document.createElement("button")
      closeButton.textContent = "Cancel"
      closeButton.style.padding = "8px 24px"
      closeButton.style.borderRadius = "9999px"
      closeButton.style.backgroundColor = "transparent"
      closeButton.style.color = "white"
      closeButton.style.border = "1px solid rgba(255, 255, 255, 0.2)"
      closeButton.style.cursor = "pointer"

      buttonContainer.appendChild(captureButton)
      buttonContainer.appendChild(closeButton)
      modal.appendChild(buttonContainer)

      // Add the modal to the document
      document.body.appendChild(modal)

      // Get the camera stream
      navigator.mediaDevices
        .getUserMedia({ video: { facingMode: "environment" } })
        .then((stream) => {
          videoElement.srcObject = stream

          // Handle capture button click
          captureButton.onclick = () => {
            // Set canvas dimensions to match the video
            canvasElement.width = videoElement.videoWidth
            canvasElement.height = videoElement.videoHeight

            // Draw the current video frame to the canvas
            const context = canvasElement.getContext("2d")
            context?.drawImage(videoElement, 0, 0, canvasElement.width, canvasElement.height)

            // Convert the canvas to a data URL
            const imageDataUrl = canvasElement.toDataURL("image/png")

            // Set the captured image
            setUploadedImage(imageDataUrl)

            // Start processing the image
            simulateProcessing()

            // Clean up
            const tracks = stream.getTracks()
            tracks.forEach((track) => track.stop())
            document.body.removeChild(modal)
          }

          // Handle close button click
          closeButton.onclick = () => {
            // Clean up
            const tracks = stream.getTracks()
            tracks.forEach((track) => track.stop())
            document.body.removeChild(modal)
          }
        })
        .catch((error) => {
          console.error("Error accessing camera:", error)
          alert("Could not access the camera. Please make sure you have granted camera permissions.")
          document.body.removeChild(modal)
        })
    } else {
      alert("Your browser does not support camera access. Please try uploading an image instead.")
    }
  }

  // Handle edit field
  const handleEditField = (field: string) => {
    setIsEditing(field)
  }

  // Handle save field
  const handleSaveField = () => {
    setIsEditing(null)
  }

  // Handle proceed to listing
  const handleProceedToListing = () => {
    setCurrentStep(3)
  }

  // Handle submit listing
  const handleSubmitListing = () => {
    // In a real app, this would submit the listing to the backend
    alert("Card successfully listed!")
  }

  return (
    <div className="min-h-screen pt-32 pb-20 bg-gradient-to-br from-[#F8F9FF] to-[#E4E1FF]/50 dark:from-[#0A0A0A] dark:to-[#121212] relative overflow-hidden">
      {/* Animated background elements */}
      <div className="absolute top-0 left-0 w-full h-full -z-10">
        <div className="absolute top-1/4 left-1/4 w-[500px] h-[500px] rounded-full bg-[#6C63FF]/5 dark:bg-[#6C63FF]/5 blur-[100px] animate-float"></div>
        <div className="absolute bottom-1/4 right-1/4 w-[600px] h-[600px] rounded-full bg-[#FF6B6B]/5 dark:bg-[#FF6B6B]/5 blur-[120px] animate-float-delayed"></div>
      </div>

      <div className="max-w-7xl mx-auto px-4">
        {/* Page Header */}
        <div className="mb-8 text-center">
          <h1 className="text-4xl font-bold text-[#121F3D] dark:text-white mb-2">List Your Card</h1>
          <p className="text-[#121F3D]/70 dark:text-[#B6B8CF] max-w-2xl mx-auto">
            Upload your card image and we'll automatically extract the details to create your listing
          </p>

          {/* Progress Steps */}
          <div className="flex items-center justify-center mt-8 max-w-md mx-auto">
            <div className={`flex flex-col items-center ${currentStep >= 1 ? "text-[#8075FF]" : "text-[#352F7E]"}`}>
              <div
                className={`w-10 h-10 rounded-full flex items-center justify-center border-2 ${
                  currentStep >= 1 ? "border-[#8075FF] bg-[#322F5D]" : "border-[#352F7E] bg-transparent"
                }`}
              >
                {currentStep > 1 ? <Check className="h-5 w-5" /> : "1"}
              </div>
              <span className="text-sm mt-1">Scan</span>
            </div>

            <div className={`w-16 h-0.5 ${currentStep >= 2 ? "bg-[#8075FF]" : "bg-[#352F7E]"}`}></div>

            <div className={`flex flex-col items-center ${currentStep >= 2 ? "text-[#8075FF]" : "text-[#352F7E]"}`}>
              <div
                className={`w-10 h-10 rounded-full flex items-center justify-center border-2 ${
                  currentStep >= 2 ? "border-[#8075FF] bg-[#322F5D]" : "border-[#352F7E] bg-transparent"
                }`}
              >
                {currentStep > 2 ? <Check className="h-5 w-5" /> : "2"}
              </div>
              <span className="text-sm mt-1">Verify</span>
            </div>

            <div className={`w-16 h-0.5 ${currentStep >= 3 ? "bg-[#8075FF]" : "bg-[#352F7E]"}`}></div>

            <div className={`flex flex-col items-center ${currentStep >= 3 ? "text-[#8075FF]" : "text-[#352F7E]"}`}>
              <div
                className={`w-10 h-10 rounded-full flex items-center justify-center border-2 ${
                  currentStep >= 3 ? "border-[#8075FF] bg-[#322F5D]" : "border-[#352F7E] bg-transparent"
                }`}
              >
                3
              </div>
              <span className="text-sm mt-1">List</span>
            </div>
          </div>
        </div>

        {/* Step 1: Upload Card */}
        <AnimatePresence mode="wait">
          {currentStep === 1 && (
            <motion.div
              key="step1"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.3 }}
            >
              <div className="bg-white/80 dark:bg-[#131525]/60 backdrop-blur-md rounded-3xl p-6 md:p-10 shadow-lg shadow-[#352F7E]/10 border border-[#E4E1FF] dark:border-[#352F7E]/20 max-w-3xl mx-auto">
                <div
                  className={cn(
                    "border-2 border-dashed rounded-2xl p-8 text-center transition-all",
                    uploadedImage ? "border-[#8075FF]" : "border-[#352F7E] hover:border-[#8075FF]/50",
                  )}
                  onDragOver={handleDragOver}
                  onDrop={handleDrop}
                >
                  {!uploadedImage ? (
                    <div className="flex flex-col items-center">
                      <div className="w-20 h-20 rounded-full bg-[#322F5D] flex items-center justify-center mb-4">
                        <Upload className="h-10 w-10 text-[#8075FF]" />
                      </div>
                      <h3 className="text-xl font-bold text-[#121F3D] dark:text-white mb-2">
                        Drag your card image here
                      </h3>
                      <p className="text-[#121F3D]/70 dark:text-[#B6B8CF] mb-6">or click to browse your files</p>

                      <div className="flex gap-4">
                        <Button
                          onClick={() => fileInputRef.current?.click()}
                          className="rounded-full bg-gradient-to-r from-[#8075FF] to-[#6C63FF] hover:from-[#6C63FF] hover:to-[#5D51FF] text-[#121F3D] dark:text-white"
                        >
                          Browse Files
                        </Button>
                        <Button
                          variant="outline"
                          className="rounded-full border-[#8075FF] text-[#8075FF] hover:bg-[#322F5D]"
                          onClick={handleCameraCapture}
                        >
                          <Camera className="h-4 w-4 mr-2" />
                          Use Camera
                        </Button>
                      </div>

                      <input
                        type="file"
                        ref={fileInputRef}
                        className="hidden"
                        accept="image/*"
                        onChange={handleFileUpload}
                      />

                      <p className="text-xs text-[#121F3D]/70 dark:text-[#B6B8CF]/70 mt-6">
                        Supported formats: JPG, PNG, HEIF, TIFF
                      </p>
                    </div>
                  ) : (
                    <div className="relative">
                      <div className="relative w-full max-w-xs mx-auto aspect-[2/3] rounded-lg overflow-hidden">
                        <Image
                          src={uploadedImage || "/placeholder.svg"}
                          alt="Uploaded card"
                          fill
                          className="object-contain"
                        />

                        {isProcessing && (
                          <div className="absolute inset-0 bg-black/50 flex flex-col items-center justify-center">
                            <div className="w-16 h-16 rounded-full border-2 border-[#8075FF] border-t-transparent animate-spin mb-4"></div>
                            <p className="text-[#121F3D] dark:text-white font-medium">{processingStep}</p>
                            <div className="w-48 mt-2">
                              <Progress value={processingProgress} className="h-1.5" />
                            </div>
                          </div>
                        )}
                      </div>

                      {!isProcessing && (
                        <Button
                          variant="outline"
                          size="icon"
                          className="absolute top-0 right-0 rounded-full bg-black/50 border-white/20 text-[#121F3D] dark:text-white hover:bg-black/70"
                          onClick={() => setUploadedImage(null)}
                        >
                          <X className="h-4 w-4" />
                        </Button>
                      )}
                    </div>
                  )}
                </div>

                <div className="mt-6 text-center">
                  <h4 className="text-[#121F3D]/70 dark:text-[#B6B8CF] text-sm mb-3">Example results</h4>
                  <div className="flex justify-center gap-4 overflow-x-auto pb-2">
                    <div className="relative w-20 h-28 rounded-lg overflow-hidden border border-[#E4E1FF] dark:border-[#352F7E]/50">
                      <Image src="/fiery-dragon.png" alt="Example card 1" fill className="object-cover" />
                    </div>
                    <div className="relative w-20 h-28 rounded-lg overflow-hidden border border-[#E4E1FF] dark:border-[#352F7E]/50">
                      <Image src="/blastoise-hydro-pump.png" alt="Example card 2" fill className="object-cover" />
                    </div>
                    <div className="relative w-20 h-28 rounded-lg overflow-hidden border border-[#E4E1FF] dark:border-[#352F7E]/50">
                      <Image src="/venusaur-jungle-power.png" alt="Example card 3" fill className="object-cover" />
                    </div>
                  </div>
                </div>
              </div>
            </motion.div>
          )}

          {/* Step 2: Verify Extracted Data */}
          {currentStep === 2 && extractedData && (
            <motion.div
              key="step2"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.3 }}
            >
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {/* Card Preview */}
                <div className="bg-white/80 dark:bg-[#131525]/60 backdrop-blur-md rounded-3xl p-6 shadow-lg shadow-[#352F7E]/10 border border-[#E4E1FF] dark:border-[#352F7E]/20">
                  <h3 className="text-xl font-bold text-[#121F3D] dark:text-white mb-4">Card Preview</h3>

                  <div className="relative w-full max-w-xs mx-auto aspect-[2/3] rounded-lg overflow-hidden perspective-card">
                    <div className="w-full h-full transform-card">
                      <Image
                        src={uploadedImage || "/placeholder.svg"}
                        alt="Card preview"
                        fill
                        className="object-contain"
                      />
                    </div>
                  </div>

                  <div className="mt-6 flex items-center justify-center">
                    <div className="bg-[#F8F9FF]/80 dark:bg-[#0C0E1B]/80 backdrop-blur-md rounded-full px-4 py-2 flex items-center border border-[#E4E1FF] dark:border-[#352F7E]/20">
                      <Sparkles className="h-4 w-4 text-[#FFE066] mr-2" />
                      <span className="text-[#121F3D] dark:text-white text-sm">
                        AI Confidence: <span className="text-[#FFE066] font-medium">{confidence}%</span>
                      </span>
                    </div>
                  </div>
                </div>

                {/* Extracted Data */}
                <div className="bg-white/80 dark:bg-[#131525]/60 backdrop-blur-md rounded-3xl p-6 shadow-lg shadow-[#352F7E]/10 border border-[#E4E1FF] dark:border-[#352F7E]/20">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="text-xl font-bold text-[#121F3D] dark:text-white">Extracted Data</h3>
                    <Button
                      variant="outline"
                      size="sm"
                      className="rounded-full border-[#8075FF] text-[#8075FF] hover:bg-[#322F5D]"
                      onClick={handleProceedToListing}
                    >
                      Accept All
                    </Button>
                  </div>

                  <div className="space-y-4">
                    {/* Card Name */}
                    <div className="bg-[#F8F9FF]/80 dark:bg-[#0C0E1B]/80 backdrop-blur-md rounded-lg p-3 border border-[#E4E1FF] dark:border-[#352F7E]/20">
                      <div className="flex items-center justify-between mb-1">
                        <label className="text-[#121F3D]/70 dark:text-[#B6B8CF] text-sm">Card Name</label>
                        <Button
                          variant="ghost"
                          size="sm"
                          className="h-6 w-6 p-0 rounded-full text-[#8075FF] hover:bg-[#322F5D]"
                          onClick={() => handleEditField("name")}
                        >
                          <Edit className="h-3.5 w-3.5" />
                        </Button>
                      </div>

                      {isEditing === "name" ? (
                        <div className="flex gap-2">
                          <Input
                            defaultValue={extractedData.name}
                            className="bg-white dark:bg-[#1A1C36] border-[#E4E1FF] dark:border-[#352F7E] text-[#121F3D] dark:text-white"
                          />
                          <Button size="sm" className="rounded-full bg-[#8075FF]" onClick={handleSaveField}>
                            <Check className="h-4 w-4" />
                          </Button>
                        </div>
                      ) : (
                        <p className="text-[#121F3D] dark:text-white font-medium">{extractedData.name}</p>
                      )}
                    </div>

                    {/* Card Set */}
                    <div className="bg-[#F8F9FF]/80 dark:bg-[#0C0E1B]/80 backdrop-blur-md rounded-lg p-3 border border-[#E4E1FF] dark:border-[#352F7E]/20">
                      <div className="flex items-center justify-between mb-1">
                        <label className="text-[#121F3D]/70 dark:text-[#B6B8CF] text-sm">Card Set</label>
                        <Button
                          variant="ghost"
                          size="sm"
                          className="h-6 w-6 p-0 rounded-full text-[#8075FF] hover:bg-[#322F5D]"
                          onClick={() => handleEditField("set")}
                        >
                          <Edit className="h-3.5 w-3.5" />
                        </Button>
                      </div>

                      {isEditing === "set" ? (
                        <div className="flex gap-2">
                          <Select defaultValue={extractedData.set}>
                            <SelectTrigger className="bg-white dark:bg-[#1A1C36] border-[#E4E1FF] dark:border-[#352F7E] text-[#121F3D] dark:text-white">
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent className="bg-white dark:bg-[#1A1C36] border-[#E4E1FF] dark:border-[#352F7E] text-[#121F3D] dark:text-white">
                              {cardSets.map((set) => (
                                <SelectItem key={set.id} value={set.name}>
                                  {set.name}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                          <Button size="sm" className="rounded-full bg-[#8075FF]" onClick={handleSaveField}>
                            <Check className="h-4 w-4" />
                          </Button>
                        </div>
                      ) : (
                        <p className="text-[#121F3D] dark:text-white font-medium">{extractedData.set}</p>
                      )}
                    </div>

                    {/* Card Number */}
                    <div className="bg-[#F8F9FF]/80 dark:bg-[#0C0E1B]/80 backdrop-blur-md rounded-lg p-3 border border-[#E4E1FF] dark:border-[#352F7E]/20">
                      <div className="flex items-center justify-between mb-1">
                        <label className="text-[#121F3D]/70 dark:text-[#B6B8CF] text-sm">Card Number</label>
                        <Button
                          variant="ghost"
                          size="sm"
                          className="h-6 w-6 p-0 rounded-full text-[#8075FF] hover:bg-[#322F5D]"
                          onClick={() => handleEditField("number")}
                        >
                          <Edit className="h-3.5 w-3.5" />
                        </Button>
                      </div>

                      {isEditing === "number" ? (
                        <div className="flex gap-2">
                          <Input
                            defaultValue={extractedData.number}
                            className="bg-white dark:bg-[#1A1C36] border-[#E4E1FF] dark:border-[#352F7E] text-[#121F3D] dark:text-white"
                          />
                          <Button size="sm" className="rounded-full bg-[#8075FF]" onClick={handleSaveField}>
                            <Check className="h-4 w-4" />
                          </Button>
                        </div>
                      ) : (
                        <p className="text-[#121F3D] dark:text-white font-medium">{extractedData.number}</p>
                      )}
                    </div>

                    {/* Card Rarity */}
                    <div className="bg-[#F8F9FF]/80 dark:bg-[#0C0E1B]/80 backdrop-blur-md rounded-lg p-3 border border-[#E4E1FF] dark:border-[#352F7E]/20">
                      <div className="flex items-center justify-between mb-1">
                        <label className="text-[#121F3D]/70 dark:text-[#B6B8CF] text-sm">Rarity</label>
                        <Button
                          variant="ghost"
                          size="sm"
                          className="h-6 w-6 p-0 rounded-full text-[#8075FF] hover:bg-[#322F5D]"
                          onClick={() => handleEditField("rarity")}
                        >
                          <Edit className="h-3.5 w-3.5" />
                        </Button>
                      </div>

                      {isEditing === "rarity" ? (
                        <div className="flex gap-2">
                          <Select defaultValue={extractedData.rarity}>
                            <SelectTrigger className="bg-white dark:bg-[#1A1C36] border-[#E4E1FF] dark:border-[#352F7E] text-[#121F3D] dark:text-white">
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent className="bg-white dark:bg-[#1A1C36] border-[#E4E1FF] dark:border-[#352F7E] text-[#121F3D] dark:text-white">
                              {cardRarities.map((rarity) => (
                                <SelectItem key={rarity.id} value={rarity.name}>
                                  {rarity.name}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                          <Button size="sm" className="rounded-full bg-[#8075FF]" onClick={handleSaveField}>
                            <Check className="h-4 w-4" />
                          </Button>
                        </div>
                      ) : (
                        <p className="text-[#121F3D] dark:text-white font-medium">{extractedData.rarity}</p>
                      )}
                    </div>

                    {/* Card Condition */}
                    <div className="bg-[#F8F9FF]/80 dark:bg-[#0C0E1B]/80 backdrop-blur-md rounded-lg p-3 border border-[#E4E1FF] dark:border-[#352F7E]/20">
                      <div className="flex items-center justify-between mb-1">
                        <label className="text-[#121F3D]/70 dark:text-[#B6B8CF] text-sm">Condition</label>
                        <Button
                          variant="ghost"
                          size="sm"
                          className="h-6 w-6 p-0 rounded-full text-[#8075FF] hover:bg-[#322F5D]"
                          onClick={() => handleEditField("condition")}
                        >
                          <Edit className="h-3.5 w-3.5" />
                        </Button>
                      </div>

                      {isEditing === "condition" ? (
                        <div className="flex gap-2">
                          <Select defaultValue={extractedData.condition}>
                            <SelectTrigger className="bg-white dark:bg-[#1A1C36] border-[#E4E1FF] dark:border-[#352F7E] text-[#121F3D] dark:text-white">
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent className="bg-white dark:bg-[#1A1C36] border-[#E4E1FF] dark:border-[#352F7E] text-[#121F3D] dark:text-white">
                              {cardConditions.map((condition) => (
                                <SelectItem key={condition.id} value={condition.name}>
                                  {condition.name} ({condition.grade})
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                          <Button size="sm" className="rounded-full bg-[#8075FF]" onClick={handleSaveField}>
                            <Check className="h-4 w-4" />
                          </Button>
                        </div>
                      ) : (
                        <p className="text-[#121F3D] dark:text-white font-medium">
                          {extractedData.condition} ({extractedData.grade})
                        </p>
                      )}
                    </div>

                    {/* Special Attributes */}
                    <div className="bg-[#F8F9FF]/80 dark:bg-[#0C0E1B]/80 backdrop-blur-md rounded-lg p-3 border border-[#E4E1FF] dark:border-[#352F7E]/20">
                      <label className="text-[#121F3D]/70 dark:text-[#B6B8CF] text-sm block mb-2">
                        Special Attributes
                      </label>
                      <div className="flex flex-wrap gap-2">
                        <Badge className="bg-[#322F5D] text-[#8075FF] border border-[#8075FF]/30">
                          {extractedData.isFirstEdition ? "First Edition" : "Unlimited"}
                        </Badge>
                        <Badge className="bg-[#322F5D] text-[#8075FF] border border-[#8075FF]/30">
                          {extractedData.isHolographic ? "Holographic" : "Non-Holographic"}
                        </Badge>
                      </div>
                    </div>
                  </div>

                  <div className="mt-6">
                    <Button
                      className="w-full rounded-full bg-gradient-to-r from-[#8075FF] to-[#6C63FF] hover:from-[#6C63FF] hover:to-[#5D51FF] text-[#121F3D] dark:text-white shadow-[0_0_15px_rgba(108,99,255,0.3)]"
                      onClick={handleProceedToListing}
                    >
                      Continue to Listing
                    </Button>
                  </div>
                </div>
              </div>
            </motion.div>
          )}

          {/* Step 3: Create Listing */}
          {currentStep === 3 && (
            <motion.div
              key="step3"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.3 }}
            >
              <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                {/* Card Preview */}
                <div className="bg-white/80 dark:bg-[#131525]/60 backdrop-blur-md rounded-3xl p-6 shadow-lg shadow-[#352F7E]/10 border border-[#E4E1FF] dark:border-[#352F7E]/20">
                  <h3 className="text-xl font-bold text-[#121F3D] dark:text-white mb-4">Card Preview</h3>

                  <div className="relative w-full max-w-xs mx-auto aspect-[2/3] rounded-lg overflow-hidden perspective-card">
                    <div className="w-full h-full transform-card">
                      <Image
                        src={uploadedImage || "/placeholder.svg"}
                        alt="Card preview"
                        fill
                        className="object-contain"
                      />
                    </div>
                  </div>

                  <div className="mt-4">
                    <h4 className="text-[#121F3D] dark:text-white font-medium mb-2">Card Details</h4>
                    <div className="space-y-2 text-sm">
                      <div className="flex justify-between">
                        <span className="text-[#121F3D]/70 dark:text-[#B6B8CF]">Name:</span>
                        <span className="text-[#121F3D] dark:text-white">{extractedData.name}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-[#121F3D]/70 dark:text-[#B6B8CF]">Set:</span>
                        <span className="text-[#121F3D] dark:text-white">{extractedData.set}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-[#121F3D]/70 dark:text-[#B6B8CF]">Number:</span>
                        <span className="text-[#121F3D] dark:text-white">{extractedData.number}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-[#121F3D]/70 dark:text-[#B6B8CF]">Rarity:</span>
                        <span className="text-[#121F3D] dark:text-white">{extractedData.rarity}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-[#121F3D]/70 dark:text-[#B6B8CF]">Condition:</span>
                        <span className="text-[#121F3D] dark:text-white">{extractedData.condition}</span>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Listing Details */}
                <div className="bg-white/80 dark:bg-[#131525]/60 backdrop-blur-md rounded-3xl p-6 shadow-lg shadow-[#352F7E]/10 border border-[#E4E1FF] dark:border-[#352F7E]/20 lg:col-span-2">
                  <h3 className="text-xl font-bold text-[#121F3D] dark:text-white mb-4">Listing Details</h3>

                  <Tabs defaultValue="fixed-price" className="w-full">
                    <TabsList className="grid grid-cols-2 mb-4 bg-[#F8F9FF]/80 dark:bg-[#0C0E1B]/80 backdrop-blur-md rounded-full p-1 border border-[#E4E1FF] dark:border-[#352F7E]/20">
                      <TabsTrigger
                        value="fixed-price"
                        className="rounded-full data-[state=active]:bg-[#1A1C36] data-[state=active]:text-[#121F3D] dark:data-[state=active]:text-white text-[#121F3D]/70 dark:text-[#B6B8CF]"
                      >
                        <Tag className="h-4 w-4 mr-2" />
                        Fixed Price
                      </TabsTrigger>
                      <TabsTrigger
                        value="auction"
                        className="rounded-full data-[state=active]:bg-[#1A1C36] data-[state=active]:text-[#121F3D] dark:data-[state=active]:text-white text-[#121F3D]/70 dark:text-[#B6B8CF]"
                      >
                        <Clock className="h-4 w-4 mr-2" />
                        Auction
                      </TabsTrigger>
                    </TabsList>

                    <TabsContent value="fixed-price" className="space-y-4">
                      <div className="bg-[#F8F9FF]/80 dark:bg-[#0C0E1B]/80 backdrop-blur-md rounded-lg p-4 border border-[#E4E1FF] dark:border-[#352F7E]/20">
                        <label className="text-[#121F3D]/70 dark:text-[#B6B8CF] text-sm block mb-2">Price</label>
                        <div className="flex items-center">
                          <div className="bg-white dark:bg-[#1A1C36] rounded-l-lg p-2 border border-r-0 border-[#E4E1FF] dark:border-[#352F7E]">
                            <DollarSign className="h-5 w-5 text-[#8075FF]" />
                          </div>
                          <Input
                            type="number"
                            defaultValue="12500"
                            className="bg-white dark:bg-[#1A1C36] border-[#E4E1FF] dark:border-[#352F7E] text-[#121F3D] dark:text-white rounded-l-none"
                          />
                        </div>

                        <div className="mt-3 flex items-center justify-between">
                          <span className="text-[#121F3D]/70 dark:text-[#B6B8CF] text-sm">Market Average:</span>
                          <span className="text-[#5DDFB8] font-medium">$12,350</span>
                        </div>
                      </div>

                      <div className="bg-[#F8F9FF]/80 dark:bg-[#0C0E1B]/80 backdrop-blur-md rounded-lg p-4 border border-[#E4E1FF] dark:border-[#352F7E]/20">
                        <div className="flex items-center justify-between mb-2">
                          <label className="text-[#121F3D]/70 dark:text-[#B6B8CF] text-sm">Listing Duration</label>
                          <span className="text-[#8075FF] text-sm">30 days</span>
                        </div>
                        <Slider defaultValue={[30]} max={90} step={1} className="py-4" />
                        <div className="flex justify-between text-xs text-[#121F3D]/70 dark:text-[#B6B8CF]">
                          <span>1 day</span>
                          <span>90 days</span>
                        </div>
                      </div>
                    </TabsContent>

                    <TabsContent value="auction" className="space-y-4">
                      <div className="bg-[#F8F9FF]/80 dark:bg-[#0C0E1B]/80 backdrop-blur-md rounded-lg p-4 border border-[#E4E1FF] dark:border-[#352F7E]/20">
                        <label className="text-[#121F3D]/70 dark:text-[#B6B8CF] text-sm block mb-2">
                          Starting Price
                        </label>
                        <div className="flex items-center">
                          <div className="bg-white dark:bg-[#1A1C36] rounded-l-lg p-2 border border-r-0 border-[#E4E1FF] dark:border-[#352F7E]">
                            <DollarSign className="h-5 w-5 text-[#8075FF]" />
                          </div>
                          <Input
                            type="number"
                            defaultValue="5000"
                            className="bg-white dark:bg-[#1A1C36] border-[#E4E1FF] dark:border-[#352F7E] text-[#121F3D] dark:text-white rounded-l-none"
                          />
                        </div>
                      </div>

                      <div className="bg-[#F8F9FF]/80 dark:bg-[#0C0E1B]/80 backdrop-blur-md rounded-lg p-4 border border-[#E4E1FF] dark:border-[#352F7E]/20">
                        <label className="text-[#121F3D]/70 dark:text-[#B6B8CF] text-sm block mb-2">
                          Reserve Price (Optional)
                        </label>
                        <div className="flex items-center">
                          <div className="bg-white dark:bg-[#1A1C36] rounded-l-lg p-2 border border-r-0 border-[#E4E1FF] dark:border-[#352F7E]">
                            <DollarSign className="h-5 w-5 text-[#8075FF]" />
                          </div>
                          <Input
                            type="number"
                            placeholder="No reserve"
                            className="bg-white dark:bg-[#1A1C36] border-[#E4E1FF] dark:border-[#352F7E] text-[#121F3D] dark:text-white rounded-l-none"
                          />
                        </div>
                      </div>

                      <div className="bg-[#F8F9FF]/80 dark:bg-[#0C0E1B]/80 backdrop-blur-md rounded-lg p-4 border border-[#E4E1FF] dark:border-[#352F7E]/20">
                        <div className="flex items-center justify-between mb-2">
                          <label className="text-[#121F3D]/70 dark:text-[#B6B8CF] text-sm">Auction Duration</label>
                          <span className="text-[#8075FF] text-sm">7 days</span>
                        </div>
                        <Slider defaultValue={[7]} max={14} step={1} className="py-4" />
                        <div className="flex justify-between text-xs text-[#121F3D]/70 dark:text-[#B6B8CF]">
                          <span>1 day</span>
                          <span>14 days</span>
                        </div>
                      </div>
                    </TabsContent>
                  </Tabs>

                  <div className="mt-6 space-y-4">
                    <div className="bg-[#F8F9FF]/80 dark:bg-[#0C0E1B]/80 backdrop-blur-md rounded-lg p-4 border border-[#E4E1FF] dark:border-[#352F7E]/20">
                      <div className="flex items-center justify-between mb-2">
                        <label className="text-[#121F3D]/70 dark:text-[#B6B8CF] text-sm">Blockchain</label>
                        <Info className="h-4 w-4 text-[#121F3D]/70 dark:text-[#B6B8CF]" />
                      </div>
                      <Select defaultValue="ethereum">
                        <SelectTrigger className="bg-white dark:bg-[#1A1C36] border-[#E4E1FF] dark:border-[#352F7E] text-[#121F3D] dark:text-white">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent className="bg-white dark:bg-[#1A1C36] border-[#E4E1FF] dark:border-[#352F7E] text-[#121F3D] dark:text-white">
                          {blockchains.map((blockchain) => (
                            <SelectItem key={blockchain.id} value={blockchain.id}>
                              {blockchain.name}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>

                    <div className="bg-[#F8F9FF]/80 dark:bg-[#0C0E1B]/80 backdrop-blur-md rounded-lg p-4 border border-[#E4E1FF] dark:border-[#352F7E]/20">
                      <div className="flex items-center justify-between mb-2">
                        <label className="text-[#121F3D]/70 dark:text-[#B6B8CF] text-sm">Royalties</label>
                        <span className="text-[#8075FF] text-sm">5%</span>
                      </div>
                      <Slider defaultValue={[5]} max={10} step={0.5} className="py-4" />
                      <div className="flex justify-between text-xs text-[#121F3D]/70 dark:text-[#B6B8CF]">
                        <span>0%</span>
                        <span>10%</span>
                      </div>
                    </div>

                    <div className="bg-[#F8F9FF]/80 dark:bg-[#0C0E1B]/80 backdrop-blur-md rounded-lg p-4 border border-[#E4E1FF] dark:border-[#352F7E]/20">
                      <div className="flex items-center justify-between">
                        <div>
                          <label className="text-[#121F3D]/70 dark:text-[#B6B8CF] text-sm block">
                            Include Physical Card
                          </label>
                          <p className="text-xs text-[#121F3D]/70 dark:text-[#B6B8CF]/70">
                            The physical card will be stored in our vault
                          </p>
                        </div>
                        <Switch defaultChecked />
                      </div>
                    </div>

                    <div className="bg-[#F8F9FF]/80 dark:bg-[#0C0E1B]/80 backdrop-blur-md rounded-lg p-4 border border-[#E4E1FF] dark:border-[#352F7E]/20">
                      <label className="text-[#121F3D]/70 dark:text-[#B6B8CF] text-sm block mb-2">
                        Description (Optional)
                      </label>
                      <Textarea
                        placeholder="Add details about your card..."
                        className="bg-white dark:bg-[#1A1C36] border-[#E4E1FF] dark:border-[#352F7E] text-[#121F3D] dark:text-white min-h-[100px]"
                      />
                    </div>
                  </div>

                  <div className="mt-6">
                    <div className="bg-[#F8F9FF]/80 dark:bg-[#0C0E1B]/80 backdrop-blur-md rounded-lg p-4 border border-[#E4E1FF] dark:border-[#352F7E]/20 mb-4">
                      <div className="flex items-center mb-2">
                        <BarChart3 className="h-5 w-5 text-[#8075FF] mr-2" />
                        <h4 className="text-[#121F3D] dark:text-white font-medium">Market Analysis</h4>
                      </div>
                      <p className="text-[#121F3D]/70 dark:text-[#B6B8CF] text-sm mb-3">
                        Based on recent sales, your card is priced competitively within the top 25% of similar listings.
                      </p>
                      <div className="h-2 bg-[#1A1C36] rounded-full overflow-hidden">
                        <div className="h-full w-3/4 bg-gradient-to-r from-[#8075FF] to-[#6C63FF]"></div>
                      </div>
                    </div>

                    <div className="flex items-center mb-6">
                      <input type="checkbox" id="terms" className="rounded text-[#8075FF]" />
                      <label htmlFor="terms" className="ml-2 text-[#121F3D]/70 dark:text-[#B6B8CF] text-sm">
                        I agree to the{" "}
                        <a href="#" className="text-[#8075FF] hover:underline">
                          Terms of Service
                        </a>{" "}
                        and{" "}
                        <a href="#" className="text-[#8075FF] hover:underline">
                          Listing Guidelines
                        </a>
                      </label>
                    </div>

                    <Button
                      className="w-full rounded-full bg-gradient-to-r from-[#8075FF] to-[#6C63FF] hover:from-[#6C63FF] hover:to-[#5D51FF] text-[#121F3D] dark:text-white shadow-[0_0_15px_rgba(108,99,255,0.3)] py-6 text-lg font-medium"
                      onClick={handleSubmitListing}
                    >
                      List Card Now
                    </Button>
                  </div>
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </div>
  )
}

```

`/home/sam/hack-pro/Vynix-v0/components/profile/profile-collection.tsx`:

```tsx
"use client"

import { useState } from "react"
import Image from "next/image"
import { motion } from "framer-motion"
import { Eye, Filter, ChevronDown, ChevronUp } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { cn } from "@/lib/utils"

// Generate mock card data
const generateCards = (count: number) => {
  const cardTypes = ["normal", "holographic", "full-art", "reverse-holo", "gold"]
  const rarities = ["Common", "Uncommon", "Rare", "Holo Rare", "Ultra Rare"]
  const sets = ["Base Set", "Jungle", "Fossil", "Team Rocket", "Gym Heroes", "Neo Genesis"]
  const pokemonNames = [
    "Pikachu",
    "Charizard",
    "Blastoise",
    "Venusaur",
    "Mewtwo",
    "Mew",
    "Gyarados",
    "Dragonite",
    "Gengar",
    "Alakazam",
    "Machamp",
    "Zapdos",
    "Articuno",
    "Moltres",
    "Snorlax",
    "Lapras",
    "Vaporeon",
    "Jolteon",
    "Flareon",
    "Eevee",
  ]

  return Array.from({ length: count }, (_, i) => {
    const id = (i + 1).toString()
    const name = pokemonNames[Math.floor(Math.random() * pokemonNames.length)]
    const set = sets[Math.floor(Math.random() * sets.length)]
    const rarity = rarities[Math.floor(Math.random() * rarities.length)]
    const type = cardTypes[Math.floor(Math.random() * cardTypes.length)]
    const price = Math.floor(Math.random() * 10000) + 10

    return {
      id,
      name,
      set,
      image: `/placeholder.svg?height=350&width=250&query=${name} pokemon card`,
      rarity,
      price,
      type,
    }
  })
}

const collectionCards = generateCards(18)

export function ProfileCollection() {
  const [showFilters, setShowFilters] = useState(false)
  const [showStats, setShowStats] = useState(true)

  return (
    <div>
      {/* Collection Overview */}
      <motion.div
        className={cn("mb-8 overflow-hidden transition-all duration-300", showStats ? "max-h-[200px]" : "max-h-0")}
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-[20px] font-bold text-[#121F3D] dark:text-white">Collection Overview</h2>
          <Button
            variant="ghost"
            size="sm"
            className="h-8 w-8 p-0 rounded-full text-[#121F3D]/70 dark:text-[#B6B8CF] hover:bg-[#F9F9FB] dark:hover:bg-[#1A1C36]"
            onClick={() => setShowStats(!showStats)}
          >
            {showStats ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />}
          </Button>
        </div>

        <div className="bg-[#F9F9FB] dark:bg-[#1A1C36] rounded-2xl p-6">
          <div className="flex flex-wrap gap-8 items-center">
            <div>
              <div className="text-[14px] text-[#121F3D]/70 dark:text-[#B6B8CF] mb-1">Total Cards</div>
              <div className="text-[20px] font-bold text-[#121F3D] dark:text-white">124</div>
            </div>

            <div>
              <div className="text-[14px] text-[#121F3D]/70 dark:text-[#B6B8CF] mb-1">Highest Value</div>
              <div className="text-[20px] font-bold text-[#121F3D] dark:text-white">$12,500</div>
            </div>

            <div>
              <div className="text-[14px] text-[#121F3D]/70 dark:text-[#B6B8CF] mb-1">Collection Growth</div>
              <div className="flex items-center">
                <div className="text-[20px] font-bold text-[#4ECCA3] dark:text-[#5DDFB8]">+15%</div>
                <div className="ml-3 w-24 h-8 relative">
                  <svg
                    viewBox="0 0 100 30"
                    className="w-full h-full stroke-[#4ECCA3] dark:stroke-[#5DDFB8] fill-none stroke-2"
                  >
                    <path d="M0,25 L10,20 L20,22 L30,15 L40,18 L50,10 L60,15 L70,5 L80,8 L90,3 L100,5" />
                  </svg>
                </div>
              </div>
            </div>

            <div className="ml-auto">
              <Button
                variant="outline"
                size="sm"
                className="rounded-full border-[#E4E1FF] dark:border-[#352F7E] text-[#121F3D]/70 dark:text-[#B6B8CF] hover:bg-[#F9F9FB] dark:hover:bg-[#1A1C36]"
                onClick={() => setShowFilters(!showFilters)}
              >
                <Filter className="h-4 w-4 mr-2" />
                Filter
              </Button>
            </div>
          </div>
        </div>
      </motion.div>

      {/* Filters */}
      <motion.div
        className={cn("mb-6 overflow-hidden transition-all duration-300", showFilters ? "max-h-[200px]" : "max-h-0")}
        initial={{ opacity: 0, height: 0 }}
        animate={{ opacity: showFilters ? 1 : 0, height: showFilters ? "auto" : 0 }}
        transition={{ duration: 0.3 }}
      >
        <div className="bg-[#F9F9FB] dark:bg-[#1A1C36] rounded-2xl p-4">
          <div className="flex flex-wrap gap-3">
            <Badge className="bg-white dark:bg-[#131525] hover:bg-white dark:hover:bg-[#131525] text-[#121F3D] dark:text-white rounded-full px-4 py-2">
              All Cards
            </Badge>
            <Badge className="bg-transparent hover:bg-white/10 text-[#121F3D]/70 dark:text-[#B6B8CF] rounded-full px-4 py-2">
              Pokémon
            </Badge>
            <Badge className="bg-transparent hover:bg-white/10 text-[#121F3D]/70 dark:text-[#B6B8CF] rounded-full px-4 py-2">
              Sports
            </Badge>
            <Badge className="bg-transparent hover:bg-white/10 text-[#121F3D]/70 dark:text-[#B6B8CF] rounded-full px-4 py-2">
              TCG
            </Badge>
            <Badge className="bg-transparent hover:bg-white/10 text-[#121F3D]/70 dark:text-[#B6B8CF] rounded-full px-4 py-2">
              Holo Rare
            </Badge>
            <Badge className="bg-transparent hover:bg-white/10 text-[#121F3D]/70 dark:text-[#B6B8CF] rounded-full px-4 py-2">
              PSA Graded
            </Badge>
            <Badge className="bg-transparent hover:bg-white/10 text-[#121F3D]/70 dark:text-[#B6B8CF] rounded-full px-4 py-2">
              First Edition
            </Badge>
          </div>
        </div>
      </motion.div>

      {/* Collection Grid */}
      {collectionCards.length > 0 ? (
        <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-6">
          {collectionCards.map((card) => (
            <motion.div
              key={card.id}
              className="group relative"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
              whileHover={{ y: -5 }}
            >
              <div className="relative aspect-[2.5/3.5] rounded-lg overflow-hidden">
                <Image
                  src={card.image || "/placeholder.svg"}
                  alt={card.name}
                  fill
                  className="object-cover transition-transform duration-300 group-hover:scale-105"
                />

                {/* Hover overlay */}
                <div className="absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-all duration-300 flex items-center justify-center opacity-0 group-hover:opacity-100">
                  <div className="flex flex-col items-center">
                    <h3 className="text-white font-medium text-center px-2">{card.name}</h3>
                    <p className="text-white/80 text-xs">{card.set}</p>
                    <Badge className="mt-2 bg-white/80 text-[#121F3D] text-xs">{card.rarity}</Badge>
                    <Button
                      variant="secondary"
                      size="sm"
                      className="mt-3 rounded-full bg-white/80 dark:bg-black/50 backdrop-blur-sm"
                    >
                      <Eye className="h-3 w-3 mr-1" />
                      View
                    </Button>
                  </div>
                </div>
              </div>
            </motion.div>
          ))}
        </div>
      ) : (
        <div className="flex flex-col items-center justify-center py-16">
          <p className="text-[#121F3D]/70 dark:text-[#B6B8CF] mb-4">Your collection is empty</p>
          <Button className="rounded-full bg-[#6C63FF] dark:bg-[#8075FF] text-white hover:bg-[#5D51FF] dark:hover:bg-[#6C63FF]">
            Add Cards
          </Button>
        </div>
      )}
    </div>
  )
}

```

`/home/sam/hack-pro/Vynix-v0/components/profile/profile-favorites.tsx`:

```tsx
"use client"
import Image from "next/image"
import { motion } from "framer-motion"
import { Eye, Heart } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"

// Generate mock favorite cards
const generateFavorites = (count: number) => {
  const cardTypes = ["normal", "holographic", "full-art", "reverse-holo", "gold"]
  const rarities = ["Common", "Uncommon", "Rare", "Holo Rare", "Ultra Rare"]
  const sets = ["Base Set", "Jungle", "Fossil", "Team Rocket", "Gym Heroes", "Neo Genesis"]
  const pokemonNames = [
    "Pikachu",
    "Charizard",
    "Blastoise",
    "Venusaur",
    "Mewtwo",
    "Mew",
    "Gyarados",
    "Dragonite",
    "Gengar",
    "Alakazam",
    "Machamp",
    "Zapdos",
    "Articuno",
    "Moltres",
    "Snorlax",
    "Lapras",
    "Vaporeon",
    "Jolteon",
    "Flareon",
    "Eevee",
  ]

  return Array.from({ length: count }, (_, i) => {
    const id = (i + 1).toString()
    const name = pokemonNames[Math.floor(Math.random() * pokemonNames.length)]
    const set = sets[Math.floor(Math.random() * sets.length)]
    const rarity = rarities[Math.floor(Math.random() * rarities.length)]
    const type = cardTypes[Math.floor(Math.random() * cardTypes.length)]
    const price = Math.floor(Math.random() * 10000) + 10

    return {
      id,
      name,
      set,
      image: `/placeholder.svg?height=350&width=250&query=${name} pokemon card`,
      rarity,
      price,
      type,
      owner: "CardMaster" + Math.floor(Math.random() * 100),
    }
  })
}

const favoriteCards = generateFavorites(12)

export function ProfileFavorites() {
  return (
    <div>
      {favoriteCards.length > 0 ? (
        <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-6">
          {favoriteCards.map((card) => (
            <motion.div
              key={card.id}
              className="group relative"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
              whileHover={{ y: -5 }}
            >
              <div className="relative aspect-[2.5/3.5] rounded-lg overflow-hidden">
                <Image
                  src={card.image || "/placeholder.svg"}
                  alt={card.name}
                  fill
                  className="object-cover transition-transform duration-300 group-hover:scale-105"
                />

                {/* Favorite indicator */}
                <div className="absolute top-2 right-2 bg-white/80 dark:bg-black/50 backdrop-blur-sm rounded-full p-1">
                  <Heart className="h-3 w-3 text-[#FF6B6B] fill-[#FF6B6B]" />
                </div>

                {/* Hover overlay */}
                <div className="absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-all duration-300 flex items-center justify-center opacity-0 group-hover:opacity-100">
                  <div className="flex flex-col items-center">
                    <h3 className="text-white font-medium text-center px-2">{card.name}</h3>
                    <p className="text-white/80 text-xs">{card.set}</p>
                    <Badge className="mt-2 bg-white/80 text-[#121F3D] text-xs">{card.rarity}</Badge>
                    <Button
                      variant="secondary"
                      size="sm"
                      className="mt-3 rounded-full bg-white/80 dark:bg-black/50 backdrop-blur-sm"
                    >
                      <Eye className="h-3 w-3 mr-1" />
                      View
                    </Button>
                  </div>
                </div>
              </div>

              {/* Card owner */}
              <div className="mt-2 text-center">
                <p className="text-[14px] text-[#121F3D]/70 dark:text-[#B6B8CF]">Owned by {card.owner}</p>
                <p className="text-[16px] font-medium text-[#121F3D] dark:text-white">${card.price.toLocaleString()}</p>
              </div>
            </motion.div>
          ))}
        </div>
      ) : (
        <div className="flex flex-col items-center justify-center py-16">
          <p className="text-[#121F3D]/70 dark:text-[#B6B8CF] mb-4">You haven't favorited any cards yet</p>
          <Button className="rounded-full bg-[#6C63FF] dark:bg-[#8075FF] text-white hover:bg-[#5D51FF] dark:hover:bg-[#6C63FF]">
            Explore Marketplace
          </Button>
        </div>
      )}
    </div>
  )
}

```

`/home/sam/hack-pro/Vynix-v0/components/profile/profile-about.tsx`:

```tsx
"use client"

import { useState } from "react"
import Image from "next/image"
import { motion } from "framer-motion"
import { Star, ExternalLink } from "lucide-react"
import { Badge } from "@/components/ui/badge"

// Mock user data
const userData = {
  bio: "Passionate Pokémon card collector since 1999. Specializing in first edition holos and Japanese promos. Always looking to trade for rare Charizard variants and Pikachu promos. Based in New York City, I attend most major trading card events on the East Coast.",
  socialLinks: [
    { name: "Twitter", url: "https://twitter.com/cardcollector" },
    { name: "Instagram", url: "https://instagram.com/cardcollector" },
    { name: "YouTube", url: "https://youtube.com/cardcollector" },
  ],
  collectorFocus: ["Pokémon", "First Editions", "Holos", "Japanese Promos", "PSA Graded"],
  trustScore: 98,
  feedback: [
    {
      id: "1",
      user: "PokéMaster42",
      avatar: "/placeholder.svg?key=wz3mk",
      comment: "Great collector to deal with! Cards arrived in perfect condition and exactly as described.",
      date: "2 weeks ago",
    },
    {
      id: "2",
      user: "VintageTrader",
      avatar: "/placeholder.svg?key=7cdzs",
      comment: "Smooth transaction and fast payment. Would definitely trade with again!",
      date: "1 month ago",
    },
    {
      id: "3",
      user: "HoloHunter",
      avatar: "/placeholder.svg?key=51p9p",
      comment: "Excellent communication throughout the entire process. A trustworthy collector.",
      date: "2 months ago",
    },
  ],
}

export function ProfileAbout() {
  const [showAllFeedback, setShowAllFeedback] = useState(false)

  const displayedFeedback = showAllFeedback ? userData.feedback : userData.feedback.slice(0, 2)

  return (
    <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
      {/* Bio and Info */}
      <div className="md:col-span-2">
        <motion.div
          className="bg-[#F9F9FB] dark:bg-[#1A1C36] rounded-2xl p-6 mb-8"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <h3 className="text-[20px] font-bold text-[#121F3D] dark:text-white mb-4">Bio</h3>
          <p className="text-[16px] text-[#121F3D]/80 dark:text-[#B6B8CF] leading-relaxed">{userData.bio}</p>

          {/* Social Links */}
          {userData.socialLinks.length > 0 && (
            <div className="mt-6">
              <h4 className="text-[16px] font-medium text-[#121F3D] dark:text-white mb-2">Social Links</h4>
              <div className="flex flex-wrap gap-4">
                {userData.socialLinks.map((link) => (
                  <a
                    key={link.name}
                    href={link.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-[#6C63FF] dark:text-[#8075FF] hover:underline flex items-center"
                  >
                    {link.name}
                    <ExternalLink className="ml-1 h-3 w-3" />
                  </a>
                ))}
              </div>
            </div>
          )}

          {/* Collector Focus */}
          <div className="mt-6">
            <h4 className="text-[16px] font-medium text-[#121F3D] dark:text-white mb-2">Collector Focus</h4>
            <div className="flex flex-wrap gap-2">
              {userData.collectorFocus.map((focus) => (
                <Badge
                  key={focus}
                  className="bg-[#E4E1FF] dark:bg-[#322F5D] text-[#6C63FF] dark:text-[#8075FF] border border-[#6C63FF]/20 dark:border-[#8075FF]/20 rounded-full"
                >
                  {focus}
                </Badge>
              ))}
            </div>
          </div>
        </motion.div>

        {/* Feedback */}
        <motion.div
          className="bg-[#F9F9FB] dark:bg-[#1A1C36] rounded-2xl p-6"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.1 }}
        >
          <h3 className="text-[20px] font-bold text-[#121F3D] dark:text-white mb-4">Recent Feedback</h3>

          <div className="space-y-6">
            {displayedFeedback.map((feedback) => (
              <div key={feedback.id} className="flex">
                <div className="relative h-10 w-10 rounded-full overflow-hidden mr-4">
                  <Image
                    src={feedback.avatar || "/placeholder.svg"}
                    alt={feedback.user}
                    fill
                    className="object-cover"
                  />
                </div>
                <div>
                  <div className="flex items-center">
                    <h4 className="font-medium text-[#121F3D] dark:text-white">{feedback.user}</h4>
                    <span className="text-[14px] text-[#121F3D]/70 dark:text-[#B6B8CF] ml-2">{feedback.date}</span>
                  </div>
                  <p className="text-[#121F3D]/80 dark:text-[#B6B8CF] mt-1">{feedback.comment}</p>
                </div>
              </div>
            ))}
          </div>

          {userData.feedback.length > 2 && (
            <button
              className="text-[#6C63FF] dark:text-[#8075FF] hover:underline mt-4 text-[14px]"
              onClick={() => setShowAllFeedback(!showAllFeedback)}
            >
              {showAllFeedback ? "Show Less" : "Show All Feedback"}
            </button>
          )}
        </motion.div>
      </div>

      {/* Trust Score */}
      <div>
        <motion.div
          className="bg-[#F9F9FB] dark:bg-[#1A1C36] rounded-2xl p-6"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
        >
          <h3 className="text-[20px] font-bold text-[#121F3D] dark:text-white mb-4">Trust Score</h3>

          <div className="flex flex-col items-center">
            <div className="relative w-32 h-32 mb-4">
              <svg viewBox="0 0 100 100" className="w-full h-full">
                {/* Background circle */}
                <circle
                  cx="50"
                  cy="50"
                  r="45"
                  fill="none"
                  stroke="#E4E1FF"
                  strokeWidth="10"
                  className="dark:stroke-[#322F5D]"
                />
                {/* Progress circle */}
                <circle
                  cx="50"
                  cy="50"
                  r="45"
                  fill="none"
                  stroke="#6C63FF"
                  strokeWidth="10"
                  strokeDasharray={`${userData.trustScore * 2.83} 283`}
                  strokeDashoffset="0"
                  strokeLinecap="round"
                  transform="rotate(-90 50 50)"
                  className="dark:stroke-[#8075FF]"
                />
                {/* Center text */}
                <text
                  x="50"
                  y="50"
                  textAnchor="middle"
                  dy="0.3em"
                  fontSize="24"
                  fontWeight="bold"
                  fill="#121F3D"
                  className="dark:fill-white"
                >
                  {userData.trustScore}%
                </text>
              </svg>
            </div>

            <div className="flex items-center mb-2">
              {[1, 2, 3, 4, 5].map((star) => (
                <Star
                  key={star}
                  className="h-5 w-5 text-[#FFD166] dark:text-[#FFE066] fill-[#FFD166] dark:fill-[#FFE066]"
                />
              ))}
            </div>

            <p className="text-center text-[#121F3D]/70 dark:text-[#B6B8CF]">
              Based on {userData.feedback.length} transactions
            </p>
          </div>

          <div className="mt-6 space-y-2">
            <div className="flex justify-between items-center">
              <span className="text-[14px] text-[#121F3D]/70 dark:text-[#B6B8CF]">On-time Shipping</span>
              <span className="text-[14px] font-medium text-[#121F3D] dark:text-white">100%</span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-[14px] text-[#121F3D]/70 dark:text-[#B6B8CF]">Item as Described</span>
              <span className="text-[14px] font-medium text-[#121F3D] dark:text-white">98%</span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-[14px] text-[#121F3D]/70 dark:text-[#B6B8CF]">Communication</span>
              <span className="text-[14px] font-medium text-[#121F3D] dark:text-white">95%</span>
            </div>
          </div>
        </motion.div>
      </div>
    </div>
  )
}

```

`/home/sam/hack-pro/Vynix-v0/components/profile/profile-settings.tsx`:

```tsx
"use client"

import { useEffect, useState } from "react"
import Image from "next/image"
import { motion, AnimatePresence } from "framer-motion"
import { X, Upload, Check } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Switch } from "@/components/ui/switch"
import { Label } from "@/components/ui/label"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"

interface ProfileSettingsProps {
  isOpen: boolean
  onClose: () => void
}

export function ProfileSettings({ isOpen, onClose }: ProfileSettingsProps) {
  const [activeTab, setActiveTab] = useState("profile")

  // Close on escape key
  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === "Escape") {
        onClose()
      }
    }

    window.addEventListener("keydown", handleEscape)
    return () => window.removeEventListener("keydown", handleEscape)
  }, [onClose])

  // Prevent body scroll when modal is open
  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = "hidden"
    } else {
      document.body.style.overflow = "auto"
    }

    return () => {
      document.body.style.overflow = "auto"
    }
  }, [isOpen])

  return (
    <AnimatePresence>
      {isOpen && (
        <>
          {/* Backdrop */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.2 }}
            className="fixed inset-0 bg-black/50 backdrop-blur-sm z-40"
            onClick={onClose}
          />

          {/* Settings Panel */}
          <motion.div
            initial={{ x: "100%" }}
            animate={{ x: 0 }}
            exit={{ x: "100%" }}
            transition={{ type: "spring", damping: 30, stiffness: 300 }}
            className="fixed top-0 right-0 h-full w-full md:w-[500px] bg-white dark:bg-[#131525] shadow-xl z-50 overflow-y-auto"
          >
            <div className="p-6">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-[24px] font-bold text-[#121F3D] dark:text-white">Settings</h2>
                <Button
                  variant="ghost"
                  size="icon"
                  className="rounded-full hover:bg-[#F9F9FB] dark:hover:bg-[#1A1C36]"
                  onClick={onClose}
                >
                  <X className="h-5 w-5 text-[#121F3D]/70 dark:text-[#B6B8CF]" />
                </Button>
              </div>

              <Tabs defaultValue="profile" value={activeTab} onValueChange={setActiveTab} className="w-full">
                <TabsList className="bg-[#F9F9FB] dark:bg-[#1A1C36] rounded-full p-1 w-full mb-6">
                  <TabsTrigger
                    value="profile"
                    className="rounded-full data-[state=active]:bg-white dark:data-[state=active]:bg-[#131525] data-[state=active]:text-[#121F3D] dark:data-[state=active]:text-white data-[state=active]:font-medium text-[#121F3D]/70 dark:text-[#B6B8CF] flex-1"
                  >
                    Profile
                  </TabsTrigger>
                  <TabsTrigger
                    value="account"
                    className="rounded-full data-[state=active]:bg-white dark:data-[state=active]:bg-[#131525] data-[state=active]:text-[#121F3D] dark:data-[state=active]:text-white data-[state=active]:font-medium text-[#121F3D]/70 dark:text-[#B6B8CF] flex-1"
                  >
                    Account
                  </TabsTrigger>
                  <TabsTrigger
                    value="notifications"
                    className="rounded-full data-[state=active]:bg-white dark:data-[state=active]:bg-[#131525] data-[state=active]:text-[#121F3D] dark:data-[state=active]:text-white data-[state=active]:font-medium text-[#121F3D]/70 dark:text-[#B6B8CF] flex-1"
                  >
                    Notifications
                  </TabsTrigger>
                </TabsList>

                <TabsContent value="profile" className="space-y-6">
                  {/* Profile Picture */}
                  <div className="flex flex-col items-center">
                    <div className="relative w-24 h-24 rounded-full overflow-hidden border-2 border-white dark:border-[#1A1C36] shadow-lg mb-4">
                      <Image src="/placeholder.svg?key=b86ly" alt="Profile" fill className="object-cover" />
                      <div className="absolute inset-0 bg-black/0 hover:bg-black/30 transition-all duration-200 flex items-center justify-center opacity-0 hover:opacity-100 cursor-pointer">
                        <Upload className="h-6 w-6 text-white" />
                      </div>
                    </div>
                    <Button
                      variant="outline"
                      size="sm"
                      className="rounded-full text-[#6C63FF] dark:text-[#8075FF] border-[#6C63FF] dark:border-[#8075FF] hover:bg-[#E4E1FF] dark:hover:bg-[#322F5D]"
                    >
                      Change Photo
                    </Button>
                  </div>

                  {/* Profile Info */}
                  <div className="space-y-4">
                    <div>
                      <Label htmlFor="username" className="text-[#121F3D]/70 dark:text-[#B6B8CF]">
                        Username
                      </Label>
                      <Input
                        id="username"
                        defaultValue="CardCollector"
                        className="bg-[#F9F9FB] dark:bg-[#1A1C36] border-[#E4E1FF] dark:border-[#352F7E] text-[#121F3D] dark:text-white mt-1"
                      />
                    </div>

                    <div>
                      <Label htmlFor="location" className="text-[#121F3D]/70 dark:text-[#B6B8CF]">
                        Location
                      </Label>
                      <Input
                        id="location"
                        defaultValue="New York, USA"
                        className="bg-[#F9F9FB] dark:bg-[#1A1C36] border-[#E4E1FF] dark:border-[#352F7E] text-[#121F3D] dark:text-white mt-1"
                      />
                    </div>

                    <div>
                      <Label htmlFor="bio" className="text-[#121F3D]/70 dark:text-[#B6B8CF]">
                        Bio
                      </Label>
                      <Textarea
                        id="bio"
                        defaultValue="Passionate Pokémon card collector since 1999. Specializing in first edition holos and Japanese promos."
                        className="bg-[#F9F9FB] dark:bg-[#1A1C36] border-[#E4E1FF] dark:border-[#352F7E] text-[#121F3D] dark:text-white mt-1 min-h-[100px]"
                      />
                    </div>

                    <div>
                      <Label className="text-[#121F3D]/70 dark:text-[#B6B8CF]">Social Links</Label>
                      <div className="space-y-2 mt-1">
                        <Input
                          placeholder="Twitter"
                          defaultValue="https://twitter.com/cardcollector"
                          className="bg-[#F9F9FB] dark:bg-[#1A1C36] border-[#E4E1FF] dark:border-[#352F7E] text-[#121F3D] dark:text-white"
                        />
                        <Input
                          placeholder="Instagram"
                          defaultValue="https://instagram.com/cardcollector"
                          className="bg-[#F9F9FB] dark:bg-[#1A1C36] border-[#E4E1FF] dark:border-[#352F7E] text-[#121F3D] dark:text-white"
                        />
                        <Input
                          placeholder="YouTube"
                          defaultValue="https://youtube.com/cardcollector"
                          className="bg-[#F9F9FB] dark:bg-[#1A1C36] border-[#E4E1FF] dark:border-[#352F7E] text-[#121F3D] dark:text-white"
                        />
                      </div>
                    </div>
                  </div>
                </TabsContent>

                <TabsContent value="account" className="space-y-6">
                  {/* Account Settings */}
                  <div className="space-y-4">
                    <div>
                      <Label htmlFor="email" className="text-[#121F3D]/70 dark:text-[#B6B8CF]">
                        Email Address
                      </Label>
                      <Input
                        id="email"
                        type="email"
                        defaultValue="collector@example.com"
                        className="bg-[#F9F9FB] dark:bg-[#1A1C36] border-[#E4E1FF] dark:border-[#352F7E] text-[#121F3D] dark:text-white mt-1"
                      />
                    </div>

                    <div>
                      <Label htmlFor="password" className="text-[#121F3D]/70 dark:text-[#B6B8CF]">
                        Password
                      </Label>
                      <Input
                        id="password"
                        type="password"
                        defaultValue="••••••••••••"
                        className="bg-[#F9F9FB] dark:bg-[#1A1C36] border-[#E4E1FF] dark:border-[#352F7E] text-[#121F3D] dark:text-white mt-1"
                      />
                    </div>

                    <div className="pt-2">
                      <h4 className="text-[16px] font-medium text-[#121F3D] dark:text-white mb-4">Connected Wallets</h4>

                      <div className="bg-[#F9F9FB] dark:bg-[#1A1C36] rounded-lg p-4 flex items-center justify-between">
                        <div>
                          <div className="font-medium text-[#121F3D] dark:text-white">Ethereum Wallet</div>
                          <div className="text-[14px] text-[#121F3D]/70 dark:text-[#B6B8CF]">0x1a2b...3c4d</div>
                        </div>
                        <div className="bg-[#4ECCA3]/10 text-[#4ECCA3] px-2 py-1 rounded-full text-xs flex items-center">
                          <Check className="h-3 w-3 mr-1" />
                          Connected
                        </div>
                      </div>

                      <Button
                        variant="outline"
                        size="sm"
                        className="mt-3 rounded-full text-[#6C63FF] dark:text-[#8075FF] border-[#6C63FF] dark:border-[#8075FF] hover:bg-[#E4E1FF] dark:hover:bg-[#322F5D]"
                      >
                        Connect Another Wallet
                      </Button>
                    </div>

                    <div className="pt-2">
                      <h4 className="text-[16px] font-medium text-[#121F3D] dark:text-white mb-4">Privacy</h4>

                      <div className="space-y-4">
                        <div className="flex items-center justify-between">
                          <div>
                            <Label className="text-[#121F3D] dark:text-white font-medium">Public Profile</Label>
                            <p className="text-[14px] text-[#121F3D]/70 dark:text-[#B6B8CF]">
                              Allow others to view your profile
                            </p>
                          </div>
                          <Switch defaultChecked />
                        </div>

                        <div className="flex items-center justify-between">
                          <div>
                            <Label className="text-[#121F3D] dark:text-white font-medium">Show Collection Value</Label>
                            <p className="text-[14px] text-[#121F3D]/70 dark:text-[#B6B8CF]">
                              Display the total value of your collection
                            </p>
                          </div>
                          <Switch defaultChecked />
                        </div>
                      </div>
                    </div>
                  </div>
                </TabsContent>

                <TabsContent value="notifications" className="space-y-6">
                  {/* Notification Settings */}
                  <div className="space-y-4">
                    <h4 className="text-[16px] font-medium text-[#121F3D] dark:text-white">Email Notifications</h4>

                    <div className="space-y-4">
                      <div className="flex items-center justify-between">
                        <div>
                          <Label className="text-[#121F3D] dark:text-white font-medium">New Offers</Label>
                          <p className="text-[14px] text-[#121F3D]/70 dark:text-[#B6B8CF]">
                            Receive emails when someone makes an offer
                          </p>
                        </div>
                        <Switch defaultChecked />
                      </div>

                      <div className="flex items-center justify-between">
                        <div>
                          <Label className="text-[#121F3D] dark:text-white font-medium">Price Alerts</Label>
                          <p className="text-[14px] text-[#121F3D]/70 dark:text-[#B6B8CF]">
                            Get notified about price changes on watched cards
                          </p>
                        </div>
                        <Switch defaultChecked />
                      </div>

                      <div className="flex items-center justify-between">
                        <div>
                          <Label className="text-[#121F3D] dark:text-white font-medium">New Drops</Label>
                          <p className="text-[14px] text-[#121F3D]/70 dark:text-[#B6B8CF]">
                            Receive emails about new card drops
                          </p>
                        </div>
                        <Switch />
                      </div>

                      <div className="flex items-center justify-between">
                        <div>
                          <Label className="text-[#121F3D] dark:text-white font-medium">Marketing Emails</Label>
                          <p className="text-[14px] text-[#121F3D]/70 dark:text-[#B6B8CF]">
                            Receive promotional emails and newsletters
                          </p>
                        </div>
                        <Switch />
                      </div>
                    </div>

                    <h4 className="text-[16px] font-medium text-[#121F3D] dark:text-white pt-4">Push Notifications</h4>

                    <div className="space-y-4">
                      <div className="flex items-center justify-between">
                        <div>
                          <Label className="text-[#121F3D] dark:text-white font-medium">
                            Enable Push Notifications
                          </Label>
                          <p className="text-[14px] text-[#121F3D]/70 dark:text-[#B6B8CF]">
                            Receive notifications on your device
                          </p>
                        </div>
                        <Switch defaultChecked />
                      </div>

                      <div className="flex items-center justify-between">
                        <div>
                          <Label className="text-[#121F3D] dark:text-white font-medium">Transaction Updates</Label>
                          <p className="text-[14px] text-[#121F3D]/70 dark:text-[#B6B8CF]">
                            Get notified about your transaction status
                          </p>
                        </div>
                        <Switch defaultChecked />
                      </div>
                    </div>
                  </div>
                </TabsContent>
              </Tabs>

              <div className="mt-8 flex justify-end gap-3">
                <Button
                  variant="outline"
                  className="rounded-full border-[#E4E1FF] dark:border-[#352F7E] text-[#121F3D]/70 dark:text-[#B6B8CF] hover:bg-[#F9F9FB] dark:hover:bg-[#1A1C36]"
                  onClick={onClose}
                >
                  Cancel
                </Button>
                <Button
                  className="rounded-full bg-[#6C63FF] dark:bg-[#8075FF] text-white hover:bg-[#5D51FF] dark:hover:bg-[#6C63FF]"
                  onClick={onClose}
                >
                  Save Changes
                </Button>
              </div>
            </div>
          </motion.div>
        </>
      )}
    </AnimatePresence>
  )
}

```

`/home/sam/hack-pro/Vynix-v0/components/profile/profile-activity.tsx`:

```tsx
"use client"

import { useState } from "react"
import Image from "next/image"
import { motion } from "framer-motion"
import { ChevronDown, ChevronUp } from "lucide-react"
import { Badge } from "@/components/ui/badge"

// Generate mock activity data
const generateActivity = (count: number) => {
  const activityTypes = ["Purchased", "Sold", "Listed", "Traded", "Favorited"]
  const cardNames = ["Charizard", "Pikachu", "Blastoise", "Venusaur", "Mewtwo", "Mew", "Gyarados", "Dragonite"]
  const sets = ["Base Set", "Jungle", "Fossil", "Team Rocket", "Gym Heroes"]

  // Generate dates within the last 3 months
  const getRandomDate = () => {
    const now = new Date()
    const threeMonthsAgo = new Date()
    threeMonthsAgo.setMonth(now.getMonth() - 3)

    const randomTimestamp = threeMonthsAgo.getTime() + Math.random() * (now.getTime() - threeMonthsAgo.getTime())
    return new Date(randomTimestamp)
  }

  // Sort activities by date (newest first)
  return Array.from({ length: count }, (_, i) => {
    const id = (i + 1).toString()
    const type = activityTypes[Math.floor(Math.random() * activityTypes.length)]
    const cardName = cardNames[Math.floor(Math.random() * cardNames.length)]
    const set = sets[Math.floor(Math.random() * sets.length)]
    const date = getRandomDate()
    const price = type !== "Favorited" ? Math.floor(Math.random() * 5000) + 50 : null

    return {
      id,
      type,
      cardName,
      set,
      date,
      price,
      image: `/placeholder.svg?height=100&width=70&query=${cardName} pokemon card`,
    }
  }).sort((a, b) => b.date.getTime() - a.date.getTime())
}

const activities = generateActivity(15)

// Group activities by month
const groupActivitiesByMonth = (activities: any[]) => {
  const grouped: Record<string, any[]> = {}

  activities.forEach((activity) => {
    const monthYear = activity.date.toLocaleDateString("en-US", { month: "long", year: "numeric" })
    if (!grouped[monthYear]) {
      grouped[monthYear] = []
    }
    grouped[monthYear].push(activity)
  })

  return grouped
}

const groupedActivities = groupActivitiesByMonth(activities)

export function ProfileActivity() {
  const [expandedActivity, setExpandedActivity] = useState<string | null>(null)

  const toggleActivityDetails = (id: string) => {
    if (expandedActivity === id) {
      setExpandedActivity(null)
    } else {
      setExpandedActivity(id)
    }
  }

  const getActivityColor = (type: string) => {
    switch (type) {
      case "Purchased":
        return "bg-[#4ECCA3]/10 text-[#4ECCA3] border-[#4ECCA3]/30"
      case "Sold":
        return "bg-[#6C63FF]/10 text-[#6C63FF] border-[#6C63FF]/30"
      case "Listed":
        return "bg-[#FFD166]/10 text-[#FFD166] border-[#FFD166]/30"
      case "Traded":
        return "bg-[#FF6B6B]/10 text-[#FF6B6B] border-[#FF6B6B]/30"
      case "Favorited":
        return "bg-[#FF6B6B]/10 text-[#FF6B6B] border-[#FF6B6B]/30"
      default:
        return "bg-[#6C63FF]/10 text-[#6C63FF] border-[#6C63FF]/30"
    }
  }

  return (
    <div>
      {Object.keys(groupedActivities).length > 0 ? (
        <div className="space-y-8">
          {Object.entries(groupedActivities).map(([monthYear, monthActivities]) => (
            <div key={monthYear}>
              <h3 className="text-[16px] font-medium text-[#121F3D]/70 dark:text-[#B6B8CF] mb-4">{monthYear}</h3>

              <div className="space-y-4">
                {monthActivities.map((activity) => (
                  <motion.div
                    key={activity.id}
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.3 }}
                    className="bg-[#F9F9FB] dark:bg-[#1A1C36] rounded-xl overflow-hidden"
                  >
                    {/* Activity Summary */}
                    <div
                      className="p-4 flex items-center cursor-pointer"
                      onClick={() => toggleActivityDetails(activity.id)}
                    >
                      <div className="relative h-14 w-10 rounded overflow-hidden mr-4">
                        <Image
                          src={activity.image || "/placeholder.svg"}
                          alt={activity.cardName}
                          fill
                          className="object-cover"
                        />
                      </div>

                      <div className="flex-1">
                        <div className="flex items-center">
                          <Badge
                            className={`${getActivityColor(activity.type)} border rounded-full px-2 py-0.5 text-xs`}
                          >
                            {activity.type}
                          </Badge>
                          <span className="text-[14px] text-[#121F3D]/70 dark:text-[#B6B8CF] ml-2">
                            {activity.date.toLocaleDateString("en-US", { month: "short", day: "numeric" })}
                          </span>
                        </div>

                        <h4 className="font-medium text-[#121F3D] dark:text-white mt-1">
                          {activity.cardName}{" "}
                          <span className="font-normal text-[14px] text-[#121F3D]/70 dark:text-[#B6B8CF]">
                            ({activity.set})
                          </span>
                        </h4>
                      </div>

                      <div className="flex items-center">
                        {activity.price && (
                          <span className="font-medium text-[#121F3D] dark:text-white mr-3">
                            ${activity.price.toLocaleString()}
                          </span>
                        )}
                        {expandedActivity === activity.id ? (
                          <ChevronUp className="h-5 w-5 text-[#121F3D]/70 dark:text-[#B6B8CF]" />
                        ) : (
                          <ChevronDown className="h-5 w-5 text-[#121F3D]/70 dark:text-[#B6B8CF]" />
                        )}
                      </div>
                    </div>

                    {/* Expanded Details */}
                    {expandedActivity === activity.id && (
                      <div className="px-4 pb-4 pt-2 border-t border-[#E4E1FF]/50 dark:border-[#352F7E]/20">
                        <div className="bg-white dark:bg-[#131525] rounded-lg p-3">
                          <div className="grid grid-cols-2 gap-4">
                            <div>
                              <div className="text-[14px] text-[#121F3D]/70 dark:text-[#B6B8CF]">Transaction ID</div>
                              <div className="text-[#121F3D] dark:text-white font-medium">
                                #{Math.random().toString(36).substring(2, 10).toUpperCase()}
                              </div>
                            </div>
                            <div>
                              <div className="text-[14px] text-[#121F3D]/70 dark:text-[#B6B8CF]">Date & Time</div>
                              <div className="text-[#121F3D] dark:text-white font-medium">
                                {activity.date.toLocaleString()}
                              </div>
                            </div>
                            {activity.price && (
                              <>
                                <div>
                                  <div className="text-[14px] text-[#121F3D]/70 dark:text-[#B6B8CF]">Price</div>
                                  <div className="text-[#121F3D] dark:text-white font-medium">
                                    ${activity.price.toLocaleString()}
                                  </div>
                                </div>
                                <div>
                                  <div className="text-[14px] text-[#121F3D]/70 dark:text-[#B6B8CF]">
                                    Payment Method
                                  </div>
                                  <div className="text-[#121F3D] dark:text-white font-medium">Ethereum</div>
                                </div>
                              </>
                            )}
                          </div>
                        </div>
                      </div>
                    )}
                  </motion.div>
                ))}
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div className="flex flex-col items-center justify-center py-16">
          <p className="text-[#121F3D]/70 dark:text-[#B6B8CF]">No activity to display</p>
        </div>
      )}
    </div>
  )
}

// Make sure we're exporting the component properly
export default ProfileActivity

```

`/home/sam/hack-pro/Vynix-v0/components/profile/profile-page.tsx`:

```tsx
"use client"

import { useState } from "react"
import Image from "next/image"
import { motion } from "framer-motion"
import { Check, ExternalLink } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { ProfileCollection } from "@/components/profile/profile-collection"
import ProfileActivity from "@/components/profile/profile-activity"
import { ProfileFavorites } from "@/components/profile/profile-favorites"
import { ProfileAbout } from "@/components/profile/profile-about"
import { ProfileSettings } from "@/components/profile/profile-settings"
import { cn } from "@/lib/utils"
import { usePrivy, useWallets } from "@privy-io/react-auth"

// Mock user data
const userData = {
  username: "CardCollector",
  verified: true,
  joinDate: "Member since May 2023",
  location: "New York, USA",
  profileImage: "/placeholder.svg?key=kpnmz",
  stats: {
    collectionValue: "$45,250",
    cardsOwned: 124,
    completedTrades: 37,
  },
  wallet: {
    address: "0x1a2b...3c4d",
    connected: true,
  },
}

export function ProfilePage() {
  const [activeTab, setActiveTab] = useState("collection")
  const [isSettingsOpen, setIsSettingsOpen] = useState(false)
  const [scrolled, setScrolled] = useState(false)
  const {user} = usePrivy();
  const {wallets} = useWallets();
  console.log("user", user?.createdAt.getMonth())

  // Handle scroll events to adjust header
  const handleScroll = () => {
    const offset = window.scrollY
    if (offset > 100) {
      setScrolled(true)
    } else {
      setScrolled(false)
    }
  }
  
  // Add scroll event listener
  if (typeof window !== "undefined") {
    window.addEventListener("scroll", handleScroll)
  }

  // Check if user and createdAt exist before formatting the date
  const joinDateString = user?.createdAt 
    ? `Member Since ${getMonthName(user.createdAt.getUTCMonth())} ${user.createdAt.getFullYear()}` 
    : "Loading join date..."; // Or some placeholder

  // Check if wallets array has at least one wallet before accessing it
  const displayAddress = wallets && wallets.length > 0 
    ? `${wallets[0].address.slice(0, 4)}...${wallets[0].address.slice(-4)}` 
    : "Loading address..."; // Or some placeholder

  return (
    <div className="min-h-screen pt-32 pb-20 bg-white dark:bg-[#131525] relative overflow-hidden">
      {/* Subtle background pattern */}
      <div className="absolute top-0 left-0 w-full h-full -z-10">
        <div className="absolute top-1/4 left-1/4 w-[500px] h-[500px] rounded-full bg-[#6C63FF]/5 dark:bg-[#6C63FF]/5 blur-[100px] animate-float"></div>
        <div className="absolute bottom-1/4 right-1/4 w-[600px] h-[600px] rounded-full bg-[#FF6B6B]/5 dark:bg-[#FF6B6B]/5 blur-[120px] animate-float-delayed"></div>
      </div>

      <div className="max-w-7xl mx-auto px-4">
        {/* Profile Header */}
        <motion.div
          className={cn(
            "flex flex-col md:flex-row items-center md:items-start gap-6 md:gap-10 mb-12 transition-all duration-300",
            scrolled && "md:mb-8",
          )}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          {/* Profile Image */}
          <motion.div
            className="relative w-20 h-20 rounded-full overflow-hidden border-2 border-white dark:border-[#1A1C36] shadow-lg"
            animate={{ y: [0, -5, 0] }}
            transition={{ repeat: Number.POSITIVE_INFINITY, duration: 6, ease: "easeInOut" }}
          >
            <Image
              src={`https://api.dicebear.com/9.x/notionists/svg?seed=${user?.id}`}
              alt={userData.username}
              fill
              className="object-cover"
              priority
            />
          </motion.div>

          {/* Profile Info */}
          <div className="flex flex-col items-center md:items-start">
            <div className="flex items-center gap-2 mb-1">
              <h1 className="text-[28px] font-bold text-[#121F3D] dark:text-white">{user?.google?.name}</h1>
              {userData.verified && (
                <div className="bg-[#6C63FF] dark:bg-[#8075FF] rounded-full p-0.5">
                  <Check className="h-4 w-4 text-white" />
                </div>
              )}
            </div>
            <div className="flex flex-col md:flex-row items-center gap-1 md:gap-4 text-[14px] text-[#121F3D]/70 dark:text-[#B6B8CF] mb-4">
              <span>{joinDateString}</span>
              <span className="hidden md:inline">•</span>
              <span>{userData.location}</span>
            </div>

            {/* Stats Pills */}
            <div className="flex flex-wrap gap-4 mt-2">
              <div className="bg-[#F9F9FB] dark:bg-[#1A1C36] rounded-full px-4 py-2 text-center min-w-[100px]">
                <div className="font-bold text-[#121F3D] dark:text-white">{userData.stats.collectionValue}</div>
                <div className="text-[14px] text-[#121F3D]/70 dark:text-[#B6B8CF]">Collection</div>
              </div>
              <div className="bg-[#F9F9FB] dark:bg-[#1A1C36] rounded-full px-4 py-2 text-center min-w-[100px]">
                <div className="font-bold text-[#121F3D] dark:text-white">{userData.stats.cardsOwned}</div>
                <div className="text-[14px] text-[#121F3D]/70 dark:text-[#B6B8CF]">Cards</div>
              </div>
              <div className="bg-[#F9F9FB] dark:bg-[#1A1C36] rounded-full px-4 py-2 text-center min-w-[100px]">
                <div className="font-bold text-[#121F3D] dark:text-white">{userData.stats.completedTrades}</div>
                <div className="text-[14px] text-[#121F3D]/70 dark:text-[#B6B8CF]">Trades</div>
              </div>
            </div>
          </div>

          {/* Wallet & Edit Profile */}
          <div className="flex gap-3 ml-auto mt-0 md:mt-2">
            <Button
              variant="outline"
              className="rounded-full border-[#E4E1FF] dark:border-[#352F7E] text-[#121F3D]/70 dark:text-[#B6B8CF] hover:bg-[#F9F9FB] dark:hover:bg-[#1A1C36]"
            >
              {displayAddress}
              <ExternalLink className="ml-2 h-3 w-3" />
            </Button>
            <Button
              variant="outline"
              className="rounded-full border-[#6C63FF] dark:border-[#8075FF] text-[#6C63FF] dark:text-[#8075FF] hover:bg-[#E4E1FF] dark:hover:bg-[#322F5D]"
              onClick={() => setIsSettingsOpen(true)}
            >
              Edit Profile
            </Button>
          </div>
        </motion.div>

        {/* Navigation Tabs */}
        <div
          className={cn(
            "sticky top-20 z-30 bg-white/80 dark:bg-[#131525]/80 backdrop-blur-md transition-all duration-300 py-4",
            scrolled && "shadow-sm border-b border-[#E4E1FF]/50 dark:border-[#352F7E]/20",
          )}
        >
          <Tabs defaultValue="collection" value={activeTab} onValueChange={setActiveTab} className="w-full">
            <TabsList className="bg-[#F9F9FB] dark:bg-[#1A1C36] rounded-full p-1 w-full max-w-md mx-auto">
              <TabsTrigger
                value="collection"
                className="rounded-full data-[state=active]:bg-white dark:data-[state=active]:bg-[#131525] data-[state=active]:text-[#121F3D] dark:data-[state=active]:text-white data-[state=active]:font-medium text-[#121F3D]/70 dark:text-[#B6B8CF] px-6"
              >
                Collection
              </TabsTrigger>
              <TabsTrigger
                value="activity"
                className="rounded-full data-[state=active]:bg-white dark:data-[state=active]:bg-[#131525] data-[state=active]:text-[#121F3D] dark:data-[state=active]:text-white data-[state=active]:font-medium text-[#121F3D]/70 dark:text-[#B6B8CF] px-6"
              >
                Activity
              </TabsTrigger>
              <TabsTrigger
                value="favorites"
                className="rounded-full data-[state=active]:bg-white dark:data-[state=active]:bg-[#131525] data-[state=active]:text-[#121F3D] dark:data-[state=active]:text-white data-[state=active]:font-medium text-[#121F3D]/70 dark:text-[#B6B8CF] px-6"
              >
                Favorites
              </TabsTrigger>
              <TabsTrigger
                value="about"
                className="rounded-full data-[state=active]:bg-white dark:data-[state=active]:bg-[#131525] data-[state=active]:text-[#121F3D] dark:data-[state=active]:text-white data-[state=active]:font-medium text-[#121F3D]/70 dark:text-[#B6B8CF] px-6"
              >
                About
              </TabsTrigger>
            </TabsList>

            <TabsContent value="collection" className="mt-8">
              <ProfileCollection />
            </TabsContent>

            <TabsContent value="activity" className="mt-8">
              <ProfileActivity />
            </TabsContent>

            <TabsContent value="favorites" className="mt-8">
              <ProfileFavorites />
            </TabsContent>

            <TabsContent value="about" className="mt-8">
              <ProfileAbout />
            </TabsContent>
          </Tabs>
        </div>
      </div>

      {/* Settings Slide-in Panel */}
      <ProfileSettings isOpen={isSettingsOpen} onClose={() => setIsSettingsOpen(false)} />
    </div>
  )
}

function getMonthName(monthNumber: number): string {
  switch (monthNumber) {
    case 0:
      return "Jan";
    case 1:
      return "Feb";
    case 2:
      return "March";
    case 3:
      return "April";
    case 4:
      return "May";
    case 5:
      return "June";
    case 6:
      return "July";
    case 7:
      return "August";
    case 8:
      return "September";
    case 9:
      return "October";
    case 10:
      return "November";
    case 11:
      return "December";
    default:
      // Handle cases where the input is not between 0 and 11
      console.error(`Invalid month number: ${monthNumber}`);
      return "Invalid Month"; 
  }
}
```

`/home/sam/hack-pro/Vynix-v0/components/main-nav.tsx`:

```tsx
"use client"

import { useState, useEffect } from "react"
import Image from "next/image"
import Link from "next/link"
import { usePathname } from "next/navigation"
import { motion, AnimatePresence } from "framer-motion"
import {
  Navbar,
  NavBody,
  NavItems,
  MobileNav,
  MobileNavHeader,
  MobileNavToggle,
  MobileNavMenu,
  NavbarButton,
} from "@/components/ui/resizable-navbar"
import { VynixLogo } from "@/components/ui/logo"
import { ThemeToggle } from "@/components/theme-toggle"
import { Plus, Search, Bell, X } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { cn } from "@/lib/utils"
import { usePrivy } from "@privy-io/react-auth"

export function MainNav() {
  const pathname = usePathname()
  const navItems = [
    // { name: "Cards", link: "#" },
    // { name: "Sets", link: "#" },
    { name: "Auctions", link: "#" },
    { name: "Marketplace", link: "/marketplace" },
    // { name: "Drops", link: "#" },
  ]
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false)
  const [isSearchExpanded, setIsSearchExpanded] = useState(false)
  const [isProfileDropdownOpen, setIsProfileDropdownOpen] = useState(false)
  const [pftImg, setPfpImg] = useState<string>("https://api.dicebear.com/9.x/glass/svg?seed=Vynix")

  // This would be replaced with actual authentication logic
  const [isAuthenticated, setIsAuthenticated] = useState(false)
  const {login, authenticated, ready, user} = usePrivy()
  // Toggle authentication for demo purposes
  const handleLogin = () => login({loginMethods: ["google", "email"]})

  const handleLogout = () => {
    setIsAuthenticated(false)
  }
  let pfpImg;
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      const target = event.target as Node
      const dropdown = document.getElementById("profile-dropdown")
      if (dropdown && !dropdown.contains(target)) {
        setIsProfileDropdownOpen(false)
      }
    }
    if (authenticated && ready ){
       setIsAuthenticated(true)
    }
    if (isProfileDropdownOpen) {
      document.addEventListener("mousedown", handleClickOutside)
    }

    return () => {
      document.removeEventListener("mousedown", handleClickOutside)
    }
  }, [isProfileDropdownOpen, authenticated, ready])

  return (
    <Navbar>
      {/* Desktop Navigation */}
      <NavBody>
        <motion.div layout>
        <Link href='/'>
          <VynixLogo />
          </Link>
        </motion.div>
        <NavItems
          items={navItems.map((item) => ({
            ...item,
            active: pathname === item.link,
          }))}
        />
        <div className="flex items-center gap-2">
          {/* Search Bar */}
          <div className="relative">
            <AnimatePresence>
              {isSearchExpanded ? (
                <motion.div
                  initial={{ width: 40, opacity: 0 }}
                  animate={{ width: 200, opacity: 1 }}
                  exit={{ width: 40, opacity: 0 }}
                  transition={{ duration: 0.3, ease: "easeInOut" }}
                  className="flex items-center"
                >
                  <Input
                    type="text"
                    placeholder="Search..."
                    className="pr-8 rounded-full bg-white/80 dark:bg-[#1A1A1A]/80 border-[#E4E1FF] dark:border-[#2A2A2A]"
                    autoFocus
                  />
                  <Button
                    variant="ghost"
                    size="icon"
                    className="absolute right-0 rounded-full"
                    onClick={() => setIsSearchExpanded(false)}
                  >
                    <X className="h-4 w-4 text-[#121F3D] dark:text-[#E0E0E0]" />
                  </Button>
                </motion.div>
              ) : (
                <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }}>
                  <Button
                    variant="ghost"
                    size="icon"
                    className="rounded-full"
                    onClick={() => setIsSearchExpanded(true)}
                  >
                    <Search className="h-5 w-5 text-[#121F3D] dark:text-[#E0E0E0]" />
                  </Button>
                </motion.div>
              )}
            </AnimatePresence>
          </div>

          {isAuthenticated ? (
            <>
              {/* Create Button - Only shown when authenticated */}
              <div className="relative group">
                <Link href="/marketplace/create">
                  <Button
                    className={cn(
                      "rounded-full text-white bg-gradient-to-r from-[#6C63FF] to-[#5D51FF] dark:from-[#8075FF] dark:to-[#6C63FF] hover:from-[#5D51FF] hover:to-[#6C63FF] hover:scale-105 transition-transform",
                      pathname.includes("/marketplace/create") && "shadow-[0_0_15px_rgba(108,99,255,0.3)]",
                    )}
                  >
                    <Plus className="h-4 w-4 mr-1" />
                    Create
                  </Button>
                </Link>
                <div className="absolute right-0 mt-2 w-48 rounded-xl bg-white dark:bg-[#1A1A1A] shadow-lg border border-[#E4E1FF] dark:border-[#2A2A2A] p-2 hidden group-hover:block z-10">
                  <Link href="/marketplace/create">
                    <button className="w-full text-left px-3 py-2 rounded-lg text-sm hover:bg-[#F8F9FF] dark:hover:bg-[#1A1A1A] text-[#121F3D] dark:text-[#E0E0E0]">
                      List a Card
                    </button>
                  </Link>
                  <button className="w-full text-left px-3 py-2 rounded-lg text-sm hover:bg-[#F8F9FF] dark:hover:bg-[#1A1A1A] text-[#121F3D] dark:text-[#E0E0E0]">
                    Bulk Upload
                  </button>
                  <button className="w-full text-left px-3 py-2 rounded-lg text-sm hover:bg-[#F8F9FF] dark:hover:bg-[#1A1A1A] text-[#121F3D] dark:text-[#E0E0E0]">
                    Create Collection
                  </button>
                </div>
              </div>

              {/* Authenticated Actions */}
              <ThemeToggle />
              {/* <Button variant="ghost" size="icon" className="rounded-full relative">
                <Bell className="h-5 w-5 text-[#121F3D] dark:text-[#E0E0E0]" />
                <span className="absolute top-0 right-0 h-2 w-2 bg-[#FF6B6B] dark:bg-[#FF7E7E] rounded-full"></span>
              </Button> */}
              <div className="relative">
                <button
                  className="h-9 w-9 rounded-full overflow-hidden border-2 border-white dark:border-[#1A1C36] focus:outline-none focus:ring-2 focus:ring-[#6C63FF] dark:focus:ring-[#8075FF]"
                  onClick={() => setIsProfileDropdownOpen(!isProfileDropdownOpen)}
                >
                    <Image
                      src={`https://api.dicebear.com/9.x/notionists/svg?seed=${user?.id}`}
                      alt="Profile"
                      width={36}
                      height={36}
                      className="object-cover"
                    />
                  
                </button>

                {isProfileDropdownOpen && (
                  <div
                    id="profile-dropdown"
                    className="absolute right-0 mt-2 w-48 rounded-xl bg-white dark:bg-[#1A1A1A] shadow-lg border border-[#E4E1FF] dark:border-[#2A2A2A] p-2 z-20"
                  >
                    <Link href="/profile">
                      <button className="w-full text-left px-3 py-2 rounded-lg text-sm hover:bg-[#F8F9FF] dark:hover:bg-[#1A1A1A] text-[#121F3D] dark:text-[#E0E0E0]">
                        My Profile
                      </button>
                    </Link>
                    <Link href="/marketplace">
                      <button className="w-full text-left px-3 py-2 rounded-lg text-sm hover:bg-[#F8F9FF] dark:hover:bg-[#1A1A1A] text-[#121F3D] dark:text-[#E0E0E0]">
                        My Collection
                      </button>
                    </Link>
                    <Link href="/marketplace">
                      <button className="w-full text-left px-3 py-2 rounded-lg text-sm hover:bg-[#F8F9FF] dark:hover:bg-[#1A1A1A] text-[#121F3D] dark:text-[#E0E0E0]">
                        Settings
                      </button>
                    </Link>
                    <div className="my-1 border-t border-[#E4E1FF] dark:border-[#2A2A2A]"></div>
                    <button
                      className="w-full text-left px-3 py-2 rounded-lg text-sm hover:bg-[#F8F9FF] dark:hover:bg-[#1A1A1A] text-[#FF6B6B] dark:text-[#FF7E7E]"
                      onClick={handleLogout}
                    >
                      Logout
                    </button>
                  </div>
                )}
              </div>
            </>
          ) : (
            <>
              {/* Unauthenticated Actions */}
              <ThemeToggle />
              <Button
                className="rounded-full z-20 text-white bg-gradient-to-r from-[#6C63FF] to-[#5D51FF] dark:from-[#8075FF] dark:to-[#6C63FF] hover:from-[#5D51FF] hover:to-[#6C63FF]"
                onClick={handleLogin}
              >
                Get Started
              </Button>
            </>
          )}
        </div>
      </NavBody>

      {/* Mobile Navigation */}
      <MobileNav>
        <MobileNavHeader>
          <VynixLogo size="sm" />
          <div className="flex items-center gap-2">
            {/* Mobile Search */}
            <AnimatePresence>
              {isSearchExpanded ? (
                <motion.div
                  initial={{ width: 40, opacity: 0 }}
                  animate={{ width: 150, opacity: 1 }}
                  exit={{ width: 40, opacity: 0 }}
                  transition={{ duration: 0.3, ease: "easeInOut" }}
                  className="relative"
                >
                  <Input
                    type="text"
                    placeholder="Search..."
                    className="pr-8 h-9 rounded-full bg-white/80 dark:bg-[#1A1A1A]/80 border-[#E4E1FF] dark:border-[#2A2A2A]"
                    autoFocus
                  />
                  <Button
                    variant="ghost"
                    size="icon"
                    className="absolute right-0 top-0 h-9 w-9 rounded-full"
                    onClick={() => setIsSearchExpanded(false)}
                  >
                    <X className="h-4 w-4 text-[#121F3D] dark:text-[#E0E0E0]" />
                  </Button>
                </motion.div>
              ) : (
                <Button variant="ghost" size="icon" className="rounded-full" onClick={() => setIsSearchExpanded(true)}>
                  <Search className="h-5 w-5 text-[#121F3D] dark:text-[#E0E0E0]" />
                </Button>
              )}
            </AnimatePresence>

            {isAuthenticated && (
              <Link href="/marketplace/create">
                <Button
                  size="icon"
                  className="rounded-full bg-gradient-to-r from-[#6C63FF] to-[#5D51FF] dark:from-[#8075FF] dark:to-[#6C63FF]"
                >
                  <Plus className="h-5 w-5" />
                </Button>
              </Link>
            )}
            <ThemeToggle />
            <MobileNavToggle isOpen={isMobileMenuOpen} onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)} />
          </div>
        </MobileNavHeader>

        <MobileNavMenu isOpen={isMobileMenuOpen} onClose={() => setIsMobileMenuOpen(false)}>
          {navItems.map((item, idx) => (
            <a
              key={`mobile-link-${idx}`}
              href={item.link}
              onClick={() => setIsMobileMenuOpen(false)}
              className={`relative text-[#121F3D] dark:text-[#E0E0E0] font-medium text-lg py-2 ${
                pathname === item.link ? "text-[#6C63FF] dark:text-[#8075FF]" : ""
              }`}
            >
              <span className="block">{item.name}</span>
              {pathname === item.link && (
                <span className="absolute -bottom-1 left-0 right-0 h-0.5 bg-[#6C63FF] dark:bg-[#8075FF] rounded-full" />
              )}
            </a>
          ))}

          {isAuthenticated ? (
            <>
              <div className="pt-4 border-t border-[#E4E1FF]/20 dark:border-[#2A2A2A] mt-4">
                <h3 className="text-[#121F3D]/70 dark:text-[#B6B8CF] text-sm mb-2">Create</h3>
                <a
                  href="/marketplace/create"
                  onClick={() => setIsMobileMenuOpen(false)}
                  className="block text-[#121F3D] dark:text-[#E0E0E0] font-medium py-2"
                >
                  List a Card
                </a>
                <a
                  href="#"
                  onClick={() => setIsMobileMenuOpen(false)}
                  className="block text-[#121F3D] dark:text-[#E0E0E0] font-medium py-2"
                >
                  Bulk Upload
                </a>
                <a
                  href="/marketplace/create"
                  onClick={() => setIsMobileMenuOpen(false)}
                  className="block text-[#121F3D] dark:text-[#E0E0E0] font-medium py-2"
                >
                  Create Collection
                </a>
              </div>
              <div className="pt-4 border-t border-[#E4E1FF]/20 dark:border-[#2A2A2A] mt-4">
                <a
                  href="/profile"
                  onClick={() => setIsMobileMenuOpen(false)}
                  className="block text-[#121F3D] dark:text-[#E0E0E0] font-medium py-2"
                >
                  My Profile
                </a>
                <a
                  href="#"
                  onClick={() => {
                    setIsAuthenticated(false)
                    setIsMobileMenuOpen(false)
                  }}
                  className="block text-[#121F3D] dark:text-[#E0E0E0] font-medium py-2"
                >
                  Logout
                </a>
              </div>
            </>
          ) : (
            <div className="flex w-full flex-col gap-4 pt-4 border-t border-[#E4E1FF]/20 dark:border-[#2A2A2A] mt-4">
              <NavbarButton
                onClick={() => {
                  setIsAuthenticated(true)
                  setIsMobileMenuOpen(false)
                }}
                variant="primary"
                className="w-full"
              >
                Get Started
              </NavbarButton>
            </div>
          )}
        </MobileNavMenu>
      </MobileNav>
    </Navbar>
  )
}

```

`/home/sam/hack-pro/Vynix-v0/components/store/contract.ts`:

```ts
import {createStore } from "zustand"
import { useSendTransaction } from "@privy-io/react-auth"



```

`/home/sam/hack-pro/Vynix-v0/components/store/config.ts`:

```ts
import { addRpcUrlOverrideToChain } from '@privy-io/react-auth';
import {http, createConfig} from '@wagmi/core';
import { defineChain } from 'viem'
import { injected, metaMask, safe, walletConnect } from 'wagmi/connectors'

const projectId = 'df1b443fd552341b785dd2ba56fbae1e';

export const pharosDevnet = defineChain({
  id: 50002,
  name: 'Pharos',
  network: 'pharos-devnet',
  nativeCurrency: {
    name: 'Ethereum',
    symbol: 'ETH',
    decimals: 18,
  },
  rpcUrls: {
    default: {
      http: ['https://devnet.dplabs-internal.com'],
      webSocket: ['wss://devnet.dplabs-internal.com'],
    },
    public: {
      http: ['https://devnet.dplabs-internal.com'],
      webSocket: ['wss://devnet.dplabs-internal.com'],
    },
  },
  blockExplorers: {
    default: {
      name: 'Pharos Explorer',
      url: 'https://pharosscan.xyz/',
    },
  },
  testnet: true,
})


export const config = createConfig({
    chains: [pharosDevnet],
    connectors: [
      injected(),
      walletConnect({ projectId }),
      metaMask(),
      safe(),
    ],
    transports: {
        [pharosDevnet.id]: http()
    }
})

export const pharosChainRpc = addRpcUrlOverrideToChain(
  pharosDevnet, 
  'https://devnet.dplabs-internal.com'
);
```

`/home/sam/hack-pro/Vynix-v0/components/store/constant.ts`:

```ts
export const CONTRACT_ADDRESS="0x5852f85d20FAd98FB73F90D1B1375dDe8FdEe9A0";

export const MARKETPLACE_CONTRACT_ADDRESS="0x90ff786bA756A4EBB0354CA7ABB5035BF242067a";

export const INITIAL_OWNER="0x2229F286910b338b957c340630028D5A6c9D55F3";
```

`/home/sam/hack-pro/Vynix-v0/components.json`:

```json
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
```

`/home/sam/hack-pro/Vynix-v0/hooks/use-mobile.tsx`:

```tsx
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

```

`/home/sam/hack-pro/Vynix-v0/hooks/use-toast.ts`:

```ts
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

```

`/home/sam/hack-pro/Vynix-v0/lib/utils.ts`:

```ts
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

```

`/home/sam/hack-pro/Vynix-v0/lib/provider.tsx`:

```tsx
'use client';

import { pharosChainRpc } from '@/components/store/config';
import { PrivyProvider } from '@privy-io/react-auth';

export default function Provider({ children }: { children: React.ReactNode }) {
  return (
    <PrivyProvider
      appId="cm9xlc3oo01cml30m640hsclh"
      config={{
        appearance: {
          landingHeader: "Vynix",
          loginMessage: "Log in or Sign up to Vynix"
        },
        supportedChains: [pharosChainRpc],
        defaultChain: pharosChainRpc,
        embeddedWallets: {
          createOnLogin: 'all-users',
        },
      }}
    >
      {children}
    </PrivyProvider>
  );
}

```

`/home/sam/hack-pro/Vynix-v0/next.config.mjs`:

```mjs
/** @type {import('next').NextConfig} */
const nextConfig = {
  eslint: {
    ignoreDuringBuilds: true,
  },
  typescript: {
    ignoreBuildErrors: true,
  },
  images: {
    unoptimized: true,
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'api.dicebear.com',
        port: '',
        pathname: '/9.x/glass/svg/**',
      },
    ],
  },
}

export default nextConfig

```

`/home/sam/hack-pro/Vynix-v0/package.json`:

```json
{
  "name": "my-v0-project",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@emotion/is-prop-valid": "latest",
    "@hookform/resolvers": "^3.9.1",
    "@privy-io/react-auth": "^2.11.1",
    "@radix-ui/react-accordion": "1.2.2",
    "@radix-ui/react-alert-dialog": "1.1.4",
    "@radix-ui/react-aspect-ratio": "1.1.1",
    "@radix-ui/react-avatar": "1.1.2",
    "@radix-ui/react-checkbox": "1.1.3",
    "@radix-ui/react-collapsible": "1.1.2",
    "@radix-ui/react-context-menu": "2.2.4",
    "@radix-ui/react-dialog": "1.1.4",
    "@radix-ui/react-dropdown-menu": "2.1.4",
    "@radix-ui/react-hover-card": "1.1.4",
    "@radix-ui/react-label": "latest",
    "@radix-ui/react-menubar": "1.1.4",
    "@radix-ui/react-navigation-menu": "1.2.3",
    "@radix-ui/react-popover": "1.1.4",
    "@radix-ui/react-progress": "latest",
    "@radix-ui/react-radio-group": "1.2.2",
    "@radix-ui/react-scroll-area": "1.2.2",
    "@radix-ui/react-select": "2.1.4",
    "@radix-ui/react-separator": "1.1.1",
    "@radix-ui/react-slider": "1.2.2",
    "@radix-ui/react-slot": "1.1.1",
    "@radix-ui/react-switch": "1.1.2",
    "@radix-ui/react-tabs": "1.1.2",
    "@radix-ui/react-toast": "1.2.4",
    "@radix-ui/react-toggle": "1.1.1",
    "@radix-ui/react-toggle-group": "1.1.1",
    "@radix-ui/react-tooltip": "1.1.6",
    "@tabler/icons-react": "^3.31.0",
    "@wagmi/core": "^2.17.0",
    "autoprefixer": "^10.4.20",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "1.0.4",
    "date-fns": "4.1.0",
    "embla-carousel-react": "8.5.1",
    "framer-motion": "latest",
    "input-otp": "1.4.1",
    "lucide-react": "^0.454.0",
    "motion": "^12.9.2",
    "next": "15.2.4",
    "next-themes": "latest",
    "react": "^19",
    "react-day-picker": "8.10.1",
    "react-dom": "^19",
    "react-hook-form": "^7.54.1",
    "react-resizable-panels": "^2.1.7",
    "recharts": "latest",
    "sonner": "^1.7.1",
    "tailwind-merge": "^3.2.0",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.9.6",
    "wagmi": "^2.15.0",
    "zod": "^3.24.1",
    "zustand": "^5.0.3"
  },
  "devDependencies": {
    "@types/node": "^22",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "postcss": "^8",
    "tailwindcss": "^3.4.17",
    "typescript": "^5"
  }
}
```

`/home/sam/hack-pro/Vynix-v0/postcss.config.mjs`:

```mjs
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

```

`/home/sam/hack-pro/Vynix-v0/public/placeholder-logo.svg`:

```svg
<svg xmlns="http://www.w3.org/2000/svg" width="215" height="48" fill="none"><path fill="#000" d="M57.588 9.6h6L73.828 38h-5.2l-2.36-6.88h-11.36L52.548 38h-5.2l10.24-28.4Zm7.16 17.16-4.16-12.16-4.16 12.16h8.32Zm23.694-2.24c-.186-1.307-.706-2.32-1.56-3.04-.853-.72-1.866-1.08-3.04-1.08-1.68 0-2.986.613-3.92 1.84-.906 1.227-1.36 2.947-1.36 5.16s.454 3.933 1.36 5.16c.934 1.227 2.24 1.84 3.92 1.84 1.254 0 2.307-.373 3.16-1.12.854-.773 1.387-1.867 1.6-3.28l5.12.24c-.186 1.68-.733 3.147-1.64 4.4-.906 1.227-2.08 2.173-3.52 2.84-1.413.667-2.986 1-4.72 1-2.08 0-3.906-.453-5.48-1.36-1.546-.907-2.76-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84 0-2.24.427-4.187 1.28-5.84.88-1.68 2.094-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.68 0 3.227.32 4.64.96 1.414.64 2.56 1.56 3.44 2.76.907 1.2 1.454 2.6 1.64 4.2l-5.12.28Zm11.486-7.72.12 3.4c.534-1.227 1.307-2.173 2.32-2.84 1.04-.693 2.267-1.04 3.68-1.04 1.494 0 2.76.387 3.8 1.16 1.067.747 1.827 1.813 2.28 3.2.507-1.44 1.294-2.52 2.36-3.24 1.094-.747 2.414-1.12 3.96-1.12 1.414 0 2.64.307 3.68.92s1.84 1.52 2.4 2.72c.56 1.2.84 2.667.84 4.4V38h-4.96V25.92c0-1.813-.293-3.187-.88-4.12-.56-.96-1.413-1.44-2.56-1.44-.906 0-1.68.213-2.32.64-.64.427-1.133 1.053-1.48 1.88-.32.827-.48 1.84-.48 3.04V38h-4.56V25.92c0-1.2-.133-2.213-.4-3.04-.24-.827-.626-1.453-1.16-1.88-.506-.427-1.133-.64-1.88-.64-.906 0-1.68.227-2.32.68-.64.427-1.133 1.053-1.48 1.88-.32.827-.48 1.827-.48 3V38h-4.96V16.8h4.48Zm26.723 10.6c0-2.24.427-4.187 1.28-5.84.854-1.68 2.067-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.84 0 3.494.413 4.96 1.24 1.467.827 2.64 2.08 3.52 3.76.88 1.653 1.347 3.693 1.4 6.12v1.32h-15.08c.107 1.813.614 3.227 1.52 4.24.907.987 2.134 1.48 3.68 1.48.987 0 1.88-.253 2.68-.76a4.803 4.803 0 0 0 1.84-2.2l5.08.36c-.64 2.027-1.84 3.64-3.6 4.84-1.733 1.173-3.733 1.76-6 1.76-2.08 0-3.906-.453-5.48-1.36-1.573-.907-2.786-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84Zm15.16-2.04c-.213-1.733-.76-3.013-1.64-3.84-.853-.827-1.893-1.24-3.12-1.24-1.44 0-2.6.453-3.48 1.36-.88.88-1.44 2.12-1.68 3.72h9.92ZM163.139 9.6V38h-5.04V9.6h5.04Zm8.322 7.2.24 5.88-.64-.36c.32-2.053 1.094-3.56 2.32-4.52 1.254-.987 2.787-1.48 4.6-1.48 2.32 0 4.107.733 5.36 2.2 1.254 1.44 1.88 3.387 1.88 5.84V38h-4.96V25.92c0-1.253-.12-2.28-.36-3.08-.24-.8-.64-1.413-1.2-1.84-.533-.427-1.253-.64-2.16-.64-1.44 0-2.573.48-3.4 1.44-.8.933-1.2 2.307-1.2 4.12V38h-4.96V16.8h4.48Zm30.003 7.72c-.186-1.307-.706-2.32-1.56-3.04-.853-.72-1.866-1.08-3.04-1.08-1.68 0-2.986.613-3.92 1.84-.906 1.227-1.36 2.947-1.36 5.16s.454 3.933 1.36 5.16c.934 1.227 2.24 1.84 3.92 1.84 1.254 0 2.307-.373 3.16-1.12.854-.773 1.387-1.867 1.6-3.28l5.12.24c-.186 1.68-.733 3.147-1.64 4.4-.906 1.227-2.08 2.173-3.52 2.84-1.413.667-2.986 1-4.72 1-2.08 0-3.906-.453-5.48-1.36-1.546-.907-2.76-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84 0-2.24.427-4.187 1.28-5.84.88-1.68 2.094-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.68 0 3.227.32 4.64.96 1.414.64 2.56 1.56 3.44 2.76.907 1.2 1.454 2.6 1.64 4.2l-5.12.28Zm11.443 8.16V38h-5.6v-5.32h5.6Z"/><path fill="#171717" fill-rule="evenodd" d="m7.839 40.783 16.03-28.054L20 6 0 40.783h7.839Zm8.214 0H40L27.99 19.894l-4.02 7.032 3.976 6.914H20.02l-3.967 6.943Z" clip-rule="evenodd"/></svg>
```

`/home/sam/hack-pro/Vynix-v0/public/placeholder.svg`:

```svg
<svg xmlns="http://www.w3.org/2000/svg" width="1200" height="1200" fill="none"><rect width="1200" height="1200" fill="#EAEAEA" rx="3"/><g opacity=".5"><g opacity=".5"><path fill="#FAFAFA" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/></g><path stroke="url(#a)" stroke-width="2.418" d="M0-1.209h553.581" transform="scale(1 -1) rotate(45 1163.11 91.165)"/><path stroke="url(#b)" stroke-width="2.418" d="M404.846 598.671h391.726"/><path stroke="url(#c)" stroke-width="2.418" d="M599.5 795.742V404.017"/><path stroke="url(#d)" stroke-width="2.418" d="m795.717 796.597-391.441-391.44"/><path fill="#fff" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/><g clip-path="url(#e)"><path fill="#666" fill-rule="evenodd" d="M616.426 586.58h-31.434v16.176l3.553-3.554.531-.531h9.068l.074-.074 8.463-8.463h2.565l7.18 7.181V586.58Zm-15.715 14.654 3.698 3.699 1.283 1.282-2.565 2.565-1.282-1.283-5.2-5.199h-6.066l-5.514 5.514-.073.073v2.876a2.418 2.418 0 0 0 2.418 2.418h26.598a2.418 2.418 0 0 0 2.418-2.418v-8.317l-8.463-8.463-7.181 7.181-.071.072Zm-19.347 5.442v4.085a6.045 6.045 0 0 0 6.046 6.045h26.598a6.044 6.044 0 0 0 6.045-6.045v-7.108l1.356-1.355-1.282-1.283-.074-.073v-17.989h-38.689v23.43l-.146.146.146.147Z" clip-rule="evenodd"/></g><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/></g><defs><linearGradient id="a" x1="554.061" x2="-.48" y1=".083" y2=".087" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="b" x1="796.912" x2="404.507" y1="599.963" y2="599.965" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="c" x1="600.792" x2="600.794" y1="403.677" y2="796.082" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="d" x1="404.85" x2="796.972" y1="403.903" y2="796.02" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><clipPath id="e"><path fill="#fff" d="M581.364 580.535h38.689v38.689h-38.689z"/></clipPath></defs></svg>
```

`/home/sam/hack-pro/Vynix-v0/styles/globals.css`:

```css
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

```

`/home/sam/hack-pro/Vynix-v0/tailwind.config.ts`:

```ts
import type { Config } from "tailwindcss"

const config = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
    "*.{js,ts,jsx,tsx,mdx}",
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config

export default config

```

`/home/sam/hack-pro/Vynix-v0/tsconfig.json`:

```json
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "target": "ES6",
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

```

`/home/sam/hack-pro/Vynix-v0/foundry/Makefile`:

```
.PHONY: build deploy generate-abis get-address account chain compile flatten fork format lint test verify

DEPLOY_SCRIPT ?= script/Deploy.s.sol

# setup wallet for anvil
setup-anvil-wallet:
	shx rm ~/.foundry/keystores/scaffold-eth-default 2>/dev/null; 	shx rm -rf broadcast/Deploy.s.sol/31337
	cast wallet import --private-key 0x2a871d0798f97d79848a013d4936a73bf4cc922c825d33c1cf7073dff6d409c6 --unsafe-password 'localhost' scaffold-eth-default

# Start local chain
chain: setup-anvil-wallet
	anvil

# Start a fork
fork: setup-anvil-wallet
	anvil --fork-url ${FORK_URL} --chain-id 31337

# Deploy the contracts
deploy:
	@if [ ! -f "$(DEPLOY_SCRIPT)" ]; then 		echo "Error: Deploy script '$(DEPLOY_SCRIPT)' not found"; 		exit 1; 	fi
	@if [ "$(RPC_URL)" = "localhost" ]; then 		if [ "$(ETH_KEYSTORE_ACCOUNT)" = "scaffold-eth-default" ]; then 			forge script $(DEPLOY_SCRIPT) --rpc-url localhost --password localhost --broadcast --legacy --ffi; 		else 			forge script $(DEPLOY_SCRIPT) --rpc-url localhost --broadcast --legacy --ffi; 		fi 	else 		forge script $(DEPLOY_SCRIPT) --rpc-url $(RPC_URL) --broadcast --legacy --ffi; 	fi

# Deploy and generate ABIs
deploy-and-generate-abis: deploy generate-abis 

# Generate TypeScript ABIs
generate-abis:
	node scripts-js/generateTsAbis.js

# List account
account:
	@node scripts-js/checkAccountBalance.js

# Get address of a keystore
get-address:
	@cast wallet address --account $(ACCOUNT_NAME)

# Compile contracts
compile:
	forge compile

# Flatten contracts
flatten:
	forge flatten

# Format code
format:
	forge fmt && prettier --write ./scripts-js/**/*.js

# Lint code
lint:
	forge fmt --check && prettier --check ./script/**/*.js

# Run tests
test:
	forge test

# Verify contracts
verify:
	forge script script/VerifyAll.s.sol --ffi --rpc-url $(RPC_URL)


```

`/home/sam/hack-pro/Vynix-v0/foundry/contracts/SE2NFT.sol`:

```sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

/**
 * @title VynixCard - The NFT contract for Vynix trading cards
 */
contract VynixCard is ERC721URIStorage, Ownable {
    // ID tracker for new tokens
    uint256 private _nextTokenId;
    
    // Events
    event CardCreated(uint256 indexed tokenId, address owner, string tokenURI);
    
    constructor(address initialOwner) ERC721("VynixCard", "VYNX") Ownable(initialOwner) {}
    
    // Function to mint a new trading card
    function createCard(
        address player,
        string memory tokenURI
    ) public returns (uint256) {
        uint256 newCardId = _nextTokenId++;
        
        _mint(player, newCardId);
        _setTokenURI(newCardId, tokenURI);
        
        emit CardCreated(newCardId, player, tokenURI);
        
        return newCardId;
    }
    
    // Batch create cards
    function batchCreateCards(
        address[] memory players,
        string[] memory tokenURIs
    ) public returns (uint256[] memory) {
        require(
            players.length == tokenURIs.length,
            "Input arrays must have the same length"
        );
        
        uint256[] memory newCardIds = new uint256[](players.length);
        
        for (uint256 i = 0; i < players.length; i++) {
            newCardIds[i] = createCard(
                players[i],
                tokenURIs[i]
            );
        }
        
        return newCardIds;
    }
}

```

`/home/sam/hack-pro/Vynix-v0/foundry/contracts/TradingCardMarketplace.sol`:

```sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";

import { VynixCard } from "./contract.sol";


/**
 * @title VynixMarketplace - Marketplace for buying, selling and auctioning Vynix cards
 */
contract VynixMarketplace is ReentrancyGuard, Ownable {
    // ID trackers
    uint256 private _nextListingId = 1;
    uint256 private _nextAuctionId = 1;
    uint256 private _nextOfferId = 1;
    
    // Fee settings
    uint256 public marketplaceFeePercentage = 250; // 2.5% (in basis points)
    
    // Emergency stop
    bool public paused = false;
    
    // Reference to the trading card contract
    VynixCard public vynixCardContract;
    
    // Market structs
    struct Listing {
        uint256 tokenId;
        address payable seller;
        uint256 price;
        bool active;
    }
    
    struct Auction {
        uint256 tokenId;
        address payable seller;
        uint256 startingPrice;
        uint256 currentBid;
        address payable highestBidder;
        uint256 endTime;
        bool active;
    }
    
    struct Offer {
        uint256 tokenId;
        address payable buyer;
        uint256 amount;
        uint256 expiration;
        bool active;
    }
    
    // Market mappings
    mapping(uint256 => Listing) public listings;
    mapping(uint256 => Auction) public auctions;
    mapping(uint256 => Offer) public offers;
    
    // Market stats
    uint256 public totalVolume;
    uint256 public totalSales;
    
    // Events
    event CardListed(uint256 indexed listingId, uint256 indexed tokenId, address seller, uint256 price);
    event CardSold(uint256 indexed listingId, uint256 indexed tokenId, address seller, address buyer, uint256 price);
    event ListingCancelled(uint256 indexed listingId, uint256 indexed tokenId, address seller);
    event AuctionCreated(uint256 indexed auctionId, uint256 indexed tokenId, address seller, uint256 startingPrice, uint256 endTime);
    event BidPlaced(uint256 indexed auctionId, uint256 indexed tokenId, address bidder, uint256 bid);
    event AuctionEnded(uint256 indexed auctionId, uint256 indexed tokenId, address winner, uint256 amount);
    event OfferCreated(uint256 indexed offerId, uint256 indexed tokenId, address buyer, uint256 amount, uint256 expiration);
    event OfferAccepted(uint256 indexed offerId, uint256 indexed tokenId, address seller, address buyer, uint256 amount);
    event OfferCancelled(uint256 indexed offerId, uint256 indexed tokenId, address buyer);
    
    // Modifiers
    modifier notPaused() {
        require(!paused, "Marketplace is paused");
        _;
    }
    
    constructor(address _vynixCardAddress, address initialOwner) Ownable(initialOwner) {
        vynixCardContract = VynixCard(_vynixCardAddress);
    }
    
    // =============== Admin functions ===============
    
    function pause() external onlyOwner {
        paused = true;
    }
    
    function unpause() external onlyOwner {
        paused = false;
    }
    
    function setMarketplaceFee(uint256 _feePercentage) external onlyOwner {
        require(_feePercentage <= 1000, "Fee cannot exceed 10%");
        marketplaceFeePercentage = _feePercentage;
    }
    
    function withdrawFunds() external onlyOwner {
        uint256 balance = address(this).balance;
        require(balance > 0, "No funds to withdraw");
        
        (bool success, ) = payable(owner()).call{value: balance}("");
        require(success, "Withdrawal failed");
    }
    
    // =============== Listing functions ===============
    
    function listCard(uint256 tokenId, uint256 price) external notPaused nonReentrant {
        require(price > 0, "Price must be greater than 0");
        require(vynixCardContract.ownerOf(tokenId) == msg.sender, "Not the card owner");
        require(
            vynixCardContract.getApproved(tokenId) == address(this) || 
            vynixCardContract.isApprovedForAll(msg.sender, address(this)),
            "Marketplace not approved to transfer card"
        );
        
        uint256 listingId = _nextListingId++;
        
        listings[listingId] = Listing(
            tokenId,
            payable(msg.sender),
            price,
            true
        );
        
        emit CardListed(listingId, tokenId, msg.sender, price);
    }
    
    function buyCard(uint256 listingId) external payable notPaused nonReentrant {
        Listing storage listing = listings[listingId];
        require(listing.active, "Listing is not active");
        require(msg.value == listing.price, "Incorrect payment amount");
        
        address cardOwner = vynixCardContract.ownerOf(listing.tokenId);
        require(cardOwner == listing.seller, "Seller no longer owns this card");
        
        listing.active = false;
        
        // Calculate marketplace fee
        uint256 fee = (msg.value * marketplaceFeePercentage) / 10000;
        uint256 sellerProceeds = msg.value - fee;
        
        // Transfer the card
        vynixCardContract.safeTransferFrom(listing.seller, msg.sender, listing.tokenId);
        
        // Transfer payment to seller
        (bool success, ) = listing.seller.call{value: sellerProceeds}("");
        require(success, "Failed to send payment to seller");
        
        // Update stats
        totalVolume += msg.value;
        totalSales++;
        
        emit CardSold(listingId, listing.tokenId, listing.seller, msg.sender, msg.value);
    }
    
    function cancelListing(uint256 listingId) external nonReentrant {
        Listing storage listing = listings[listingId];
        require(listing.active, "Listing is not active");
        require(listing.seller == msg.sender || owner() == msg.sender, "Not authorized to cancel");
        
        listing.active = false;
        
        emit ListingCancelled(listingId, listing.tokenId, listing.seller);
    }
    
    // =============== Auction functions ===============
    
    function createAuction(uint256 tokenId, uint256 startingPrice, uint256 duration) external notPaused nonReentrant {
        require(startingPrice > 0, "Starting price must be greater than 0");
        require(duration >= 1 hours, "Duration too short");
        require(vynixCardContract.ownerOf(tokenId) == msg.sender, "Not the card owner");
        require(
            vynixCardContract.getApproved(tokenId) == address(this) || 
            vynixCardContract.isApprovedForAll(msg.sender, address(this)),
            "Marketplace not approved to transfer card"
        );
        
        uint256 auctionId = _nextAuctionId++;
        
        auctions[auctionId] = Auction(
            tokenId,
            payable(msg.sender),
            startingPrice,
            0,
            payable(address(0)),
            block.timestamp + duration,
            true
        );
        
        emit AuctionCreated(auctionId, tokenId, msg.sender, startingPrice, block.timestamp + duration);
    }
    
    function placeBid(uint256 auctionId) external payable notPaused nonReentrant {
        Auction storage auction = auctions[auctionId];
        require(auction.active, "Auction is not active");
        require(block.timestamp < auction.endTime, "Auction has ended");
        require(msg.sender != auction.seller, "Cannot bid on your own auction");
        
        // Check if seller still owns the card
        require(vynixCardContract.ownerOf(auction.tokenId) == auction.seller, "Seller no longer owns this card");
        
        // Check if bid is high enough
        if (auction.currentBid == 0) {
            require(msg.value >= auction.startingPrice, "Bid must be at least the starting price");
        } else {
            require(msg.value > auction.currentBid, "Bid must be higher than current bid");
            
            // Refund the previous highest bidder
            address payable previousBidder = auction.highestBidder;
            uint256 previousBid = auction.currentBid;
            
            (bool success, ) = previousBidder.call{value: previousBid}("");
            require(success, "Failed to refund previous bidder");
        }
        
        // Update auction state
        auction.currentBid = msg.value;
        auction.highestBidder = payable(msg.sender);
        
        emit BidPlaced(auctionId, auction.tokenId, msg.sender, msg.value);
    }
    
    function endAuction(uint256 auctionId) external nonReentrant {
        Auction storage auction = auctions[auctionId];
        require(auction.active, "Auction is not active");
        require(
            block.timestamp >= auction.endTime || 
            msg.sender == owner(),
            "Auction not yet ended or not admin"
        );
        
        auction.active = false;
        
        // If there were no bids, just end the auction
        if (auction.highestBidder == address(0)) {
            emit AuctionEnded(auctionId, auction.tokenId, address(0), 0);
            return;
        }
        
        // Calculate marketplace fee
        uint256 fee = (auction.currentBid * marketplaceFeePercentage) / 10000;
        uint256 sellerProceeds = auction.currentBid - fee;
        
        // Transfer the card to the highest bidder
        vynixCardContract.safeTransferFrom(auction.seller, auction.highestBidder, auction.tokenId);
        
        // Transfer payment to seller
        (bool success, ) = auction.seller.call{value: sellerProceeds}("");
        require(success, "Failed to send payment to seller");
        
        // Update stats
        totalVolume += auction.currentBid;
        totalSales++;
        
        emit AuctionEnded(auctionId, auction.tokenId, auction.highestBidder, auction.currentBid);
    }
    
    // =============== Offer functions ===============
    
    function makeOffer(uint256 tokenId, uint256 duration) external payable notPaused nonReentrant {
        require(msg.value > 0, "Offer amount must be greater than 0");
        require(duration >= 1 hours, "Duration too short");
        
        address cardOwner = vynixCardContract.ownerOf(tokenId);
        require(cardOwner != msg.sender, "Cannot make offer on your own card");
        
        uint256 offerId = _nextOfferId++;
        
        offers[offerId] = Offer(
            tokenId,
            payable(msg.sender),
            msg.value,
            block.timestamp + duration,
            true
        );
        
        emit OfferCreated(offerId, tokenId, msg.sender, msg.value, block.timestamp + duration);
    }
    
    function acceptOffer(uint256 offerId) external notPaused nonReentrant {
        Offer storage offer = offers[offerId];
        require(offer.active, "Offer is not active");
        require(block.timestamp < offer.expiration, "Offer has expired");
        
        address cardOwner = vynixCardContract.ownerOf(offer.tokenId);
        require(cardOwner == msg.sender, "Not the card owner");
        
        offer.active = false;
        
        // Calculate marketplace fee
        uint256 fee = (offer.amount * marketplaceFeePercentage) / 10000;
        uint256 sellerProceeds = offer.amount - fee;
        
        // Ensure approval
        require(
            vynixCardContract.getApproved(offer.tokenId) == address(this) || 
            vynixCardContract.isApprovedForAll(msg.sender, address(this)),
            "Marketplace not approved to transfer card"
        );
        
        // Transfer the card
        vynixCardContract.safeTransferFrom(msg.sender, offer.buyer, offer.tokenId);
        
        // Transfer payment to seller
        (bool success, ) = payable(msg.sender).call{value: sellerProceeds}("");
        require(success, "Failed to send payment to seller");
        
        // Update stats
        totalVolume += offer.amount;
        totalSales++;
        
        emit OfferAccepted(offerId, offer.tokenId, msg.sender, offer.buyer, offer.amount);
    }
    
    function cancelOffer(uint256 offerId) external nonReentrant {
        Offer storage offer = offers[offerId];
        require(offer.active, "Offer is not active");
        require(offer.buyer == msg.sender, "Not the offer creator");
        
        offer.active = false;
        
        // Refund the buyer
        (bool success, ) = offer.buyer.call{value: offer.amount}("");
        require(success, "Failed to refund buyer");
        
        emit OfferCancelled(offerId, offer.tokenId, offer.buyer);
    }
    
    // =============== View functions ===============
    
    function getActiveListings(uint256 startIndex, uint256 count) external view returns (uint256[] memory) {
        uint256 totalListings = _nextListingId - 1;
        uint256[] memory activeListingIds = new uint256[](count);
        
        uint256 currentIndex = 0;
        uint256 resultIndex = 0;
        
        for (uint256 i = 1; i <= totalListings && resultIndex < count; i++) {
            if (listings[i].active) {
                if (currentIndex >= startIndex) {
                    activeListingIds[resultIndex] = i;
                    resultIndex++;
                }
                currentIndex++;
            }
        }
        
        // Resize the array if we didn't fill it completely
        assembly {
            mstore(activeListingIds, resultIndex)
        }
        
        return activeListingIds;
    }
    
    function getActiveAuctions(uint256 startIndex, uint256 count) external view returns (uint256[] memory) {
        uint256 totalAuctions = _nextAuctionId - 1;
        uint256[] memory activeAuctionIds = new uint256[](count);
        
        uint256 currentIndex = 0;
        uint256 resultIndex = 0;
        
        for (uint256 i = 1; i <= totalAuctions && resultIndex < count; i++) {
            if (auctions[i].active && block.timestamp < auctions[i].endTime) {
                if (currentIndex >= startIndex) {
                    activeAuctionIds[resultIndex] = i;
                    resultIndex++;
                }
                currentIndex++;
            }
        }
        
        // Resize the array if we didn't fill it completely
        assembly {
            mstore(activeAuctionIds, resultIndex)
        }
        
        return activeAuctionIds;
    }
    
    function getStats() external view returns (uint256, uint256) {
        return (totalVolume, totalSales);
    }
}

```

`/home/sam/hack-pro/Vynix-v0/foundry/foundry.toml`:

```toml
[profile.default]
src = 'contracts'
out = 'out'
libs = ['lib']
fs_permissions = [{ access = "read-write", path = "./"}]


[rpc_endpoints]
default_network = "http://127.0.0.1:8545"

mainnet = "https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_API_KEY}"
sepolia = "https://eth-sepolia.g.alchemy.com/v2/${ALCHEMY_API_KEY}"
arbitrum = "https://arb-mainnet.g.alchemy.com/v2/${ALCHEMY_API_KEY}"
arbitrumSepolia = "https://arb-sepolia.g.alchemy.com/v2/${ALCHEMY_API_KEY}"
optimism = "https://opt-mainnet.g.alchemy.com/v2/${ALCHEMY_API_KEY}"
optimismSepolia = "https://opt-sepolia.g.alchemy.com/v2/${ALCHEMY_API_KEY}"
polygon = "https://polygon-mainnet.g.alchemy.com/v2/${ALCHEMY_API_KEY}"
polygonMumbai = "https://polygon-mumbai.g.alchemy.com/v2/${ALCHEMY_API_KEY}"
polygonZkEvm = "https://zkevm-rpc.com"
polygonZkEvmTestnet = "https://rpc.public.zkevm-test.net"
gnosis = "https://rpc.gnosischain.com"
chiado = "https://rpc.chiadochain.net"
base = "https://mainnet.base.org"
baseSepolia = "https://sepolia.base.org"
scrollSepolia = "https://sepolia-rpc.scroll.io"
scroll = "https://rpc.scroll.io"
pgn = "https://rpc.publicgoods.network"
pgnTestnet = "https://sepolia.publicgoods.network"


localhost = "http://127.0.0.1:8545"

[etherscan]
polygonMumbai = { key = "${ETHERSCAN_API_KEY}" }
sepolia = { key = "${ETHERSCAN_API_KEY}" }



[fmt]
line_length = 120
tab_width = 4
quote_style = "double"
bracket_spacing = true
int_types = "long"




# See more config options https://book.getfoundry.sh/reference/config/overview
```

`/home/sam/hack-pro/Vynix-v0/foundry/package.json`:

```json
{
  "name": "@vynix/foundary",
  "version": "0.0.1",
  "type": "module",
  "scripts": {
    "account": "make account",
    "account:generate": "node scripts-js/generateKeystore.js",
    "account:import": "node scripts-js/importAccount.js",
    "chain": "make chain",
    "clean": "forge clean",
    "compile": "make compile",
    "deploy": "node scripts-js/parseArgs.js",
    "flatten": "make flatten",
    "fork": "make fork FORK_URL=${1:-mainnet}",
    "format": "make format",
    "postinstall": "shx cp -n .env.example .env",
    "lint": "make lint",
    "test": "forge test",
    "verify": "make verify RPC_URL=${1:-localhost}"
  },
  "dependencies": {
    "dotenv": "~16.3.1",
    "envfile": "~6.18.0",
    "ethers": "~5.7.1",
    "prettier": "~2.8.8",
    "qrcode": "~1.5.3",
    "toml": "~3.0.0"
  },
  "devDependencies": {
    "shx": "^0.3.4"
  }
}

```

`/home/sam/hack-pro/Vynix-v0/foundry/remappings.txt`:

```txt
@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts

```

`/home/sam/hack-pro/Vynix-v0/foundry/script/Deploy.s.sol`:

```sol
//SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "./DeployHelpers.s.sol";
import { DeploySE2Nft } from "./DeploySE2Nft.s.sol";

/**
 * @notice Main deployment script for all contracts
 * @dev Run this when you want to deploy multiple contracts at once
 *
 * Example: yarn deploy # runs this script(without`--file` flag)
 */
contract DeployScript is ScaffoldETHDeploy {
    function run() external {
        // Deploys all your contracts sequentially
        // Add new deployments here when needed

        DeploySE2Nft deploySE2Nft = new DeploySE2Nft();
        deploySE2Nft.run();

        // Deploy another contract
        // DeployMyContract myContract = new DeployMyContract();
        // myContract.run();
    }
}

```

`/home/sam/hack-pro/Vynix-v0/foundry/script/DeployHelpers.s.sol`:

```sol
//SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import { Script, console } from "forge-std/Script.sol";
import { Vm } from "forge-std/Vm.sol";

contract ScaffoldETHDeploy is Script {
    error InvalidChain();
    error DeployerHasNoBalance();
    error InvalidPrivateKey(string);

    event AnvilSetBalance(address account, uint256 amount);
    event FailedAnvilRequest();

    struct Deployment {
        string name;
        address addr;
    }

    string root;
    string path;
    Deployment[] public deployments;
    uint256 constant ANVIL_BASE_BALANCE = 10000 ether;

    /// @notice The deployer address for every run
    address deployer;

    /// @notice Use this modifier on your run() function on your deploy scripts
    modifier ScaffoldEthDeployerRunner() {
        deployer = _startBroadcast();
        if (deployer == address(0)) {
            revert InvalidPrivateKey("Invalid private key");
        }
        _;
        _stopBroadcast();
        exportDeployments();
    }

    function _startBroadcast() internal returns (address) {
        vm.startBroadcast();
        (, address _deployer,) = vm.readCallers();

        if (block.chainid == 31337 && _deployer.balance == 0) {
            try this.anvil_setBalance(_deployer, ANVIL_BASE_BALANCE) {
                emit AnvilSetBalance(_deployer, ANVIL_BASE_BALANCE);
            } catch {
                emit FailedAnvilRequest();
            }
        }
        return _deployer;
    }

    function _stopBroadcast() internal {
        vm.stopBroadcast();
    }

    function exportDeployments() internal {
        // fetch already existing contracts
        root = vm.projectRoot();
        path = string.concat(root, "/deployments/");
        string memory chainIdStr = vm.toString(block.chainid);
        path = string.concat(path, string.concat(chainIdStr, ".json"));

        string memory jsonWrite;

        uint256 len = deployments.length;

        for (uint256 i = 0; i < len; i++) {
            vm.serializeString(jsonWrite, vm.toString(deployments[i].addr), deployments[i].name);
        }

        string memory chainName;

        try this.getChain() returns (Chain memory chain) {
            chainName = chain.name;
        } catch {
            chainName = findChainName();
        }
        jsonWrite = vm.serializeString(jsonWrite, "networkName", chainName);
        vm.writeJson(jsonWrite, path);
    }

    function getChain() public returns (Chain memory) {
        return getChain(block.chainid);
    }

    function anvil_setBalance(address addr, uint256 amount) public {
        string memory addressString = vm.toString(addr);
        string memory amountString = vm.toString(amount);
        string memory requestPayload = string.concat(
            '{"method":"anvil_setBalance","params":["', addressString, '","', amountString, '"],"id":1,"jsonrpc":"2.0"}'
        );

        string[] memory inputs = new string[](8);
        inputs[0] = "curl";
        inputs[1] = "-X";
        inputs[2] = "POST";
        inputs[3] = "http://localhost:8545";
        inputs[4] = "-H";
        inputs[5] = "Content-Type: application/json";
        inputs[6] = "--data";
        inputs[7] = requestPayload;

        vm.ffi(inputs);
    }

    function findChainName() public returns (string memory) {
        uint256 thisChainId = block.chainid;
        string[2][] memory allRpcUrls = vm.rpcUrls();
        for (uint256 i = 0; i < allRpcUrls.length; i++) {
            try vm.createSelectFork(allRpcUrls[i][1]) {
                if (block.chainid == thisChainId) {
                    return allRpcUrls[i][0];
                }
            } catch {
                continue;
            }
        }
        revert InvalidChain();
    }
}

```

`/home/sam/hack-pro/Vynix-v0/foundry/script/DeploySE2Nft.s.sol`:

```sol
//SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "../contracts/SE2NFT.sol";
import "./DeployHelpers.s.sol";

contract DeploySE2Nft is ScaffoldETHDeploy {
    function run() external ScaffoldEthDeployerRunner {
        SE2NFT se2Nft = new SE2NFT();
        console.logString(string.concat("SE2NFT deployed at: ", vm.toString(address(se2Nft))));
    }
}

```

`/home/sam/hack-pro/Vynix-v0/foundry/script/VerifyAll.s.sol`:

```sol
//SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "forge-std/Script.sol";
import "forge-std/Vm.sol";
import "solidity-bytes-utils/BytesLib.sol";

/**
 * @dev Temp Vm implementation
 * @notice calls the tryffi function on the Vm contract
 * @notice will be deleted once the forge/std is updated
 */
struct FfiResult {
    int32 exit_code;
    bytes stdout;
    bytes stderr;
}

interface tempVm {
    function tryFfi(string[] calldata) external returns (FfiResult memory);
}

contract VerifyAll is Script {
    uint96 currTransactionIdx;

    function run() external {
        string memory root = vm.projectRoot();
        string memory path =
            string.concat(root, "/broadcast/Deploy.s.sol/", vm.toString(block.chainid), "/run-latest.json");
        string memory content = vm.readFile(path);

        while (this.nextTransaction(content)) {
            _verifyIfContractDeployment(content);
            currTransactionIdx++;
        }
    }

    function _verifyIfContractDeployment(string memory content) internal {
        string memory txType =
            abi.decode(vm.parseJson(content, searchStr(currTransactionIdx, "transactionType")), (string));
        if (keccak256(bytes(txType)) == keccak256(bytes("CREATE"))) {
            _verifyContract(content);
        }
    }

    function _verifyContract(string memory content) internal {
        string memory contractName =
            abi.decode(vm.parseJson(content, searchStr(currTransactionIdx, "contractName")), (string));
        address contractAddr =
            abi.decode(vm.parseJson(content, searchStr(currTransactionIdx, "contractAddress")), (address));
        bytes memory deployedBytecode =
            abi.decode(vm.parseJson(content, searchStr(currTransactionIdx, "transaction.input")), (bytes));
        bytes memory compiledBytecode =
            abi.decode(vm.parseJson(_getCompiledBytecode(contractName), ".bytecode.object"), (bytes));
        bytes memory constructorArgs =
            BytesLib.slice(deployedBytecode, compiledBytecode.length, deployedBytecode.length - compiledBytecode.length);

        string[] memory inputs = new string[](9);
        inputs[0] = "forge";
        inputs[1] = "verify-contract";
        inputs[2] = vm.toString(contractAddr);
        inputs[3] = contractName;
        inputs[4] = "--chain";
        inputs[5] = vm.toString(block.chainid);
        inputs[6] = "--constructor-args";
        inputs[7] = vm.toString(constructorArgs);
        inputs[8] = "--watch";

        FfiResult memory f = tempVm(address(vm)).tryFfi(inputs);

        if (f.stderr.length != 0) {
            console.logString(string.concat("Submitting verification for contract: ", vm.toString(contractAddr)));
            console.logString(string(f.stderr));
        } else {
            console.logString(string(f.stdout));
        }
        return;
    }

    function nextTransaction(string memory content) external view returns (bool) {
        try this.getTransactionFromRaw(content, currTransactionIdx) {
            return true;
        } catch {
            return false;
        }
    }

    function _getCompiledBytecode(string memory contractName) internal view returns (string memory compiledBytecode) {
        string memory root = vm.projectRoot();
        string memory path = string.concat(root, "/out/", contractName, ".sol/", contractName, ".json");
        compiledBytecode = vm.readFile(path);
    }

    function getTransactionFromRaw(string memory content, uint96 idx) external pure {
        abi.decode(vm.parseJson(content, searchStr(idx, "hash")), (bytes32));
    }

    function searchStr(uint96 idx, string memory searchKey) internal pure returns (string memory) {
        return string.concat(".transactions[", vm.toString(idx), "].", searchKey);
    }
}

```

`/home/sam/hack-pro/Vynix-v0/foundry/scripts-js/checkAccountBalance.js`:

```js
import { listKeystores } from "./listKeystores.js";
import { execSync } from "child_process";
import dotenv from "dotenv";
import { join, dirname } from "path";
import { fileURLToPath } from "url";
import { toString } from "qrcode";
import { readFileSync } from "fs";
import { parse } from "toml";
import { ethers } from "ethers";

const ALCHEMY_API_KEY =
  process.env.ALCHEMY_API_KEY || "oKxs-03sij-U_N0iOlrSsZFr29-IqbuF";

// Load environment variables
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
dotenv.config({ path: join(__dirname, "..", ".env") });

async function getBalanceForEachNetwork(address) {
  try {
    // Read the foundry.toml file
    const foundryTomlPath = join(__dirname, "..", "foundry.toml");
    const tomlString = readFileSync(foundryTomlPath, "utf-8");

    // Parse the tomlString to get the JS object representation
    const parsedToml = parse(tomlString);

    // Extract rpc_endpoints from parsedToml
    const rpcEndpoints = parsedToml.rpc_endpoints;

    // Replace placeholders in the rpc_endpoints section
    function replaceENVAlchemyKey(input) {
      return input.replace("${ALCHEMY_API_KEY}", ALCHEMY_API_KEY);
    }

    console.log(await toString(address, { type: "terminal", small: true }));
    console.log(`\n📊 Address: ${address}`);

    for (const networkName in rpcEndpoints) {
      const networkUrl = replaceENVAlchemyKey(rpcEndpoints[networkName]);
      console.log(`\n--${networkName}-- 📡`);

      try {
        const provider = new ethers.providers.JsonRpcProvider(networkUrl);

        // Get balance and format it
        const balance = await provider.getBalance(address);
        const formattedBalance = +ethers.utils.formatUnits(balance);

        console.log("   Balance:", formattedBalance);
        console.log("   Nonce:", await provider.getTransactionCount(address));
      } catch (e) {
        console.log(
          `   ❌ Can't connect to network ${networkName}: ${e.message}`
        );
      }
    }
  } catch (error) {
    console.error("Error reading foundry.toml:", error);
  }
}

async function checkAccountBalance() {
  try {
    // Step 1: List accounts and let user select one
    console.log("📋 Listing available accounts...");
    const selectedKeystore = await listKeystores();

    if (!selectedKeystore) {
      console.error("❌ No keystore selected");
      process.exit(1);
    }

    // Step 2: Get the address of the selected account
    console.log(`\n🔍 Getting address for keystore: ${selectedKeystore}`);
    const addressCommand = `cast wallet address --account ${selectedKeystore}`;

    let address;
    try {
      address = execSync(addressCommand).toString().trim();
      console.log("\n💰 Checking balances across networks...");
      console.log("\n");
      await getBalanceForEachNetwork(address);
    } catch (error) {
      console.error(`❌ Error getting address: ${error.message}`);
      process.exit(1);
    }
  } catch (error) {
    console.error(`\n❌ Error: ${error.message}`);
    process.exit(1);
  }
}

// Run the function if this script is called directly
if (process.argv[1] === fileURLToPath(import.meta.url)) {
  checkAccountBalance().catch((error) => {
    console.error(error);
    process.exit(1);
  });
}

export { checkAccountBalance };

```

`/home/sam/hack-pro/Vynix-v0/foundry/scripts-js/generateKeystore.js`:

```js
import { spawnSync, spawn } from "child_process";
import readline from "readline";
import { fileURLToPath } from "url";

async function createKeystore() {
  // Create readline interface
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  try {
    // Generate a new wallet
    console.log("\n🔑 Generating new wallet...");
    const newWalletResult = spawnSync("cast", ["wallet", "new"], {
      encoding: "utf-8",
    });

    if (newWalletResult.error || newWalletResult.status !== 0) {
      console.error(
        "\n❌ Error generating new wallet:",
        newWalletResult.stderr || newWalletResult.error
      );
      process.exit(1);
    }

    const privateKey = newWalletResult.stdout
      .split("\n")
      .find((line) => line.includes("Private key:"))
      ?.split(":")[1]
      ?.trim();

    if (!privateKey) {
      console.error("\n❌ Could not extract private key from output");
      process.exit(1);
    }

    const keystoreName = await new Promise((resolve) => {
      rl.question("\nEnter name for new keystore: ", resolve);
    });

    // Close readline before spawning process with inherited stdio
    rl.close();

    return new Promise((resolve, reject) => {
      const importProcess = spawn(
        "cast",
        ["wallet", "import", keystoreName, "--private-key", privateKey],
        {
          stdio: "inherit",
        }
      );

      importProcess.on("close", (code) => {
        if (code === 0) {
          console.log(
            "\n💰 Fund the address and re-run the deploy command to use this keystore."
          );
          console.log(
            `\nTIP: Use \`yarn account\` and select \`${keystoreName}\` keystore to check if the address is funded.`
          );
          process.exit(0);
        } else {
          console.error("\n❌ Error importing keystore");
          reject(new Error("Import failed"));
        }
      });
    });
  } catch (error) {
    console.error("\n❌ Error creating keystore:", error);
    process.exit(1);
  } finally {
    // Ensure readline is closed
    if (rl) rl.close();
  }
}

// Run the function if this script is called directly
if (process.argv[1] === fileURLToPath(import.meta.url)) {
  createKeystore()
    .then((keystoreName) => {
      process.exit(0);
    })
    .catch((error) => {
      console.error(error);
      process.exit(1);
    });
}

export { createKeystore };

```

`/home/sam/hack-pro/Vynix-v0/foundry/scripts-js/generateTsAbis.js`:

```js
import {
  readdirSync,
  statSync,
  readFileSync,
  existsSync,
  mkdirSync,
  writeFileSync,
} from "fs";
import { join, dirname } from "path";
import { fileURLToPath } from "url";
import { format } from "prettier";

const __dirname = dirname(fileURLToPath(import.meta.url));

const generatedContractComment = `
/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */`;

function getDirectories(path) {
  if (!existsSync(path)) {
    return [];
  }

  return readdirSync(path).filter(function (file) {
    return statSync(join(path, file)).isDirectory();
  });
}

function getFiles(path) {
  return readdirSync(path).filter(function (file) {
    return statSync(join(path, file)).isFile();
  });
}

function parseTransactionRun(filePath) {
  try {
    const content = readFileSync(filePath, "utf8");
    const broadcastData = JSON.parse(content);
    return broadcastData.transactions || [];
  } catch (error) {
    console.warn(`Warning: Could not parse ${filePath}:`, error.message);
    return [];
  }
}

function getDeploymentHistory(broadcastPath) {
  const files = getFiles(broadcastPath);
  const deploymentHistory = new Map();

  // Sort files to process them in chronological order
  const runFiles = files
    .filter(
      (file) =>
        file.startsWith("run-") &&
        file.endsWith(".json") &&
        !file.includes("run-latest")
    )
    .sort((a, b) => {
      // Extract run numbers and compare them
      const runA = parseInt(a.match(/run-(\d+)/)?.[1] || "0");
      const runB = parseInt(b.match(/run-(\d+)/)?.[1] || "0");
      return runA - runB;
    });

  for (const file of runFiles) {
    const transactions = parseTransactionRun(join(broadcastPath, file));

    for (const tx of transactions) {
      if (tx.transactionType === "CREATE") {
        // Store or update contract deployment info
        deploymentHistory.set(tx.contractAddress, {
          contractName: tx.contractName,
          address: tx.contractAddress,
          deploymentFile: file,
          transaction: tx,
        });
      }
    }
  }

  return Array.from(deploymentHistory.values());
}

function getArtifactOfContract(contractName) {
  const current_path_to_artifacts = join(
    __dirname,
    "..",
    `out/${contractName}.sol`
  );

  if (!existsSync(current_path_to_artifacts)) return null;

  const artifactJson = JSON.parse(
    readFileSync(`${current_path_to_artifacts}/${contractName}.json`)
  );

  return artifactJson;
}

function getInheritedFromContracts(artifact) {
  let inheritedFromContracts = [];
  if (artifact?.ast) {
    for (const astNode of artifact.ast.nodes) {
      if (astNode.nodeType == "ContractDefinition") {
        if (astNode.baseContracts.length > 0) {
          inheritedFromContracts = astNode.baseContracts.map(
            ({ baseName }) => baseName.name
          );
        }
      }
    }
  }
  return inheritedFromContracts;
}

function getInheritedFunctions(mainArtifact) {
  const inheritedFromContracts = getInheritedFromContracts(mainArtifact);
  const inheritedFunctions = {};
  for (const inheritanceContractName of inheritedFromContracts) {
    const artifact = getArtifactOfContract(inheritanceContractName);
    if (artifact) {
      const {
        abi,
        ast: { absolutePath },
      } = artifact;
      for (const abiEntry of abi) {
        if (abiEntry.type == "function") {
          inheritedFunctions[abiEntry.name] = absolutePath;
        }
      }
    }
  }
  return inheritedFunctions;
}

function processAllDeployments(broadcastPath) {
  const scriptFolders = getDirectories(broadcastPath);
  const allDeployments = new Map();

  scriptFolders.forEach((scriptFolder) => {
    const scriptPath = join(broadcastPath, scriptFolder);
    const chainFolders = getDirectories(scriptPath);

    chainFolders.forEach((chainId) => {
      const chainPath = join(scriptPath, chainId);
      const deploymentHistory = getDeploymentHistory(chainPath);

      deploymentHistory.forEach((deployment) => {
        const timestamp = parseInt(
          deployment.deploymentFile.match(/run-(\d+)/)?.[1] || "0"
        );
        const key = `${chainId}-${deployment.contractName}`;

        // Only update if this deployment is newer
        if (
          !allDeployments.has(key) ||
          timestamp > allDeployments.get(key).timestamp
        ) {
          allDeployments.set(key, {
            ...deployment,
            timestamp,
            chainId,
            deploymentScript: scriptFolder,
          });
        }
      });
    });
  });

  const allContracts = {};

  allDeployments.forEach((deployment) => {
    const { chainId, contractName } = deployment;
    const artifact = getArtifactOfContract(contractName);

    if (artifact) {
      if (!allContracts[chainId]) {
        allContracts[chainId] = {};
      }

      allContracts[chainId][contractName] = {
        address: deployment.address,
        abi: artifact.abi,
        inheritedFunctions: getInheritedFunctions(artifact),
        deploymentFile: deployment.deploymentFile,
        deploymentScript: deployment.deploymentScript,
      };
    }
  });

  return allContracts;
}

function main() {
  const current_path_to_broadcast = join(__dirname, "..", "broadcast");
  const current_path_to_deployments = join(__dirname, "..", "deployments");

  const Deploymentchains = getFiles(current_path_to_deployments);
  const deployments = {};

  // Load existing deployments from deployments directory
  Deploymentchains.forEach((chain) => {
    if (!chain.endsWith(".json")) return;
    chain = chain.slice(0, -5);
    var deploymentObject = JSON.parse(
      readFileSync(`${current_path_to_deployments}/${chain}.json`)
    );
    deployments[chain] = deploymentObject;
  });

  // Process all deployments from all script folders
  const allGeneratedContracts = processAllDeployments(
    current_path_to_broadcast
  );

  // Update contract keys based on deployments if they exist
  Object.entries(allGeneratedContracts).forEach(([chainId, contracts]) => {
    Object.entries(contracts).forEach(([contractName, contractData]) => {
      const deployedName = deployments[chainId]?.[contractData.address];
      if (deployedName) {
        // If we have a deployment name, use it instead of the contract name
        allGeneratedContracts[chainId][deployedName] = contractData;
        delete allGeneratedContracts[chainId][contractName];
      }
    });
  });

  const NEXTJS_TARGET_DIR = "../nextjs/contracts/";

  // Ensure target directories exist
  if (!existsSync(NEXTJS_TARGET_DIR)) {
    mkdirSync(NEXTJS_TARGET_DIR, { recursive: true });
  }

  // Generate the deployedContracts content
  const fileContent = Object.entries(allGeneratedContracts).reduce(
    (content, [chainId, chainConfig]) => {
      return `${content}${parseInt(chainId).toFixed(0)}:${JSON.stringify(
        chainConfig,
        null,
        2
      )},`;
    },
    ""
  );

  // Write the files
  const fileTemplate = (importPath) => `
    ${generatedContractComment}
    import { GenericContractsDeclaration } from "${importPath}";

    const deployedContracts = {${fileContent}} as const;

    export default deployedContracts satisfies GenericContractsDeclaration;
  `;

  writeFileSync(
    `${NEXTJS_TARGET_DIR}deployedContracts.ts`,
    format(fileTemplate("~~/utils/scaffold-eth/contract"), {
      parser: "typescript",
    })
  );

  console.log(
    `📝 Updated TypeScript contract definition file on ${NEXTJS_TARGET_DIR}deployedContracts.ts`
  );
}

try {
  main();
} catch (error) {
  console.error("Error:", error);
  process.exitCode = 1;
}

```

`/home/sam/hack-pro/Vynix-v0/foundry/scripts-js/importAccount.js`:

```js
import { spawn } from "child_process";
import { createInterface } from "readline";
import { config } from "dotenv";
import { stdin as input, stdout as output } from "process";
config();

/**
 * Prompts the user for input with the given question
 * @param {string} question - The question to ask the user
 * @returns {Promise<string>} - The user's response
 */
function prompt(question) {
  const rl = createInterface({
    input,
    output,
  });

  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      rl.close();
      resolve(answer);
    });
  });
}

/**
 * Main function to import an account
 */
async function importAccount() {
  try {
    // Get account name from command line args or prompt user
    let accountName = process.argv[2];
    if (!accountName) {
      accountName = await prompt("\nEnter account name (e.g., my-keystore): ");

      if (!accountName.trim()) {
        console.error("\n❌ Account name cannot be empty");
        process.exit(1);
      }
    }

    // Check if account name is scaffold-eth-default
    if (accountName === "scaffold-eth-default") {
      console.error(
        "\n❌ Cannot use 'scaffold-eth-default' as account name. This is reserved for local development."
      );
      process.exit(1);
    }

    const importProcess = spawn(
      "cast",
      ["wallet", "import", accountName, "--interactive"],
      {
        stdio: "inherit",
        shell: true,
        cwd: process.cwd(),
      }
    );

    // Handle process completion
    importProcess.on("close", (code) => {
      if (code === 0) {
        process.exit(0);
      } else {
        console.error(`\n❌ Failed to import account. Error code: ${code}`);
        process.exit(1);
      }
    });
  } catch (error) {
    console.error("\n❌ Error importing account:", error);
    process.exit(1);
  }
}

// Run the import function
importAccount().catch((error) => {
  console.error("\n❌ Unexpected error:", error);
  process.exit(1);
});

```

`/home/sam/hack-pro/Vynix-v0/foundry/scripts-js/listKeystores.js`:

```js
import { readdirSync } from "fs";
import { join } from "path";
import readline from "readline";
import { fileURLToPath } from "url";

async function listKeystores() {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  const keystorePath = join(process.env.HOME, ".foundry", "keystores");

  try {
    const keystores = readdirSync(keystorePath).filter(
      (keystore) => keystore !== "scaffold-eth-default"
    );

    if (keystores.length === 0) {
      console.error(
        "\n❌ No keystores found in ~/.foundry/keystores, please create a new keystore by running:"
      );
      console.log("\n\tyarn account:generate\n");
      process.exit(1);
    }

    console.log("\n🔑 Available keystores:");

    keystores.map((keystore, index) => {
      console.log(`${index + 1}. ${keystore}`);

      return { keystore };
    });

    const answer = await new Promise((resolve) => {
      rl.question("\nSelect a keystore to display its balance: ", resolve);
    });

    const selection = parseInt(answer);

    if (isNaN(selection) || selection < 1 || selection > keystores.length) {
      console.error("\n❌ Invalid selection");
      process.exit(1);
    }

    const selectedKeystore = keystores[selection - 1];

    return selectedKeystore;
  } catch (error) {
    console.error("\n❌ Error reading keystores:", error);
    process.exit(1);
  } finally {
    rl.close();
  }
}

// Run the selection if this script is called directly
if (process.argv[1] === fileURLToPath(import.meta.url)) {
  listKeystores()
    .then((keystore) => {
      console.log("\n🔑 Selected keystore:", keystore);
    })
    .catch((error) => {
      console.error(error);
      process.exit(1);
    });
}

export { listKeystores };

```

`/home/sam/hack-pro/Vynix-v0/foundry/scripts-js/parseArgs.js`:

```js
import { spawnSync } from "child_process";
import { config } from "dotenv";
import { join, dirname } from "path";
import { readFileSync, existsSync } from "fs";
import { parse } from "toml";
import { fileURLToPath } from "url";
import { selectOrCreateKeystore } from "./selectOrCreateKeystore.js";

const __dirname = dirname(fileURLToPath(import.meta.url));
config();

// Get all arguments after the script name
const args = process.argv.slice(2);
let fileName = "Deploy.s.sol";
let network = "localhost";
let keystoreArg = null;

// Show help message if --help is provided
if (args.includes("--help") || args.includes("-h")) {
  console.log(`
Usage: yarn deploy [options]
Options:
  --file <filename>     Specify the deployment script file (default: Deploy.s.sol)
  --network <network>   Specify the network (default: localhost)
  --keystore <name>     Specify the keystore account to use (bypasses selection prompt)
  --help, -h           Show this help message
Examples:
  yarn deploy --file DeployYourContract.s.sol --network sepolia
  yarn deploy --network sepolia --keystore my-account
  yarn deploy --file DeployYourContract.s.sol
  yarn deploy
  `);
  process.exit(0);
}

// Parse arguments
for (let i = 0; i < args.length; i++) {
  if (args[i] === "--network" && args[i + 1]) {
    network = args[i + 1];
    i++; // Skip next arg since we used it
  } else if (args[i] === "--file" && args[i + 1]) {
    fileName = args[i + 1];
    i++; // Skip next arg since we used it
  } else if (args[i] === "--keystore" && args[i + 1]) {
    keystoreArg = args[i + 1];
    i++; // Skip next arg since we used it
  }
}

// Function to check if a keystore exists
function validateKeystore(keystoreName) {
  if (keystoreName === "scaffold-eth-default") {
    return true; // Default keystore is always valid
  }

  const keystorePath = join(
    process.env.HOME,
    ".foundry",
    "keystores",
    keystoreName
  );
  return existsSync(keystorePath);
}

// Check if the network exists in rpc_endpoints
try {
  const foundryTomlPath = join(__dirname, "..", "foundry.toml");
  const tomlString = readFileSync(foundryTomlPath, "utf-8");
  const parsedToml = parse(tomlString);

  if (!parsedToml.rpc_endpoints[network]) {
    console.log(
      `\n❌ Error: Network '${network}' not found in foundry.toml!`,
      "\nPlease check `foundry.toml` for available networks in the [rpc_endpoints] section or add a new network."
    );
    process.exit(1);
  }
} catch (error) {
  console.error("\n❌ Error reading or parsing foundry.toml:", error);
  process.exit(1);
}

if (
  process.env.LOCALHOST_KEYSTORE_ACCOUNT !== "scaffold-eth-default" &&
  network === "localhost"
) {
  console.log(`
⚠️ Warning: Using ${process.env.LOCALHOST_KEYSTORE_ACCOUNT} keystore account on localhost.

You can either:
1. Enter the password for ${process.env.LOCALHOST_KEYSTORE_ACCOUNT} account
   OR
2. Set the localhost keystore account in your .env and re-run the command to skip password prompt:
   LOCALHOST_KEYSTORE_ACCOUNT='scaffold-eth-default'
`);
}

let selectedKeystore = process.env.LOCALHOST_KEYSTORE_ACCOUNT;
if (network !== "localhost") {
  if (keystoreArg) {
    // Use the keystore provided via command line argument
    if (!validateKeystore(keystoreArg)) {
      console.log(`\n❌ Error: Keystore '${keystoreArg}' not found!`);
      console.log(
        `Please check that the keystore exists in ~/.foundry/keystores/`
      );
      process.exit(1);
    }
    selectedKeystore = keystoreArg;
    console.log(`\n🔑 Using keystore: ${selectedKeystore}`);
  } else {
    try {
      selectedKeystore = await selectOrCreateKeystore();
    } catch (error) {
      console.error("\n❌ Error selecting keystore:", error);
      process.exit(1);
    }
  }
} else if (keystoreArg) {
  // Allow overriding the localhost keystore with --keystore flag
  if (!validateKeystore(keystoreArg)) {
    console.log(`\n❌ Error: Keystore '${keystoreArg}' not found!`);
    console.log(
      `Please check that the keystore exists in ~/.foundry/keystores/`
    );
    process.exit(1);
  }
  selectedKeystore = keystoreArg;
  console.log(
    `\n🔑 Using keystore: ${selectedKeystore} for localhost deployment`
  );
}

// Check for default account on live network
if (selectedKeystore === "scaffold-eth-default" && network !== "localhost") {
  console.log(`
❌ Error: Cannot deploy to live network using default keystore account!

To deploy to ${network}, please follow these steps:

1. If you haven't generated a keystore account yet:
   $ yarn generate

2. Run the deployment command again.

The default account (scaffold-eth-default) can only be used for localhost deployments.
`);
  process.exit(0);
}

// Set environment variables for the make command
process.env.DEPLOY_SCRIPT = `script/${fileName}`;
process.env.RPC_URL = network;
process.env.ETH_KEYSTORE_ACCOUNT = selectedKeystore;

const result = spawnSync("make", ["deploy-and-generate-abis"], {
  stdio: "inherit",
  shell: true,
});

process.exit(result.status);

```

`/home/sam/hack-pro/Vynix-v0/foundry/scripts-js/selectOrCreateKeystore.js`:

```js
import { readdirSync } from "fs";
import { join } from "path";
import { spawnSync, spawn } from "child_process";
import readline from "readline";
import { fileURLToPath } from "url";

async function selectOrCreateKeystore() {
  // Create readline interface only when function is called
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  const keystorePath = join(process.env.HOME, ".foundry", "keystores");

  try {
    const keystores = readdirSync(keystorePath).filter(
      (keystore) => keystore !== "scaffold-eth-default"
    );

    if (keystores.length === 0) {
      console.log(
        "\n❌ No keystores found in ~/.foundry/keystores, please select 0 to create a new keystore"
      );
    }

    console.log("\n🔑 Available keystores:");
    console.log("0. Create new keystore");

    keystores.map((keystore, index) => {
      console.log(`${index + 1}. ${keystore}`);

      return { keystore };
    });

    const answer = await new Promise((resolve) => {
      rl.question(
        "\nSelect a keystore or create new (enter number): ",
        resolve
      );
    });

    const selection = parseInt(answer);

    if (selection === 0) {
      const newWalletResult = spawnSync("cast", ["wallet", "new"], {
        encoding: "utf-8",
      });

      if (newWalletResult.error || newWalletResult.status !== 0) {
        console.error(
          "\n❌ Error generating new wallet:",
          newWalletResult.stderr || newWalletResult.error
        );
        process.exit(1);
      }

      const privateKey = newWalletResult.stdout
        .split("\n")
        .find((line) => line.includes("Private key:"))
        ?.split(":")[1]
        ?.trim();

      if (!privateKey) {
        console.error("\n❌ Could not extract private key from output");
        process.exit(1);
      }

      const keystoreName = await new Promise((resolve) => {
        rl.question("\nEnter name for new keystore: ", resolve);
      });

      // Close readline before spawning process with inherited stdio
      rl.close();

      return new Promise((resolve, reject) => {
        const importProcess = spawn(
          "cast",
          ["wallet", "import", keystoreName, "--private-key", privateKey],
          {
            stdio: "inherit",
          }
        );

        importProcess.on("close", (code) => {
          if (code === 0) {
            console.log(
              "\n💰 Fund the address and re-run the deploy command to use this keystore."
            );
            console.log(
              `\nTIP: Use \`yarn account\` and select \`${keystoreName}\` keystore to check if the address is funded.`
            );
            process.exit(0);
          } else {
            console.error("\n❌ Error importing keystore");
            reject(new Error("Import failed"));
          }
        });
      });
    }

    if (isNaN(selection) || selection < 1 || selection > keystores.length) {
      console.error("\n❌ Invalid selection");
      process.exit(1);
    }

    const selectedKeystore = keystores[selection - 1];
    // Close readline before returning
    rl.close();
    return selectedKeystore;
  } catch (error) {
    console.error("\n❌ Error reading keystores:", error);
    process.exit(1);
  } finally {
    // Ensure readline is closed
    rl.close();
  }
}

// Run the selection if this script is called directly
if (process.argv[1] === fileURLToPath(import.meta.url)) {
  selectKeystore()
    .then((keystore) => {
      console.log("\n🔑 Selected keystore:", keystore);
    })
    .catch((error) => {
      console.error(error);
      process.exit(1);
    });
}

export { selectOrCreateKeystore };

```

`/home/sam/hack-pro/Vynix-v0/foundry/node_modules/dotenv/LICENSE`:

```
Copyright (c) 2015, Scott Motte
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

```

`/home/sam/hack-pro/Vynix-v0/foundry/node_modules/dotenv/config.js`:

```js
(function () {
  require('./lib/main').config(
    Object.assign(
      {},
      require('./lib/env-options'),
      require('./lib/cli-options')(process.argv)
    )
  )
})()

```

`/home/sam/hack-pro/Vynix-v0/foundry/node_modules/dotenv/package.json`:

```json
{
  "name": "dotenv",
  "version": "16.3.2",
  "description": "Loads environment variables from .env file",
  "main": "lib/main.js",
  "types": "lib/main.d.ts",
  "exports": {
    ".": {
      "types": "./lib/main.d.ts",
      "require": "./lib/main.js",
      "default": "./lib/main.js"
    },
    "./config": "./config.js",
    "./config.js": "./config.js",
    "./lib/env-options": "./lib/env-options.js",
    "./lib/env-options.js": "./lib/env-options.js",
    "./lib/cli-options": "./lib/cli-options.js",
    "./lib/cli-options.js": "./lib/cli-options.js",
    "./package.json": "./package.json"
  },
  "scripts": {
    "dts-check": "tsc --project tests/types/tsconfig.json",
    "lint": "standard",
    "lint-readme": "standard-markdown",
    "pretest": "npm run lint && npm run dts-check",
    "test": "tap tests/*.js --100 -Rspec",
    "prerelease": "npm test",
    "release": "standard-version"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/motdotla/dotenv.git"
  },
  "funding": "https://github.com/motdotla/dotenv?sponsor=1",
  "keywords": [
    "dotenv",
    "env",
    ".env",
    "environment",
    "variables",
    "config",
    "settings"
  ],
  "readmeFilename": "README.md",
  "license": "BSD-2-Clause",
  "devDependencies": {
    "@definitelytyped/dtslint": "^0.0.133",
    "@types/node": "^18.11.3",
    "decache": "^4.6.1",
    "sinon": "^14.0.1",
    "standard": "^17.0.0",
    "standard-markdown": "^7.1.0",
    "standard-version": "^9.5.0",
    "tap": "^16.3.0",
    "tar": "^6.1.11",
    "typescript": "^4.8.4"
  },
  "engines": {
    "node": ">=12"
  },
  "browser": {
    "fs": false
  }
}

```

`/home/sam/hack-pro/Vynix-v0/foundry/node_modules/dotenv/CHANGELOG.md`:

```md
# Changelog

All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.

## [Unreleased](https://github.com/motdotla/dotenv/compare/v16.3.1...master)

## [16.3.2](https://github.com/motdotla/dotenv/compare/v16.3.1...v16.3.2) (2024-01-18)

### Added

- Add debug message when no encoding set [#735](https://github.com/motdotla/dotenv/pull/735)

### Changed

- Fix output typing for `populate` [#792](https://github.com/motdotla/dotenv/pull/792)
- Use subarray instead of slice [#793](https://github.com/motdotla/dotenv/pull/793)

## [16.3.1](https://github.com/motdotla/dotenv/compare/v16.3.0...v16.3.1) (2023-06-17)

### Added

- Add missing type definitions for `processEnv` and `DOTENV_KEY` options. [#756](https://github.com/motdotla/dotenv/pull/756)

## [16.3.0](https://github.com/motdotla/dotenv/compare/v16.2.0...v16.3.0) (2023-06-16)

### Added

- Optionally pass `DOTENV_KEY` to options rather than relying on `process.env.DOTENV_KEY`. Defaults to `process.env.DOTENV_KEY` [#754](https://github.com/motdotla/dotenv/pull/754)

## [16.2.0](https://github.com/motdotla/dotenv/compare/v16.1.4...v16.2.0) (2023-06-15)

### Added

- Optionally write to your own target object rather than `process.env`. Defaults to `process.env`. [#753](https://github.com/motdotla/dotenv/pull/753)
- Add import type URL to types file [#751](https://github.com/motdotla/dotenv/pull/751)

## [16.1.4](https://github.com/motdotla/dotenv/compare/v16.1.3...v16.1.4) (2023-06-04)

### Added

- Added `.github/` to `.npmignore` [#747](https://github.com/motdotla/dotenv/pull/747)

## [16.1.3](https://github.com/motdotla/dotenv/compare/v16.1.2...v16.1.3) (2023-05-31)

### Removed

- Removed `browser` keys for `path`, `os`, and `crypto` in package.json. These were set to false incorrectly as of 16.1. Instead, if using dotenv on the front-end make sure to include polyfills for `path`, `os`, and `crypto`. [node-polyfill-webpack-plugin](https://github.com/Richienb/node-polyfill-webpack-plugin) provides these.

## [16.1.2](https://github.com/motdotla/dotenv/compare/v16.1.1...v16.1.2) (2023-05-31)

### Changed

- Exposed private function `_configDotenv` as `configDotenv`. [#744](https://github.com/motdotla/dotenv/pull/744)

## [16.1.1](https://github.com/motdotla/dotenv/compare/v16.1.0...v16.1.1) (2023-05-30)

### Added

- Added type definition for `decrypt` function

### Changed

- Fixed `{crypto: false}` in `packageJson.browser`

## [16.1.0](https://github.com/motdotla/dotenv/compare/v16.0.3...v16.1.0) (2023-05-30)

### Added

- Add `populate` convenience method [#733](https://github.com/motdotla/dotenv/pull/733)
- Accept URL as path option [#720](https://github.com/motdotla/dotenv/pull/720)
- Add dotenv to `npm fund` command
- Spanish language README [#698](https://github.com/motdotla/dotenv/pull/698)
- Add `.env.vault` support. 🎉 ([#730](https://github.com/motdotla/dotenv/pull/730))

ℹ️ `.env.vault` extends the `.env` file format standard with a localized encrypted vault file. Package it securely with your production code deploys. It's cloud agnostic so that you can deploy your secrets anywhere – without [risky third-party integrations](https://techcrunch.com/2023/01/05/circleci-breach/). [read more](https://github.com/motdotla/dotenv#-deploying)

### Changed

- Fixed "cannot resolve 'fs'" error on tools like Replit [#693](https://github.com/motdotla/dotenv/pull/693)

## [16.0.3](https://github.com/motdotla/dotenv/compare/v16.0.2...v16.0.3) (2022-09-29)

### Changed

- Added library version to debug logs ([#682](https://github.com/motdotla/dotenv/pull/682))

## [16.0.2](https://github.com/motdotla/dotenv/compare/v16.0.1...v16.0.2) (2022-08-30)

### Added

- Export `env-options.js` and `cli-options.js` in package.json for use with downstream [dotenv-expand](https://github.com/motdotla/dotenv-expand) module

## [16.0.1](https://github.com/motdotla/dotenv/compare/v16.0.0...v16.0.1) (2022-05-10)

### Changed

- Minor README clarifications
- Development ONLY: updated devDependencies as recommended for development only security risks ([#658](https://github.com/motdotla/dotenv/pull/658))

## [16.0.0](https://github.com/motdotla/dotenv/compare/v15.0.1...v16.0.0) (2022-02-02)

### Added

- _Breaking:_ Backtick support 🎉 ([#615](https://github.com/motdotla/dotenv/pull/615))

If you had values containing the backtick character, please quote those values with either single or double quotes.

## [15.0.1](https://github.com/motdotla/dotenv/compare/v15.0.0...v15.0.1) (2022-02-02)

### Changed

- Properly parse empty single or double quoted values 🐞 ([#614](https://github.com/motdotla/dotenv/pull/614))

## [15.0.0](https://github.com/motdotla/dotenv/compare/v14.3.2...v15.0.0) (2022-01-31)

`v15.0.0` is a major new release with some important breaking changes.

### Added

- _Breaking:_ Multiline parsing support (just works. no need for the flag.)

### Changed

- _Breaking:_ `#` marks the beginning of a comment (UNLESS the value is wrapped in quotes. Please update your `.env` files to wrap in quotes any values containing `#`. For example: `SECRET_HASH="something-with-a-#-hash"`).

..Understandably, (as some teams have noted) this is tedious to do across the entire team. To make it less tedious, we recommend using [dotenv cli](https://github.com/dotenv-org/cli) going forward. It's an optional plugin that will keep your `.env` files in sync between machines, environments, or team members.

### Removed

- _Breaking:_ Remove multiline option (just works out of the box now. no need for the flag.)

## [14.3.2](https://github.com/motdotla/dotenv/compare/v14.3.1...v14.3.2) (2022-01-25)

### Changed

- Preserve backwards compatibility on values containing `#` 🐞 ([#603](https://github.com/motdotla/dotenv/pull/603))

## [14.3.1](https://github.com/motdotla/dotenv/compare/v14.3.0...v14.3.1) (2022-01-25)

### Changed

- Preserve backwards compatibility on exports by re-introducing the prior in-place exports 🐞 ([#606](https://github.com/motdotla/dotenv/pull/606))

## [14.3.0](https://github.com/motdotla/dotenv/compare/v14.2.0...v14.3.0) (2022-01-24)

### Added

- Add `multiline` option 🎉 ([#486](https://github.com/motdotla/dotenv/pull/486))

## [14.2.0](https://github.com/motdotla/dotenv/compare/v14.1.1...v14.2.0) (2022-01-17)

### Added

- Add `dotenv_config_override` cli option
- Add `DOTENV_CONFIG_OVERRIDE` command line env option

## [14.1.1](https://github.com/motdotla/dotenv/compare/v14.1.0...v14.1.1) (2022-01-17)

### Added

- Add React gotcha to FAQ on README

## [14.1.0](https://github.com/motdotla/dotenv/compare/v14.0.1...v14.1.0) (2022-01-17)

### Added

- Add `override` option 🎉 ([#595](https://github.com/motdotla/dotenv/pull/595))

## [14.0.1](https://github.com/motdotla/dotenv/compare/v14.0.0...v14.0.1) (2022-01-16)

### Added

- Log error on failure to load `.env` file ([#594](https://github.com/motdotla/dotenv/pull/594))

## [14.0.0](https://github.com/motdotla/dotenv/compare/v13.0.1...v14.0.0) (2022-01-16)

### Added

- _Breaking:_ Support inline comments for the parser 🎉 ([#568](https://github.com/motdotla/dotenv/pull/568))

## [13.0.1](https://github.com/motdotla/dotenv/compare/v13.0.0...v13.0.1) (2022-01-16)

### Changed

* Hide comments and newlines from debug output ([#404](https://github.com/motdotla/dotenv/pull/404))

## [13.0.0](https://github.com/motdotla/dotenv/compare/v12.0.4...v13.0.0) (2022-01-16)

### Added

* _Breaking:_ Add type file for `config.js` ([#539](https://github.com/motdotla/dotenv/pull/539))

## [12.0.4](https://github.com/motdotla/dotenv/compare/v12.0.3...v12.0.4) (2022-01-16)

### Changed

* README updates
* Minor order adjustment to package json format

## [12.0.3](https://github.com/motdotla/dotenv/compare/v12.0.2...v12.0.3) (2022-01-15)

### Changed

* Simplified jsdoc for consistency across editors

## [12.0.2](https://github.com/motdotla/dotenv/compare/v12.0.1...v12.0.2) (2022-01-15)

### Changed

* Improve embedded jsdoc type documentation

## [12.0.1](https://github.com/motdotla/dotenv/compare/v12.0.0...v12.0.1) (2022-01-15)

### Changed

* README updates and clarifications

## [12.0.0](https://github.com/motdotla/dotenv/compare/v11.0.0...v12.0.0) (2022-01-15)

### Removed

- _Breaking:_ drop support for Flow static type checker ([#584](https://github.com/motdotla/dotenv/pull/584))

### Changed

- Move types/index.d.ts to lib/main.d.ts ([#585](https://github.com/motdotla/dotenv/pull/585))
- Typescript cleanup ([#587](https://github.com/motdotla/dotenv/pull/587))
- Explicit typescript inclusion in package.json ([#566](https://github.com/motdotla/dotenv/pull/566))

## [11.0.0](https://github.com/motdotla/dotenv/compare/v10.0.0...v11.0.0) (2022-01-11)

### Changed

- _Breaking:_ drop support for Node v10 ([#558](https://github.com/motdotla/dotenv/pull/558))
- Patch debug option ([#550](https://github.com/motdotla/dotenv/pull/550))

## [10.0.0](https://github.com/motdotla/dotenv/compare/v9.0.2...v10.0.0) (2021-05-20)

### Added

- Add generic support to parse function
- Allow for import "dotenv/config.js"
- Add support to resolve home directory in path via ~

## [9.0.2](https://github.com/motdotla/dotenv/compare/v9.0.1...v9.0.2) (2021-05-10)

### Changed

- Support windows newlines with debug mode

## [9.0.1](https://github.com/motdotla/dotenv/compare/v9.0.0...v9.0.1) (2021-05-08)

### Changed

- Updates to README

## [9.0.0](https://github.com/motdotla/dotenv/compare/v8.6.0...v9.0.0) (2021-05-05)

### Changed

- _Breaking:_ drop support for Node v8

## [8.6.0](https://github.com/motdotla/dotenv/compare/v8.5.1...v8.6.0) (2021-05-05)

### Added

- define package.json in exports

## [8.5.1](https://github.com/motdotla/dotenv/compare/v8.5.0...v8.5.1) (2021-05-05)

### Changed

- updated dev dependencies via npm audit

## [8.5.0](https://github.com/motdotla/dotenv/compare/v8.4.0...v8.5.0) (2021-05-05)

### Added

- allow for `import "dotenv/config"`

## [8.4.0](https://github.com/motdotla/dotenv/compare/v8.3.0...v8.4.0) (2021-05-05)

### Changed

- point to exact types file to work with VS Code

## [8.3.0](https://github.com/motdotla/dotenv/compare/v8.2.0...v8.3.0) (2021-05-05)

### Changed

- _Breaking:_ drop support for Node v8 (mistake to be released as minor bump. later bumped to 9.0.0. see above.)

## [8.2.0](https://github.com/motdotla/dotenv/compare/v8.1.0...v8.2.0) (2019-10-16)

### Added

- TypeScript types

## [8.1.0](https://github.com/motdotla/dotenv/compare/v8.0.0...v8.1.0) (2019-08-18)

### Changed

- _Breaking:_ drop support for Node v6 ([#392](https://github.com/motdotla/dotenv/issues/392))

# [8.0.0](https://github.com/motdotla/dotenv/compare/v7.0.0...v8.0.0) (2019-05-02)

### Changed

- _Breaking:_ drop support for Node v6 ([#302](https://github.com/motdotla/dotenv/issues/392))

## [7.0.0] - 2019-03-12

### Fixed

- Fix removing unbalanced quotes ([#376](https://github.com/motdotla/dotenv/pull/376))

### Removed

- Removed `load` alias for `config` for consistency throughout code and documentation.

## [6.2.0] - 2018-12-03

### Added

- Support preload configuration via environment variables ([#351](https://github.com/motdotla/dotenv/issues/351))

## [6.1.0] - 2018-10-08

### Added

- `debug` option for `config` and `parse` methods will turn on logging

## [6.0.0] - 2018-06-02

### Changed

- _Breaking:_ drop support for Node v4 ([#304](https://github.com/motdotla/dotenv/pull/304))

## [5.0.0] - 2018-01-29

### Added

- Testing against Node v8 and v9
- Documentation on trim behavior of values
- Documentation on how to use with `import`

### Changed

- _Breaking_: default `path` is now `path.resolve(process.cwd(), '.env')`
- _Breaking_: does not write over keys already in `process.env` if the key has a falsy value
- using `const` and `let` instead of `var`

### Removed

- Testing against Node v7

## [4.0.0] - 2016-12-23

### Changed

- Return Object with parsed content or error instead of false ([#165](https://github.com/motdotla/dotenv/pull/165)).

### Removed

- `verbose` option removed in favor of returning result.

## [3.0.0] - 2016-12-20

### Added

- `verbose` option will log any error messages. Off by default.
- parses email addresses correctly
- allow importing config method directly in ES6

### Changed

- Suppress error messages by default ([#154](https://github.com/motdotla/dotenv/pull/154))
- Ignoring more files for NPM to make package download smaller

### Fixed

- False positive test due to case-sensitive variable ([#124](https://github.com/motdotla/dotenv/pull/124))

### Removed

- `silent` option removed in favor of `verbose`

## [2.0.0] - 2016-01-20

### Added

- CHANGELOG to ["make it easier for users and contributors to see precisely what notable changes have been made between each release"](http://keepachangelog.com/). Linked to from README
- LICENSE to be more explicit about what was defined in `package.json`. Linked to from README
- Testing nodejs v4 on travis-ci
- added examples of how to use dotenv in different ways
- return parsed object on success rather than boolean true

### Changed

- README has shorter description not referencing ruby gem since we don't have or want feature parity

### Removed

- Variable expansion and escaping so environment variables are encouraged to be fully orthogonal

## [1.2.0] - 2015-06-20

### Added

- Preload hook to require dotenv without including it in your code

### Changed

- clarified license to be "BSD-2-Clause" in `package.json`

### Fixed

- retain spaces in string vars

## [1.1.0] - 2015-03-31

### Added

- Silent option to silence `console.log` when `.env` missing

## [1.0.0] - 2015-03-13

### Removed

- support for multiple `.env` files. should always use one `.env` file for the current environment

[7.0.0]: https://github.com/motdotla/dotenv/compare/v6.2.0...v7.0.0
[6.2.0]: https://github.com/motdotla/dotenv/compare/v6.1.0...v6.2.0
[6.1.0]: https://github.com/motdotla/dotenv/compare/v6.0.0...v6.1.0
[6.0.0]: https://github.com/motdotla/dotenv/compare/v5.0.0...v6.0.0
[5.0.0]: https://github.com/motdotla/dotenv/compare/v4.0.0...v5.0.0
[4.0.0]: https://github.com/motdotla/dotenv/compare/v3.0.0...v4.0.0
[3.0.0]: https://github.com/motdotla/dotenv/compare/v2.0.0...v3.0.0
[2.0.0]: https://github.com/motdotla/dotenv/compare/v1.2.0...v2.0.0
[1.2.0]: https://github.com/motdotla/dotenv/compare/v1.1.0...v1.2.0
[1.1.0]: https://github.com/motdotla/dotenv/compare/v1.0.0...v1.1.0
[1.0.0]: https://github.com/motdotla/dotenv/compare/v0.4.0...v1.0.0

```

`/home/sam/hack-pro/Vynix-v0/foundry/node_modules/dotenv/README-es.md`:

```md
<div align="center">

<p>
  <sup>
    <a href="https://github.com/sponsors/motdotla">Dotenv es apoyado por la comunidad.</a>
  </sup>
</p>
<sup>Gracias espaciales a:</sup>
<br>
<br>
<a href="https://www.warp.dev/?utm_source=github&utm_medium=referral&utm_campaign=dotenv_p_20220831">
  <div>
    <img src="https://res.cloudinary.com/dotenv-org/image/upload/v1661980709/warp_hi8oqj.png" width="230" alt="Warp">
  </div>
  <b>Warp es una rápida e impresionante terminal basada en Rust, reinventado para funcionar como una aplicación moderna.</b>
  <div>
    <sup>Haga más en la CLI con edición de texto real, resultado básado en bloques, y busqueda de comandos de IA.</sup>
  </div>
</a>
<br>
<a href="https://retool.com/?utm_source=sponsor&utm_campaign=dotenv">
  <div>
    <img src="https://res.cloudinary.com/dotenv-org/image/upload/c_scale,w_300/v1664466968/logo-full-black_vidfqf.png" width="270" alt="Retool">
  </div>
  <b>Retool ayuda a los desarrolladores a crear software interno personalizado, como aplicaciones CRUD y paneles de administración, realmente rápido.</b>
  <div>
    <sup>Construya Interfaces de Usuario de forma visual con componentes flexibles, conéctese a cualquier fuente de datos, y escriba lógica de negocio en JavaScript.</sup>
  </div>
</a>
<br>
<a href="https://workos.com/?utm_campaign=github_repo&utm_medium=referral&utm_content=dotenv&utm_source=github">
  <div>
    <img src="https://res.cloudinary.com/dotenv-org/image/upload/c_scale,w_400/v1665605496/68747470733a2f2f73696e647265736f726875732e636f6d2f6173736574732f7468616e6b732f776f726b6f732d6c6f676f2d77686974652d62672e737667_zdmsbu.svg" width="270" alt="WorkOS">
  </div>
  <b>Su Apliación, Lista para la Empresa.</b>
  <div>
    <sup>Agrega Inicio de Sesión Único, Autenticación Multi-Factor, y mucho más, en minutos en lugar de meses.</sup>
  </div>
</a>
<hr>
<br>
<br>
<br>
<br>

</div>

# dotenv [![NPM version](https://img.shields.io/npm/v/dotenv.svg?style=flat-square)](https://www.npmjs.com/package/dotenv)

<img src="https://raw.githubusercontent.com/motdotla/dotenv/master/dotenv.svg" alt="dotenv" align="right" width="200" />

Dotenv es un módulo de dependencia cero que carga las variables de entorno desde un archivo `.env` en [`process.env`](https://nodejs.org/docs/latest/api/process.html#process_process_env). El almacenamiento de la configuración del entorno separado del código está basado en la metodología [The Twelve-Factor App](http://12factor.net/config).

[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square)](https://github.com/feross/standard)
[![LICENSE](https://img.shields.io/github/license/motdotla/dotenv.svg)](LICENSE)

## Instalación

```bash
# instalación local (recomendado)
npm install dotenv --save
```

O installación con yarn? `yarn add dotenv`

## Uso

Cree un archivo `.env` en la raíz de su proyecto:

```dosini
S3_BUCKET="YOURS3BUCKET"
SECRET_KEY="YOURSECRETKEYGOESHERE"
```

Tan prónto como sea posible en su aplicación, importe y configure dotenv:

```javascript
require('dotenv').config()
console.log(process.env) // elimine esto después que haya confirmado que esta funcionando
```

.. o usa ES6?

```javascript
import * as dotenv from 'dotenv' // vea en https://github.com/motdotla/dotenv#como-uso-dotenv-con-import
// REVISAR LINK DE REFERENCIA DE IMPORTACIÓN
dotenv.config()
import express from 'express'
```

Eso es todo. `process.env` ahora tiene las claves y los valores que definiste en tu archivo `.env`:

```javascript
require('dotenv').config()

...

s3.getBucketCors({Bucket: process.env.S3_BUCKET}, function(err, data) {})
```

### Valores multilínea

Si necesita variables de varias líneas, por ejemplo, claves privadas, ahora se admiten en la versión (`>= v15.0.0`) con saltos de línea:

```dosini
PRIVATE_KEY="-----BEGIN RSA PRIVATE KEY-----
...
Kh9NV...
...
-----END RSA PRIVATE KEY-----"
```

Alternativamente, puede usar comillas dobles y usar el carácter `\n`:

```dosini
PRIVATE_KEY="-----BEGIN RSA PRIVATE KEY-----\nKh9NV...\n-----END RSA PRIVATE KEY-----\n"
```

### Comentarios

Los comentarios pueden ser agregados en tu archivo o en la misma línea:

```dosini
# This is a comment
SECRET_KEY=YOURSECRETKEYGOESHERE # comment
SECRET_HASH="something-with-a-#-hash"
```

Los comentarios comienzan donde existe un `#`, entonces, si su valor contiene un `#`, enciérrelo entre comillas. Este es un cambio importante desde la versión `>= v15.0.0` en adelante.

### Análisis

El motor que analiza el contenido de su archivo que contiene variables de entorno está disponible para su uso. Este Acepta una Cadena o un Búfer y devolverá un Objeto con las claves y los valores analizados.

```javascript
const dotenv = require('dotenv')
const buf = Buffer.from('BASICO=basico')
const config = dotenv.parse(buf) // devolverá un objeto
console.log(typeof config, config) // objeto { BASICO : 'basico' }
```

### Precarga

Puede usar el `--require` (`-r`) [opción de línea de comando](https://nodejs.org/api/cli.html#-r---require-module) para precargar dotenv. Al hacer esto, no necesita requerir ni cargar dotnev en el código de su aplicación.

```bash
$ node -r dotenv/config tu_script.js
```

Las opciones de configuración a continuación se admiten como argumentos de línea de comandos en el formato `dotenv_config_<option>=value`

```bash
$ node -r dotenv/config tu_script.js dotenv_config_path=/custom/path/to/.env dotenv_config_debug=true
```

Además, puede usar variables de entorno para establecer opciones de configuración. Los argumentos de línea de comandos precederán a estos.

```bash
$ DOTENV_CONFIG_<OPTION>=value node -r dotenv/config tu_script.js
```

```bash
$ DOTENV_CONFIG_ENCODING=latin1 DOTENV_CONFIG_DEBUG=true node -r dotenv/config tu_script.js dotenv_config_path=/custom/path/to/.env
```

### Expansión Variable

Necesitaras agregar el valor de otro variable en una de sus variables? Usa [dotenv-expand](https://github.com/motdotla/dotenv-expand).

### Sincronizando

Necesitas mentener sincronizados los archivos `.env` entre maquinas, entornos, o miembros del equipo? Usa 
[dotenv-vault](https://github.com/dotenv-org/dotenv-vault).

## Ejemplos

Vea [ejemplos](https://github.com/dotenv-org/examples) sobre el uso de dotenv con varios frameworks, lenguajes y configuraciones.

* [nodejs](https://github.com/dotenv-org/examples/tree/master/dotenv-nodejs)
* [nodejs (depurar en)](https://github.com/dotenv-org/examples/tree/master/dotenv-nodejs-debug)
* [nodejs (anular en)](https://github.com/dotenv-org/examples/tree/master/dotenv-nodejs-override)
* [esm](https://github.com/dotenv-org/examples/tree/master/dotenv-esm)
* [esm (precarga)](https://github.com/dotenv-org/examples/tree/master/dotenv-esm-preload)
* [typescript](https://github.com/dotenv-org/examples/tree/master/dotenv-typescript)
* [typescript parse](https://github.com/dotenv-org/examples/tree/master/dotenv-typescript-parse)
* [typescript config](https://github.com/dotenv-org/examples/tree/master/dotenv-typescript-config)
* [webpack](https://github.com/dotenv-org/examples/tree/master/dotenv-webpack)
* [webpack (plugin)](https://github.com/dotenv-org/examples/tree/master/dotenv-webpack2)
* [react](https://github.com/dotenv-org/examples/tree/master/dotenv-react)
* [react (typescript)](https://github.com/dotenv-org/examples/tree/master/dotenv-react-typescript)
* [express](https://github.com/dotenv-org/examples/tree/master/dotenv-express)
* [nestjs](https://github.com/dotenv-org/examples/tree/master/dotenv-nestjs)

## Documentación

Dotenv expone dos funciones:

* `configuración`
* `analizar`

### Configuración

`Configuración` leerá su archivo `.env`, analizará el contenido, lo asignará a [`process.env`](https://nodejs.org/docs/latest/api/process.html#process_process_env),
y devolverá un Objeto con una clave `parsed` que contiene el contenido cargado o una clave `error` si falla.

```js
const result = dotenv.config()

if (result.error) {
  throw result.error
}

console.log(result.parsed)
```

Adicionalmente, puede pasar opciones a `configuracion`.

#### Opciones

##### Ruta

Por defecto: `path.resolve(process.cwd(), '.env')`

Especifique una ruta personalizada si el archivo que contiene las variables de entorno se encuentra localizado en otro lugar.

```js
require('dotenv').config({ path: '/personalizado/ruta/a/.env' })
```

##### Codificación

Por defecto: `utf8`

Especifique la codificación del archivo que contiene las variables de entorno.

```js
require('dotenv').config({ encoding: 'latin1' })
```

##### Depurar

Por defecto: `false`

Active el registro de ayuda para depurar por qué ciertas claves o valores no se inician como lo esperabas.

```js
require('dotenv').config({ debug: process.env.DEBUG })
```

##### Anular

Por defecto: `false`

Anule cualquier variable de entorno que ya se haya configurada en su maquina con los valores de su archivo .env.

```js
require('dotenv').config({ override: true })
```

### Analizar

El motor que analiza el contenido del archivo que contiene las variables de entorno está disponible para su uso. Acepta una Cadena o un Búfer y retornará un objecto con los valores analizados.

```js
const dotenv = require('dotenv')
const buf = Buffer.from('BASICO=basico')
const config = dotenv.parse(buf) // devolverá un objeto
console.log(typeof config, config) // objeto { BASICO : 'basico' }
```

#### Opciones

##### Depurar

Por defecto: `false`

Active el registro de ayuda para depurar por qué ciertas claves o valores no se inician como lo esperabas.

```js
const dotenv = require('dotenv')
const buf = Buffer.from('hola mundo')
const opt = { debug: true }
const config = dotenv.parse(buf, opt)
// espere por un mensaje de depuración porque el búfer no esta listo KEY=VAL
```

## FAQ

### ¿Por qué el archivo `.env` no carga mis variables de entorno correctamente?

Lo más probable es que su archivo `.env` no esté en el lugar correcto. [Vea este stack overflow](https://stackoverflow.com/questions/42335016/dotenv-file-is-not-loading-environment-variables).

Active el modo de depuración y vuelva a intentarlo...

```js
require('dotenv').config({ debug: true })
```

Recibirá un error apropiado en su consola.

### ¿Debo confirmar mi archivo `.env`?

No. Recomendamos **enfáticamente** no enviar su archivo `.env` a la versión de control. Solo debe incluir los valores especificos del entorno, como la base de datos, contraseñas o claves API.

### ¿Debería tener multiples archivos `.env`?

No. Recomendamos **enfáticamente** no tener un archivo `.env` "principal" y un archivo `.env` de "entorno" como `.env.test`. Su configuración debe variar entre implementaciones y no debe compartir valores entre entornos.

> En una Aplicación de Doce Factores, las variables de entorno son controles diferenciados, cada uno totalmente independiente a otras variables de entorno. Nunca se agrupan como "entornos", sino que se gestionan de manera independiente para cada despliegue. Este es un modelo que se escala sin problemas a medida que la aplicación se expande de forma natural en más despliegues a lo largo de su vida.
>
> – [La Apliación de los Doce Factores](https://12factor.net/es/)

### ¿Qué reglas sigue el motor de análisis?

El motor de análisis actualmente admite las siguientes reglas:

- `BASICO=basico` se convierte en `{BASICO: 'basico'}`
- las líneas vacías se saltan
- las líneas que comienzan con `#` se tratan como comentarios
- `#` marca el comienzo de un comentario (a menos que el valor esté entre comillas)
- valores vacíos se convierten en cadenas vacías (`VACIO=` se convierte en `{VACIO: ''}`)
- las comillas internas se mantienen (piensa en JSON) (`JSON={"foo": "bar"}` se convierte en `{JSON:"{\"foo\": \"bar\"}"`)
- los espacios en blanco se eliminan de ambos extremos de los valores no citanos (aprende más en [`trim`](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/Trim)) (`FOO=  algo ` se convierte en `{FOO: 'algo'}`)
- los valores entre comillas simples y dobles se escapan (`CITA_SIMPLE='citado'` se convierte en `{CITA_SIMPLE: "citado"}`)
- los valores entre comillas simples y dobles mantienen los espacios en blanco en ambos extremos  (`FOO="  algo  "` se convierte en `{FOO: '  algo  '}`)
- los valores entre comillas dobles expanden nuevas líneas (`MULTILINEA="nueva\nlínea"` se convierte en

```
{MULTILINEA: 'nueva
línea'}
```

- se admite la comilla simple invertida (`` SIGNO_ACENTO=`Esto tiene comillas 'simples' y "dobles" en su interior.` ``)

### ¿Qué sucede con las variables de entorno que ya estaban configuradas?

Por defecto, nunca modificaremos ninguna variable de entorno que ya haya sido establecida. En particular, si hay una variable en su archivo `.env` que colisiona con una que ya existe en su entorno, entonces esa variable se omitirá.

Si por el contrario, quieres anular `process.env` utiliza la opción `override`.

```javascript
require('dotenv').config({ override: true })
```

### ¿Por qué mis variables de entorno no aparecen para React?

Su código React se ejecuta en Webpack, donde el módulo `fs` o incluso el propio `process` global no son accesibles fuera-de-la-caja. El módulo `process.env` sólo puede ser inyectado a través de la configuración de Webpack.

Si estás usando [`react-scripts`](https://www.npmjs.com/package/react-scripts), el cual se distribuye a través de [`create-react-app`](https://create-react-app.dev/), tiene dotenv incorporado pero con una singularidad. Escriba sus variables de entorno con `REACT_APP_`. Vea [este stack overflow](https://stackoverflow.com/questions/42182577/is-it-possible-to-use-dotenv-in-a-react-project) para más detalles.

Si estás utilizando otros frameworks (por ejemplo, Next.js, Gatsby...), debes consultar su documentación para saber cómo injectar variables de entorno en el cliente.

### ¿Puedo personalizar/escribir plugins para dotenv?

Sí! `dotenv.config()` devuelve un objeto que representa el archivo `.env` analizado. Esto te da todo lo que necesitas para poder establecer valores en `process.env`. Por ejemplo:

```js
const dotenv = require('dotenv')
const variableExpansion = require('dotenv-expand')
const miEnv = dotenv.config()
variableExpansion(miEnv)
```

### Cómo uso dotnev con `import`?

Simplemente..

```javascript
// index.mjs (ESM)
import * as dotenv from 'dotenv' // vea https://github.com/motdotla/dotenv#como-uso-dotenv-con-import
dotenv.config()
import express from 'express'
```

Un poco de historia...

> Cuando se ejecuta un módulo que contiene una sentencia `import`, los módulos que importa serán cargados primero, y luego se ejecuta cada bloque del módulo en un recorrido en profundidad del gráfico de dependencias, evitando los ciclos al saltarse todo lo que ya se ha ejecutado.
>
> – [ES6 en Profundidad: Módulos](https://hacks.mozilla.org/2015/08/es6-in-depth-modules/)

¿Qué significa esto en lenguaje sencillo? Significa que se podrías pensar que lo siguiente funcionaría pero no lo hará.

```js
// notificarError.mjs
import { Cliente } from 'mejor-servicio-para-notificar-error'

export default new Client(process.env.CLAVE_API)

// index.mjs
import dotenv from 'dotenv'
dotenv.config()

import notificarError from './notificarError.mjs'
notificarError.report(new Error('ejemplo documentado'))
```

`process.env.CLAVE_API` será vacio.

En su lugar, el código anterior debe ser escrito como...

```js
// notificarError.mjs
import { Cliente } from 'mejor-servicio-para-notificar-errores'

export default new Client(process.env.CLAVE_API)

// index.mjs
import * as dotenv from 'dotenv'
dotenv.config()

import notificarError from './notificarError.mjs'
notificarError.report(new Error('ejemplo documentado'))
```

¿Esto tiene algo de sentido? Esto es poco poco intuitivo, pero es como funciona la importación de módulos en ES6. Aquí hay un ejemplo [ejemplo práctico de esta trampa](https://github.com/dotenv-org/examples/tree/master/dotenv-es6-import-pitfall).

Existen dos arternativas a este planteamiento:

1. Precarga dotenv: `node --require dotenv/config index.js` (_Nota: no es necesario usar `import` dotenv con este método_)
2. Cree un archivo separado que ejecutará `config` primero como se describe en [este comentario #133](https://github.com/motdotla/dotenv/issues/133#issuecomment-255298822)

### ¿Qué pasa con la expansión de variable?

Prueba [dotenv-expand](https://github.com/motdotla/dotenv-expand)

### ¿Qué pasa con la sincronización y la seguridad de los archivos .env?

Vea [dotenv-vault](https://github.com/dotenv-org/dotenv-vault)

## Guía de contribución

Vea [CONTRIBUTING.md](CONTRIBUTING.md)

## REGISTRO DE CAMBIOS

Vea [CHANGELOG.md](CHANGELOG.md)

## ¿Quiénes utilizan dotenv?

[Estos módulos npm dependen de él.](https://www.npmjs.com/browse/depended/dotenv)

Los proyectos que lo amplían suelen utilizar la [palabra clave "dotenv" en npm](https://www.npmjs.com/search?q=keywords:dotenv).

```

`/home/sam/hack-pro/Vynix-v0/foundry/node_modules/dotenv/README.md`:

```md
<div align="center">

<p>
  <sup>
    <a href="https://github.com/sponsors/motdotla">Dotenv is supported by the community.</a>
  </sup>
</p>
<sup>Special thanks to:</sup>
<br>
<br>
<a href="https://www.warp.dev/?utm_source=github&utm_medium=referral&utm_campaign=dotenv_p_20220831">
  <div>
    <img src="https://res.cloudinary.com/dotenv-org/image/upload/v1661980709/warp_hi8oqj.png" width="230" alt="Warp">
  </div>
  <b>Warp is a blazingly fast, Rust-based terminal reimagined to work like a modern app.</b>
  <div>
    <sup>Get more done in the CLI with real text editing, block-based output, and AI command search.</sup>
  </div>
</a>
<br>
<a href="https://workos.com/?utm_campaign=github_repo&utm_medium=referral&utm_content=dotenv&utm_source=github">
  <div>
    <img src="https://res.cloudinary.com/dotenv-org/image/upload/c_scale,w_400/v1665605496/68747470733a2f2f73696e647265736f726875732e636f6d2f6173736574732f7468616e6b732f776f726b6f732d6c6f676f2d77686974652d62672e737667_zdmsbu.svg" width="270" alt="WorkOS">
  </div>
  <b>Your App, Enterprise Ready.</b>
  <div>
    <sup>Add Single Sign-On, Multi-Factor Auth, and more, in minutes instead of months.</sup>
  </div>
</a>
<br/>
<a href="https://runalloy.com/?utm_source=github&utm_medium=referral&utm_campaign=1224_dotenv">
  <div>
    <img src="https://res.cloudinary.com/dotenv-org/image/upload/c_crop,g_center,h_65,w_290,x_0,y_0/v1704258787/AlloyAutomation-logo_dqin8c.svg" width="370" alt="Alloy Automation">
  </div>
  <b>Launch user-facing integrations faster</b>
  <div>
    <sup>Easily spin up hundreds of integrations. Sign up free or read our docs first</sup>
  </div>
</a>
<hr>
</div>

# dotenv [![NPM version](https://img.shields.io/npm/v/dotenv.svg?style=flat-square)](https://www.npmjs.com/package/dotenv)

<img src="https://raw.githubusercontent.com/motdotla/dotenv/master/dotenv.svg" alt="dotenv" align="right" width="200" />

Dotenv is a zero-dependency module that loads environment variables from a `.env` file into [`process.env`](https://nodejs.org/docs/latest/api/process.html#process_process_env). Storing configuration in the environment separate from code is based on [The Twelve-Factor App](https://12factor.net/config) methodology.

[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square)](https://github.com/feross/standard)
[![LICENSE](https://img.shields.io/github/license/motdotla/dotenv.svg)](LICENSE)
[![dotenv-vault](https://badge.dotenv.org/works-with.svg?r=1)](https://www.dotenv.org/r/github.com/dotenv-org/dotenv-vault?r=1) 

* [🌱 Install](#-install)
* [🏗️ Usage (.env)](#%EF%B8%8F-usage)
* [🌴 Multiple Environments 🆕](#-manage-multiple-environments)
* [🚀 Deploying (.env.vault) 🆕](#-deploying)
* [📚 Examples](#-examples)
* [📖 Docs](#-documentation)
* [❓ FAQ](#-faq)
* [⏱️ Changelog](./CHANGELOG.md)

## 🌱 Install

```bash
# install locally (recommended)
npm install dotenv --save
```

Or installing with yarn? `yarn add dotenv`

## 🏗️ Usage

<a href="https://www.youtube.com/watch?v=YtkZR0NFd1g">
<div align="right">
<img src="https://img.youtube.com/vi/YtkZR0NFd1g/hqdefault.jpg" alt="how to use dotenv video tutorial" align="right" width="330" />
<img src="https://simpleicons.vercel.app/youtube/ff0000" alt="youtube/@dotenvorg" align="right" width="24" />
</div>
</a>

Create a `.env` file in the root of your project:

```dosini
S3_BUCKET="YOURS3BUCKET"
SECRET_KEY="YOURSECRETKEYGOESHERE"
```

As early as possible in your application, import and configure dotenv:

```javascript
require('dotenv').config()
console.log(process.env) // remove this after you've confirmed it is working
```

.. [or using ES6?](#how-do-i-use-dotenv-with-import)

```javascript
import 'dotenv/config'
```

That's it. `process.env` now has the keys and values you defined in your `.env` file:

```javascript
require('dotenv').config()

...

s3.getBucketCors({Bucket: process.env.S3_BUCKET}, function(err, data) {})
```

### Multiline values

If you need multiline variables, for example private keys, those are now supported (`>= v15.0.0`) with line breaks:

```dosini
PRIVATE_KEY="-----BEGIN RSA PRIVATE KEY-----
...
Kh9NV...
...
-----END RSA PRIVATE KEY-----"
```

Alternatively, you can double quote strings and use the `\n` character:

```dosini
PRIVATE_KEY="-----BEGIN RSA PRIVATE KEY-----\nKh9NV...\n-----END RSA PRIVATE KEY-----\n"
```

### Comments

Comments may be added to your file on their own line or inline:

```dosini
# This is a comment
SECRET_KEY=YOURSECRETKEYGOESHERE # comment
SECRET_HASH="something-with-a-#-hash"
```

Comments begin where a `#` exists, so if your value contains a `#` please wrap it in quotes. This is a breaking change from `>= v15.0.0` and on.

### Parsing

The engine which parses the contents of your file containing environment variables is available to use. It accepts a String or Buffer and will return an Object with the parsed keys and values.

```javascript
const dotenv = require('dotenv')
const buf = Buffer.from('BASIC=basic')
const config = dotenv.parse(buf) // will return an object
console.log(typeof config, config) // object { BASIC : 'basic' }
```

### Preload

You can use the `--require` (`-r`) [command line option](https://nodejs.org/api/cli.html#-r---require-module) to preload dotenv. By doing this, you do not need to require and load dotenv in your application code.

```bash
$ node -r dotenv/config your_script.js
```

The configuration options below are supported as command line arguments in the format `dotenv_config_<option>=value`

```bash
$ node -r dotenv/config your_script.js dotenv_config_path=/custom/path/to/.env dotenv_config_debug=true
```

Additionally, you can use environment variables to set configuration options. Command line arguments will precede these.

```bash
$ DOTENV_CONFIG_<OPTION>=value node -r dotenv/config your_script.js
```

```bash
$ DOTENV_CONFIG_ENCODING=latin1 DOTENV_CONFIG_DEBUG=true node -r dotenv/config your_script.js dotenv_config_path=/custom/path/to/.env
```

### Variable Expansion

You need to add the value of another variable in one of your variables? Use [dotenv-expand](https://github.com/motdotla/dotenv-expand).

### Syncing

You need to keep `.env` files in sync between machines, environments, or team members? Use [dotenv-vault](https://github.com/dotenv-org/dotenv-vault).

### Multiple Environments

You need to manage your secrets across different environments and apply them as needed? Use a `.env.vault` file with a `DOTENV_KEY`.

### Deploying

You need to deploy your secrets in a cloud-agnostic manner? Use a `.env.vault` file. See [deploying `.env.vault` files](https://github.com/motdotla/dotenv/tree/master#-deploying).

## 🌴 Manage Multiple Environments

Edit your production environment variables.

```bash
$ npx dotenv-vault open production
```

Regenerate your `.env.vault` file.

```bash
$ npx dotenv-vault build
```

*ℹ️  🔐 Vault Managed vs 💻 Locally Managed: The above example, for brevity's sake, used the 🔐 Vault Managed solution to manage your `.env.vault` file. You can instead use the 💻 Locally Managed solution. [Read more here](https://github.com/dotenv-org/dotenv-vault#how-do-i-use--locally-managed-dotenv-vault). Our vision is that other platforms and orchestration tools adopt the `.env.vault` standard as they did the `.env` standard. We don't expect to be the only ones providing tooling to manage and generate `.env.vault` files.*

<a href="https://github.com/dotenv-org/dotenv-vault#-manage-multiple-environments">Learn more at dotenv-vault: Manage Multiple Environments</a>

## 🚀 Deploying

*Note: Requires dotenv >= 16.1.0*

Encrypt your `.env.vault` file.

```bash
$ npx dotenv-vault build
```

Fetch your production `DOTENV_KEY`.

```bash
$ npx dotenv-vault keys production
```

Set `DOTENV_KEY` on your server.

```bash
# heroku example
heroku config:set DOTENV_KEY=dotenv://:key_1234…@dotenv.org/vault/.env.vault?environment=production
```

That's it! On deploy, your `.env.vault` file will be decrypted and its secrets injected as environment variables – just in time.

*ℹ️ A note from [Mot](https://github.com/motdotla): Until recently, we did not have an opinion on how and where to store your secrets in production. We now strongly recommend generating a `.env.vault` file. It's the best way to prevent your secrets from being scattered across multiple servers and cloud providers – protecting you from breaches like the [CircleCI breach](https://techcrunch.com/2023/01/05/circleci-breach/). Also it unlocks interoperability WITHOUT native third-party integrations. Third-party integrations are [increasingly risky](https://coderpad.io/blog/development/heroku-github-breach/) to our industry. They may be the 'du jour' of today, but we imagine a better future.*

<a href="https://github.com/dotenv-org/dotenv-vault#-deploying">Learn more at dotenv-vault: Deploying</a>

## 📚 Examples

See [examples](https://github.com/dotenv-org/examples) of using dotenv with various frameworks, languages, and configurations.

* [nodejs](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-nodejs)
* [nodejs (debug on)](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-nodejs-debug)
* [nodejs (override on)](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-nodejs-override)
* [nodejs (processEnv override)](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-custom-target)
* [nodejs (DOTENV_KEY override)](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-vault-custom-target)
* [esm](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-esm)
* [esm (preload)](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-esm-preload)
* [typescript](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-typescript)
* [typescript parse](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-typescript-parse)
* [typescript config](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-typescript-config)
* [webpack](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-webpack)
* [webpack (plugin)](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-webpack2)
* [react](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-react)
* [react (typescript)](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-react-typescript)
* [express](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-express)
* [nestjs](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-nestjs)
* [fastify](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-fastify)

## 📖 Documentation

Dotenv exposes four functions:

* `config`
* `parse`
* `populate`
* `decrypt`

### Config

`config` will read your `.env` file, parse the contents, assign it to
[`process.env`](https://nodejs.org/docs/latest/api/process.html#process_process_env),
and return an Object with a `parsed` key containing the loaded content or an `error` key if it failed.

```js
const result = dotenv.config()

if (result.error) {
  throw result.error
}

console.log(result.parsed)
```

You can additionally, pass options to `config`.

#### Options

##### path

Default: `path.resolve(process.cwd(), '.env')`

Specify a custom path if your file containing environment variables is located elsewhere.

```js
require('dotenv').config({ path: '/custom/path/to/.env' })
```

##### encoding

Default: `utf8`

Specify the encoding of your file containing environment variables.

```js
require('dotenv').config({ encoding: 'latin1' })
```

##### debug

Default: `false`

Turn on logging to help debug why certain keys or values are not being set as you expect.

```js
require('dotenv').config({ debug: process.env.DEBUG })
```

##### override

Default: `false`

Override any environment variables that have already been set on your machine with values from your .env file.

```js
require('dotenv').config({ override: true })
```

##### processEnv

Default: `process.env`

Specify an object to write your secrets to. Defaults to `process.env` environment variables.

```js
const myObject = {}
require('dotenv').config({ processEnv: myObject })

console.log(myObject) // values from .env or .env.vault live here now.
console.log(process.env) // this was not changed or written to
```

##### DOTENV_KEY

Default: `process.env.DOTENV_KEY`

Pass the `DOTENV_KEY` directly to config options. Defaults to looking for `process.env.DOTENV_KEY` environment variable. Note this only applies to decrypting `.env.vault` files. If passed as null or undefined, or not passed at all, dotenv falls back to its traditional job of parsing a `.env` file.

```js
require('dotenv').config({ DOTENV_KEY: 'dotenv://:key_1234…@dotenv.org/vault/.env.vault?environment=production' })
```

### Parse

The engine which parses the contents of your file containing environment
variables is available to use. It accepts a String or Buffer and will return
an Object with the parsed keys and values.

```js
const dotenv = require('dotenv')
const buf = Buffer.from('BASIC=basic')
const config = dotenv.parse(buf) // will return an object
console.log(typeof config, config) // object { BASIC : 'basic' }
```

#### Options

##### debug

Default: `false`

Turn on logging to help debug why certain keys or values are not being set as you expect.

```js
const dotenv = require('dotenv')
const buf = Buffer.from('hello world')
const opt = { debug: true }
const config = dotenv.parse(buf, opt)
// expect a debug message because the buffer is not in KEY=VAL form
```

### Populate

The engine which populates the contents of your .env file to `process.env` is available for use. It accepts a target, a source, and options. This is useful for power users who want to supply their own objects.

For example, customizing the source:

```js
const dotenv = require('dotenv')
const parsed = { HELLO: 'world' }

dotenv.populate(process.env, parsed)

console.log(process.env.HELLO) // world
```

For example, customizing the source AND target:

```js
const dotenv = require('dotenv')
const parsed = { HELLO: 'universe' }
const target = { HELLO: 'world' } // empty object

dotenv.populate(target, parsed, { override: true, debug: true })

console.log(target) // { HELLO: 'universe' }
```

#### options

##### Debug

Default: `false`

Turn on logging to help debug why certain keys or values are not being populated as you expect.

##### override

Default: `false`

Override any environment variables that have already been set.

### Decrypt

The engine which decrypts the ciphertext contents of your .env.vault file is available for use. It accepts a ciphertext and a decryption key. It uses AES-256-GCM encryption.

For example, decrypting a simple ciphertext:

```js
const dotenv = require('dotenv')
const ciphertext = 's7NYXa809k/bVSPwIAmJhPJmEGTtU0hG58hOZy7I0ix6y5HP8LsHBsZCYC/gw5DDFy5DgOcyd18R'
const decryptionKey = 'ddcaa26504cd70a6fef9801901c3981538563a1767c297cb8416e8a38c62fe00'

const decrypted = dotenv.decrypt(ciphertext, decryptionKey)

console.log(decrypted) // # development@v6\nALPHA="zeta"
```

## ❓ FAQ

### Why is the `.env` file not loading my environment variables successfully?

Most likely your `.env` file is not in the correct place. [See this stack overflow](https://stackoverflow.com/questions/42335016/dotenv-file-is-not-loading-environment-variables).

Turn on debug mode and try again..

```js
require('dotenv').config({ debug: true })
```

You will receive a helpful error outputted to your console.

### Should I commit my `.env` file?

No. We **strongly** recommend against committing your `.env` file to version
control. It should only include environment-specific values such as database
passwords or API keys. Your production database should have a different
password than your development database.

### Should I have multiple `.env` files?

No. We **strongly** recommend against having a "main" `.env` file and an "environment" `.env` file like `.env.test`. Your config should vary between deploys, and you should not be sharing values between environments.

> In a twelve-factor app, env vars are granular controls, each fully orthogonal to other env vars. They are never grouped together as “environments”, but instead are independently managed for each deploy. This is a model that scales up smoothly as the app naturally expands into more deploys over its lifetime.
>
> – [The Twelve-Factor App](http://12factor.net/config)

### What rules does the parsing engine follow?

The parsing engine currently supports the following rules:

- `BASIC=basic` becomes `{BASIC: 'basic'}`
- empty lines are skipped
- lines beginning with `#` are treated as comments
- `#` marks the beginning of a comment (unless when the value is wrapped in quotes)
- empty values become empty strings (`EMPTY=` becomes `{EMPTY: ''}`)
- inner quotes are maintained (think JSON) (`JSON={"foo": "bar"}` becomes `{JSON:"{\"foo\": \"bar\"}"`)
- whitespace is removed from both ends of unquoted values (see more on [`trim`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim)) (`FOO=  some value  ` becomes `{FOO: 'some value'}`)
- single and double quoted values are escaped (`SINGLE_QUOTE='quoted'` becomes `{SINGLE_QUOTE: "quoted"}`)
- single and double quoted values maintain whitespace from both ends (`FOO="  some value  "` becomes `{FOO: '  some value  '}`)
- double quoted values expand new lines (`MULTILINE="new\nline"` becomes

```
{MULTILINE: 'new
line'}
```

- backticks are supported (`` BACKTICK_KEY=`This has 'single' and "double" quotes inside of it.` ``)

### What happens to environment variables that were already set?

By default, we will never modify any environment variables that have already been set. In particular, if there is a variable in your `.env` file which collides with one that already exists in your environment, then that variable will be skipped.

If instead, you want to override `process.env` use the `override` option.

```javascript
require('dotenv').config({ override: true })
```

### How come my environment variables are not showing up for React?

Your React code is run in Webpack, where the `fs` module or even the `process` global itself are not accessible out-of-the-box. `process.env` can only be injected through Webpack configuration.

If you are using [`react-scripts`](https://www.npmjs.com/package/react-scripts), which is distributed through [`create-react-app`](https://create-react-app.dev/), it has dotenv built in but with a quirk. Preface your environment variables with `REACT_APP_`. See [this stack overflow](https://stackoverflow.com/questions/42182577/is-it-possible-to-use-dotenv-in-a-react-project) for more details.

If you are using other frameworks (e.g. Next.js, Gatsby...), you need to consult their documentation for how to inject environment variables into the client.

### Can I customize/write plugins for dotenv?

Yes! `dotenv.config()` returns an object representing the parsed `.env` file. This gives you everything you need to continue setting values on `process.env`. For example:

```js
const dotenv = require('dotenv')
const variableExpansion = require('dotenv-expand')
const myEnv = dotenv.config()
variableExpansion(myEnv)
```

### How do I use dotenv with `import`?

Simply..

```javascript
// index.mjs (ESM)
import 'dotenv/config' // see https://github.com/motdotla/dotenv#how-do-i-use-dotenv-with-import
import express from 'express'
```

A little background..

> When you run a module containing an `import` declaration, the modules it imports are loaded first, then each module body is executed in a depth-first traversal of the dependency graph, avoiding cycles by skipping anything already executed.
>
> – [ES6 In Depth: Modules](https://hacks.mozilla.org/2015/08/es6-in-depth-modules/)

What does this mean in plain language? It means you would think the following would work but it won't.

`errorReporter.mjs`:
```js
import { Client } from 'best-error-reporting-service'

export default new Client(process.env.API_KEY)
```
`index.mjs`:
```js
// Note: this is INCORRECT and will not work
import * as dotenv from 'dotenv'
dotenv.config()

import errorReporter from './errorReporter.mjs'
errorReporter.report(new Error('documented example'))
```

`process.env.API_KEY` will be blank.

Instead, `index.mjs` should be written as..

```js
import 'dotenv/config'

import errorReporter from './errorReporter.mjs'
errorReporter.report(new Error('documented example'))
```

Does that make sense? It's a bit unintuitive, but it is how importing of ES6 modules work. Here is a [working example of this pitfall](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-es6-import-pitfall).

There are two alternatives to this approach:

1. Preload dotenv: `node --require dotenv/config index.js` (_Note: you do not need to `import` dotenv with this approach_)
2. Create a separate file that will execute `config` first as outlined in [this comment on #133](https://github.com/motdotla/dotenv/issues/133#issuecomment-255298822)

### Why am I getting the error `Module not found: Error: Can't resolve 'crypto|os|path'`?

You are using dotenv on the front-end and have not included a polyfill. Webpack < 5 used to include these for you. Do the following:

```bash
npm install node-polyfill-webpack-plugin
```

Configure your `webpack.config.js` to something like the following.

```js
require('dotenv').config()

const path = require('path');
const webpack = require('webpack')

const NodePolyfillPlugin = require('node-polyfill-webpack-plugin')

module.exports = {
  mode: 'development',
  entry: './src/index.ts',
  output: {
    filename: 'bundle.js',
    path: path.resolve(__dirname, 'dist'),
  },
  plugins: [
    new NodePolyfillPlugin(),
    new webpack.DefinePlugin({
      'process.env': {
        HELLO: JSON.stringify(process.env.HELLO)
      }
    }),
  ]
};
```

Alternatively, just use [dotenv-webpack](https://github.com/mrsteele/dotenv-webpack) which does this and more behind the scenes for you.

### What about variable expansion?

Try [dotenv-expand](https://github.com/motdotla/dotenv-expand)

### What about syncing and securing .env files?

Use [dotenv-vault](https://github.com/dotenv-org/dotenv-vault)

### What is a `.env.vault` file?

A `.env.vault` file is an encrypted version of your development (and ci, staging, production, etc) environment variables. It is paired with a `DOTENV_KEY` to deploy your secrets more securely than scattering them across multiple platforms and tools. Use [dotenv-vault](https://github.com/dotenv-org/dotenv-vault) to manage and generate them.

## Contributing Guide

See [CONTRIBUTING.md](CONTRIBUTING.md)

## CHANGELOG

See [CHANGELOG.md](CHANGELOG.md)

## Who's using dotenv?

[These npm modules depend on it.](https://www.npmjs.com/browse/depended/dotenv)

Projects that expand it often use the [keyword "dotenv" on npm](https://www.npmjs.com/search?q=keywords:dotenv).

```

`/home/sam/hack-pro/Vynix-v0/foundry/node_modules/dotenv/config.d.ts`:

```ts
export {};

```

`/home/sam/hack-pro/Vynix-v0/foundry/node_modules/dotenv/lib/cli-options.js`:

```js
const re = /^dotenv_config_(encoding|path|debug|override|DOTENV_KEY)=(.+)$/

module.exports = function optionMatcher (args) {
  return args.reduce(function (acc, cur) {
    const matches = cur.match(re)
    if (matches) {
      acc[matches[1]] = matches[2]
    }
    return acc
  }, {})
}

```

`/home/sam/hack-pro/Vynix-v0/foundry/node_modules/dotenv/lib/env-options.js`:

```js
// ../config.js accepts options via environment variables
const options = {}

if (process.env.DOTENV_CONFIG_ENCODING != null) {
  options.encoding = process.env.DOTENV_CONFIG_ENCODING
}

if (process.env.DOTENV_CONFIG_PATH != null) {
  options.path = process.env.DOTENV_CONFIG_PATH
}

if (process.env.DOTENV_CONFIG_DEBUG != null) {
  options.debug = process.env.DOTENV_CONFIG_DEBUG
}

if (process.env.DOTENV_CONFIG_OVERRIDE != null) {
  options.override = process.env.DOTENV_CONFIG_OVERRIDE
}

if (process.env.DOTENV_CONFIG_DOTENV_KEY != null) {
  options.DOTENV_KEY = process.env.DOTENV_CONFIG_DOTENV_KEY
}

module.exports = options

```

`/home/sam/hack-pro/Vynix-v0/foundry/node_modules/dotenv/lib/main.js`:

```js
const fs = require('fs')
const path = require('path')
const os = require('os')
const crypto = require('crypto')
const packageJson = require('../package.json')

const version = packageJson.version

const LINE = /(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg

// Parse src into an Object
function parse (src) {
  const obj = {}

  // Convert buffer to string
  let lines = src.toString()

  // Convert line breaks to same format
  lines = lines.replace(/\r\n?/mg, '\n')

  let match
  while ((match = LINE.exec(lines)) != null) {
    const key = match[1]

    // Default undefined or null to empty string
    let value = (match[2] || '')

    // Remove whitespace
    value = value.trim()

    // Check if double quoted
    const maybeQuote = value[0]

    // Remove surrounding quotes
    value = value.replace(/^(['"`])([\s\S]*)\1$/mg, '$2')

    // Expand newlines if double quoted
    if (maybeQuote === '"') {
      value = value.replace(/\\n/g, '\n')
      value = value.replace(/\\r/g, '\r')
    }

    // Add to object
    obj[key] = value
  }

  return obj
}

function _parseVault (options) {
  const vaultPath = _vaultPath(options)

  // Parse .env.vault
  const result = DotenvModule.configDotenv({ path: vaultPath })
  if (!result.parsed) {
    throw new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`)
  }

  // handle scenario for comma separated keys - for use with key rotation
  // example: DOTENV_KEY="dotenv://:key_1234@dotenv.org/vault/.env.vault?environment=prod,dotenv://:key_7890@dotenv.org/vault/.env.vault?environment=prod"
  const keys = _dotenvKey(options).split(',')
  const length = keys.length

  let decrypted
  for (let i = 0; i < length; i++) {
    try {
      // Get full key
      const key = keys[i].trim()

      // Get instructions for decrypt
      const attrs = _instructions(result, key)

      // Decrypt
      decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key)

      break
    } catch (error) {
      // last key
      if (i + 1 >= length) {
        throw error
      }
      // try next key
    }
  }

  // Parse decrypted .env string
  return DotenvModule.parse(decrypted)
}

function _log (message) {
  console.log(`[dotenv@${version}][INFO] ${message}`)
}

function _warn (message) {
  console.log(`[dotenv@${version}][WARN] ${message}`)
}

function _debug (message) {
  console.log(`[dotenv@${version}][DEBUG] ${message}`)
}

function _dotenvKey (options) {
  // prioritize developer directly setting options.DOTENV_KEY
  if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {
    return options.DOTENV_KEY
  }

  // secondary infra already contains a DOTENV_KEY environment variable
  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {
    return process.env.DOTENV_KEY
  }

  // fallback to empty string
  return ''
}

function _instructions (result, dotenvKey) {
  // Parse DOTENV_KEY. Format is a URI
  let uri
  try {
    uri = new URL(dotenvKey)
  } catch (error) {
    if (error.code === 'ERR_INVALID_URL') {
      throw new Error('INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenv.org/vault/.env.vault?environment=development')
    }

    throw error
  }

  // Get decrypt key
  const key = uri.password
  if (!key) {
    throw new Error('INVALID_DOTENV_KEY: Missing key part')
  }

  // Get environment
  const environment = uri.searchParams.get('environment')
  if (!environment) {
    throw new Error('INVALID_DOTENV_KEY: Missing environment part')
  }

  // Get ciphertext payload
  const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`
  const ciphertext = result.parsed[environmentKey] // DOTENV_VAULT_PRODUCTION
  if (!ciphertext) {
    throw new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`)
  }

  return { ciphertext, key }
}

function _vaultPath (options) {
  let dotenvPath = path.resolve(process.cwd(), '.env')

  if (options && options.path && options.path.length > 0) {
    dotenvPath = options.path
  }

  // Locate .env.vault
  return dotenvPath.endsWith('.vault') ? dotenvPath : `${dotenvPath}.vault`
}

function _resolveHome (envPath) {
  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath
}

function _configVault (options) {
  _log('Loading env from encrypted .env.vault')

  const parsed = DotenvModule._parseVault(options)

  let processEnv = process.env
  if (options && options.processEnv != null) {
    processEnv = options.processEnv
  }

  DotenvModule.populate(processEnv, parsed, options)

  return { parsed }
}

function configDotenv (options) {
  let dotenvPath = path.resolve(process.cwd(), '.env')
  let encoding = 'utf8'
  const debug = Boolean(options && options.debug)

  if (options) {
    if (options.path != null) {
      dotenvPath = _resolveHome(options.path)
    }
    if (options.encoding != null) {
      encoding = options.encoding
    } else {
      if (debug) {
        _debug('No encoding is specified. UTF-8 is used by default')
      }
    }
  }

  try {
    // Specifying an encoding returns a string instead of a buffer
    const parsed = DotenvModule.parse(fs.readFileSync(dotenvPath, { encoding }))

    let processEnv = process.env
    if (options && options.processEnv != null) {
      processEnv = options.processEnv
    }

    DotenvModule.populate(processEnv, parsed, options)

    return { parsed }
  } catch (e) {
    if (debug) {
      _debug(`Failed to load ${dotenvPath} ${e.message}`)
    }

    return { error: e }
  }
}

// Populates process.env from .env file
function config (options) {
  const vaultPath = _vaultPath(options)

  // fallback to original dotenv if DOTENV_KEY is not set
  if (_dotenvKey(options).length === 0) {
    return DotenvModule.configDotenv(options)
  }

  // dotenvKey exists but .env.vault file does not exist
  if (!fs.existsSync(vaultPath)) {
    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`)

    return DotenvModule.configDotenv(options)
  }

  return DotenvModule._configVault(options)
}

function decrypt (encrypted, keyStr) {
  const key = Buffer.from(keyStr.slice(-64), 'hex')
  let ciphertext = Buffer.from(encrypted, 'base64')

  const nonce = ciphertext.subarray(0, 12)
  const authTag = ciphertext.subarray(-16)
  ciphertext = ciphertext.subarray(12, -16)

  try {
    const aesgcm = crypto.createDecipheriv('aes-256-gcm', key, nonce)
    aesgcm.setAuthTag(authTag)
    return `${aesgcm.update(ciphertext)}${aesgcm.final()}`
  } catch (error) {
    const isRange = error instanceof RangeError
    const invalidKeyLength = error.message === 'Invalid key length'
    const decryptionFailed = error.message === 'Unsupported state or unable to authenticate data'

    if (isRange || invalidKeyLength) {
      const msg = 'INVALID_DOTENV_KEY: It must be 64 characters long (or more)'
      throw new Error(msg)
    } else if (decryptionFailed) {
      const msg = 'DECRYPTION_FAILED: Please check your DOTENV_KEY'
      throw new Error(msg)
    } else {
      console.error('Error: ', error.code)
      console.error('Error: ', error.message)
      throw error
    }
  }
}

// Populate process.env with parsed values
function populate (processEnv, parsed, options = {}) {
  const debug = Boolean(options && options.debug)
  const override = Boolean(options && options.override)

  if (typeof parsed !== 'object') {
    throw new Error('OBJECT_REQUIRED: Please check the processEnv argument being passed to populate')
  }

  // Set process.env
  for (const key of Object.keys(parsed)) {
    if (Object.prototype.hasOwnProperty.call(processEnv, key)) {
      if (override === true) {
        processEnv[key] = parsed[key]
      }

      if (debug) {
        if (override === true) {
          _debug(`"${key}" is already defined and WAS overwritten`)
        } else {
          _debug(`"${key}" is already defined and was NOT overwritten`)
        }
      }
    } else {
      processEnv[key] = parsed[key]
    }
  }
}

const DotenvModule = {
  configDotenv,
  _configVault,
  _parseVault,
  config,
  decrypt,
  parse,
  populate
}

module.exports.configDotenv = DotenvModule.configDotenv
module.exports._configVault = DotenvModule._configVault
module.exports._parseVault = DotenvModule._parseVault
module.exports.config = DotenvModule.config
module.exports.decrypt = DotenvModule.decrypt
module.exports.parse = DotenvModule.parse
module.exports.populate = DotenvModule.populate

module.exports = DotenvModule

```

`/home/sam/hack-pro/Vynix-v0/foundry/node_modules/dotenv/lib/main.d.ts`:

```ts
// TypeScript Version: 3.0
/// <reference types="node" />
import type { URL } from 'node:url';

export interface DotenvParseOutput {
  [name: string]: string;
}

/**
 * Parses a string or buffer in the .env file format into an object.
 *
 * See https://docs.dotenv.org
 *
 * @param src - contents to be parsed. example: `'DB_HOST=localhost'`
 * @returns an object with keys and values based on `src`. example: `{ DB_HOST : 'localhost' }`
 */
export function parse<T extends DotenvParseOutput = DotenvParseOutput>(
  src: string | Buffer
): T;

export interface DotenvConfigOptions {
  /**
   * Default: `path.resolve(process.cwd(), '.env')`
   *
   * Specify a custom path if your file containing environment variables is located elsewhere.
   *
   * example: `require('dotenv').config({ path: '/custom/path/to/.env' })`
   */
  path?: string | URL;

  /**
   * Default: `utf8`
   *
   * Specify the encoding of your file containing environment variables.
   *
   * example: `require('dotenv').config({ encoding: 'latin1' })`
   */
  encoding?: string;

  /**
   * Default: `false`
   *
   * Turn on logging to help debug why certain keys or values are not being set as you expect.
   *
   * example: `require('dotenv').config({ debug: process.env.DEBUG })`
   */
  debug?: boolean;

  /**
   * Default: `false`
   *
   * Override any environment variables that have already been set on your machine with values from your .env file.
   *
   * example: `require('dotenv').config({ override: true })`
   */
  override?: boolean;

  /**
   * Default: `process.env`
   *
   * Specify an object to write your secrets to. Defaults to process.env environment variables.
   *
   * example: `const processEnv = {}; require('dotenv').config({ processEnv: processEnv })`
   */
  processEnv?: DotenvPopulateInput;

  /**
   * Default: `undefined`
   *
   * Pass the DOTENV_KEY directly to config options. Defaults to looking for process.env.DOTENV_KEY environment variable. Note this only applies to decrypting .env.vault files. If passed as null or undefined, or not passed at all, dotenv falls back to its traditional job of parsing a .env file.
   *
   * example: `require('dotenv').config({ DOTENV_KEY: 'dotenv://:key_1234…@dotenv.org/vault/.env.vault?environment=production' })`
   */
  DOTENV_KEY?: string;
}

export interface DotenvConfigOutput {
  error?: Error;
  parsed?: DotenvParseOutput;
}

export interface DotenvPopulateOptions {
  /**
   * Default: `false`
   *
   * Turn on logging to help debug why certain keys or values are not being set as you expect.
   *
   * example: `require('dotenv').config({ debug: process.env.DEBUG })`
   */
  debug?: boolean;

  /**
   * Default: `false`
   *
   * Override any environment variables that have already been set on your machine with values from your .env file.
   *
   * example: `require('dotenv').config({ override: true })`
   */
  override?: boolean;
}

export interface DotenvPopulateInput {
  [name: string]: string;
}

/**
 * Loads `.env` file contents into process.env by default. If `DOTENV_KEY` is present, it smartly attempts to load encrypted `.env.vault` file contents into process.env.
 *
 * See https://docs.dotenv.org
 *
 * @param options - additional options. example: `{ path: './custom/path', encoding: 'latin1', debug: true, override: false }`
 * @returns an object with a `parsed` key if successful or `error` key if an error occurred. example: { parsed: { KEY: 'value' } }
 *
 */
export function config(options?: DotenvConfigOptions): DotenvConfigOutput;

/**
 * Loads `.env` file contents into process.env.
 *
 * See https://docs.dotenv.org
 *
 * @param options - additional options. example: `{ path: './custom/path', encoding: 'latin1', debug: true, override: false }`
 * @returns an object with a `parsed` key if successful or `error` key if an error occurred. example: { parsed: { KEY: 'value' } }
 *
 */
export function configDotenv(options?: DotenvConfigOptions): DotenvConfigOutput;

/**
 * Loads `source` json contents into `target` like process.env.
 *
 * See https://docs.dotenv.org
 *
 * @param processEnv - the target JSON object. in most cases use process.env but you can also pass your own JSON object
 * @param parsed - the source JSON object
 * @param options - additional options. example: `{ debug: true, override: false }`
 * @returns {void}
 *
 */
export function populate(processEnv: DotenvPopulateInput, parsed: DotenvPopulateInput, options?: DotenvConfigOptions): void;

/**
 * Decrypt ciphertext
 *
 * See https://docs.dotenv.org
 *
 * @param encrypted - the encrypted ciphertext string
 * @param keyStr - the decryption key string
 * @returns {string}
 *
 */
export function decrypt(encrypted: string, keyStr: string): string;

```